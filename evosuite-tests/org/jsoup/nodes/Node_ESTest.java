/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:02:46 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedWriter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.helper.Consumer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.Jsoup", "#text");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("abs:");
      cDataNode0.hasSameValue("abs:");
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Doctype");
      cDataNode0.hasSameValue((Object) null);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("@#uE6;");
      cDataNode0.hasSameValue(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("@#uE6;");
      CDataNode cDataNode1 = new CDataNode("Vt9;");
      cDataNode0.hasSameValue(cDataNode1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = new Document("wn2^");
      document0.normalise();
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("H}qJp2 ~vE{]");
      Document document0 = Parser.parseBodyFragment("H}qJp2 ~vE{]", "H}qJp2 ~vE{]");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("g4*t", parseSettings0);
      Attributes attributes0 = document0.attributes();
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      FormElement formElement1 = formElement0.addElement(document0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement1;
      // Undeclared exception!
      try { 
        formElement1.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".ZsQCb,8-l^|elyb", "p1pz");
      DataNode dataNode0 = new DataNode(".ZsQCb,8-l^|elyb");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      dataNode0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DataNode dataNode0 = new DataNode("wN2^}[WodvUkQ");
      dataNode0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(")<");
      Node node0 = cDataNode0.wrap(")<");
      node0.previousSibling();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gQ&H#8_~+\"HE-O", "gQ&H#8_~+\"HE-O");
      Element element0 = document0.head();
      element0.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("wN2^}[WoRzv4kQ");
      cDataNode0.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("abs:abs:rj/sz>kz3pso/e5lf*", "abs:abs:rj/sz>kz3pso/e5lf*");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("abs:abs:rj/sz>kz3pso/e5lf*");
      Element element0 = document0.prepend("abs:abs:rj/sz>kz3pso/e5lf*");
      Element element1 = document0.appendChild(element0);
      document0.prependChild(element1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("|]}_+[fT'--x");
      // Undeclared exception!
      try { 
        cDataNode0.removeChild(cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document0.selectFirst((Evaluator) evaluator_MatchText0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H}qJp2 ~vE{]", "H}qJp2 ~vE{]");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("g4*t", parseSettings0);
      Attributes attributes0 = document0.attributes();
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      // Undeclared exception!
      try { 
        formElement0.replaceChild(document0, formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H}qJp2 ~vE{]", "H}qJp2 ~vE{]");
      document0.wrap("V@[9m{|MQHdN");
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DataNode dataNode0 = new DataNode("{gX/<OzC");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        dataNode1.wrap("{gX/<OzC");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("wN^}[WdvUkQ");
      cDataNode0.wrap("tbody");
      cDataNode0.before("wN^}[WdvUkQ");
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("wN^}[WdvUkQ");
      cDataNode0.setParentNode(cDataNode0);
      // Undeclared exception!
      cDataNode0.before("wN^}[WdvUkQ");
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      document0.childNodesCopy();
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Parser.parseXmlFragment("", "");
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parse("wNt^}[WodvUkQ", "|>!rx*NrD.1cg");
      Attributes attributes0 = document0.attributes();
      attributes0.put("|>!rx*NrD.1cg", true);
      document0.absUrl("|>!rx*NrD.1cg");
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = new Document((String) null);
      document0.absUrl("0)3");
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("KI`&DoYMc8XO:#u[z{5", "KI`&DoYMc8XO:#u[z{5");
      Element element0 = document0.val("KI`&DoYMc8XO:#u[z{5");
      element0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("ScriptDataEscapeStart");
      cDataNode0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = new Document("abs:abs:wnt^");
      document0.removeAttr("abs:abs:wnt^");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.Jsoup", "#text");
      Document document1 = (Document)document0.clearAttributes();
      document1.removeAttr("#text");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Parser.parse("\"S\"w}GqM's1X5KQfc4", "\"S\"w}GqM's1X5KQfc4");
      document0.getElementsByAttribute("\"S\"w}GqM's1X5KQfc4");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = new Document("abs:abs:rj/sz>kz3pso/e5lf*");
      document0.getElementsByAttribute("abs:abs:rj/sz>kz3pso/e5lf*");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("abs:abs:rj/sz>kz3pso/e5lf*", "abs:abs:rj/sz>kz3pso/e5lf*");
      document0.attributesSize();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document((String) null);
      document0.attributesSize();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = Document.createShell("abs:abs:rj/sz>kz3pso/e5l*");
      document0.attr("abs:abs:rj/sz>kz3pso/e5l*");
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Parser.parse("Aabs:", "Aabs:");
      Elements elements0 = document0.getElementsByAttributeValueNot("Aabs:", "Aabs:");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(")<");
      cDataNode0.wrap(")<");
      assertTrue(cDataNode0.hasParent());
      
      cDataNode0.unwrap();
      assertFalse(cDataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comment comment0 = new Comment("usD,ckx");
      comment0.toString();
      assertEquals(0, comment0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = new Document("abs:abs:rj/sz>kz3pso/e5lf*");
      // Undeclared exception!
      try { 
        document0.forEachNode((Consumer<? super Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("abs:BOURt1[%)GzD~\"J{e", "abs:BOURt1[%)GzD~\"J{e", "g4*t");
      assertEquals("#doctype", documentType0.nodeName());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Parser.parse("\"S\"w}GqM's1X5KQfc4", "\"S\"w}GqM's1X5KQfc4");
      String string0 = document0.toString();
      assertEquals("<html>\n <head></head>\n <body>\n  \"S\"w}GqM's1X5KQfc4\n </body>\n</html>", string0);
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("abs:abs:rj/sz>kz3pso/e5lf*");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        cDataNode0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = new Document("abs:abs:rj/sz>kz3pso/e5lf*");
      // Undeclared exception!
      try { 
        document0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("s=:");
      Node node0 = cDataNode0.shallowClone();
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.hasParent());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gQ&H#8_~+\"HE-O", "gQ&H#8_~+\"HE-O");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        element0.unwrap();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = new Document("abs:abs:rj/sz>kz3pso/e5lf*");
      // Undeclared exception!
      try { 
        document0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Doctype");
      // Undeclared exception!
      try { 
        cDataNode0.after("Doctype");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Parser.parse("dm|01(aDy\"o8Qp", "");
      document0.hashCode();
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gQ&H#8_~+\"HE-O", "gQ&H#8_~+\"HE-O");
      Element element0 = document0.head();
      Element element1 = element0.wrap("n},F;d0b7N^");
      Element element2 = document0.appendTo(element1);
      element2.unwrap();
  }
}
