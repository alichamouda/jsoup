/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:22:21 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.Collection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.TreeBuilder;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        parser1.newInstance();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String string0 = null;
      String string1 = "!Ex=7}rkK";
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, "!Ex=7}rkK");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "U&$";
      Parser.parseBodyFragment("U&$", "U&$");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("U&$", "U&$");
      parser0.setTrackErrors(0);
      document0.title();
      Parser.parseXmlFragment("N", "N");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeTag("");
      ParseSettings.normalName("");
      parseSettings0.normalizeAttribute("");
      Parser parser1 = parser0.settings(parseSettings0);
      parser1.parseInput("", "n{bhM 2p");
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parseFragment("L;ZStJ:8 m", (Element) document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = "V^@ILQUj T";
      Parser.unescapeEntities("V^@ILQUj T", true);
      Parser parser0 = Parser.htmlParser();
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("V^@ILQUj T", ";Z");
      String string1 = "java.lang.Module";
      document0.getElementsByIndexGreaterThan(786);
      Parser.parseXmlFragment("java.lang.Module", "V^@ILQUj T");
      Parser parser1 = parser0.settings((ParseSettings) null);
      Parser.unescapeEntities(";Z", false);
      parser0.settings();
      parser1.settings();
      String string2 = null;
      document0.removeClass("V^@ILQUj T");
      int int0 = (-1124);
      // Undeclared exception!
      try { 
        Parser.parse("V^@ILQUj T", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Parser.parse("", "");
      Parser.parseBodyFragment("'*rf>|h5e5-n", "'*rf>|h5e5-n");
      Parser.parseBodyFragment("'*rf>|h5e5-n", "'*rf>|h5e5-n");
      Parser.htmlParser();
      Parser.unescapeEntities("", false);
      Parser.parseFragment("'*rf>|h5e5-n", (Element) document0, ",si");
      Parser.xmlParser();
      // Undeclared exception!
      try { 
        Parser.parse((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "CommentStart";
      StringReader stringReader0 = new StringReader("CommentStart");
      Document document0 = parser0.parseInput((Reader) stringReader0, "CommentStart");
      String string1 = "xX@`Ol//)G PCLm+>RD";
      // Undeclared exception!
      try { 
        document0.before("xX@`Ol//)G PCLm+>RD");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      parser0.getErrors();
      parser0.newInstance();
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "Lh'l~-B])ZS}Gm";
      Document document0 = Parser.parse("Lh'l~-B])ZS}Gm", "Lh'l~-B])ZS}Gm");
      Parser.unescapeEntities("Lh'l~-B])ZS}Gm", true);
      parser0.settings();
      parser0.parseFragmentInput("Lh'l~-B])ZS}Gm", document0, "Lh'l~-B])ZS}Gm");
      document0.textNodes();
      String string1 = null;
      String string2 = "org.jsoup.parser.Parser";
      // Undeclared exception!
      try { 
        parser0.parseFragmentInput((String) null, document0, "org.jsoup.parser.Parser");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilder htmlTreeBuilder1 = htmlTreeBuilder0.newInstance();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      htmlTreeBuilder1.settings = parseSettings0;
      Parser parser0 = new Parser(htmlTreeBuilder1);
      String string0 = "";
      Parser.parseXmlFragment("", "UdNM1z");
      parser0.newInstance();
      parser0.getErrors();
      // Undeclared exception!
      try { 
        parser0.isContentForTagData((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.isTrackErrors();
      Parser.parseXmlFragment(">v%m,<wE", "9WZ8zs+u");
      Parser.unescapeEntities(">v%m,<wE", true);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser.parseXmlFragment("", "");
      Document document0 = Parser.parse("", ")eF>70sH/");
      Element element0 = document0.attr(")eF>70sH/", "");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1302));
      element0.data();
      ParseError parseError0 = mock(ParseError.class, new ViolatedAssumptionAnswer());
      parseErrorList0.add(0, parseError0);
      ParseErrorList parseErrorList1 = new ParseErrorList(parseErrorList0);
      String string0 = "";
      document0.removeAttr("");
      Parser.parseFragment(")eF>70sH/", element0, "", parseErrorList1);
      Parser parser0 = document0.parser();
      Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      parser1.settings((ParseSettings) null);
      Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        parser1.parseFragmentInput("", document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      String string0 = "0X!GG";
      Document document0 = Parser.parseBodyFragment("BAD?{v>f'L<", "0X!GG");
      Parser parser0 = document0.parser();
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      Parser parser2 = parser1.newInstance();
      XmlTreeBuilder xmlTreeBuilder1 = new XmlTreeBuilder();
      String string1 = "org.jsoup.parser.Parser";
      xmlTreeBuilder1.parseFragment("org.eclipse.jetty.util.CountingCallback", document0, "org.jsoup.parser.Parser", parser0);
      ParseSettings parseSettings0 = xmlTreeBuilder1.defaultSettings();
      parser1.settings(parseSettings0);
      xmlTreeBuilder0.parser = parser2;
      Parser parser3 = new Parser(xmlTreeBuilder0);
      String string2 = null;
      // Undeclared exception!
      try { 
        Parser.parseFragment((String) null, (Element) document0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Parser.htmlParser();
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilder htmlTreeBuilder1 = htmlTreeBuilder0.newInstance();
      Parser.parseXmlFragment("", ";)lS:?W Jep.;J8iV");
      parser0.setTreeBuilder(htmlTreeBuilder1);
      Parser.parse("'|-p", "");
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment((String) null, "8u,e;iA5&;s^[JwYu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(0);
      // Undeclared exception!
      try { 
        Parser.parse("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      ParseSettings.normalName("d4");
      parseSettings0.normalizeAttribute("d4");
      attributes0.put("d4", "d4");
      String string0 = "";
      attributes0.iterator();
      attributes0.html();
      attributes0.hasDeclaredValueForKey("fillInterested {}");
      boolean boolean0 = true;
      Parser.unescapeEntities("", true);
      attributes0.iterator();
      String string1 = "org.jsoup.parser.Parser";
      Attributes attributes2 = attributes1.add("org.jsoup.parser.Parser", "org.jsoup.parser.Parser");
      attributes0.toString();
      attributes2.remove("d4");
      parseSettings0.normalizeAttributes(attributes2);
      parser0.settings(parseSettings0);
      // Undeclared exception!
      try { 
        parser0.parseInput((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        Parser.unescapeEntities((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      Parser.unescapeEntities("", false);
      Parser.parse("gb~Am~<a]%`=T:", "");
      Parser parser0 = null;
      try {
        parser0 = new Parser((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Document.createShell(" g^/TdFB");
      document0.getAllElements();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1039));
      Parser.parseFragment("", (Element) document0, " g^/TdFB", parseErrorList0);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = Parser.xmlParser();
      Parser.parseBodyFragment("", " g^/TdFB");
      parser0.getErrors();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilder htmlTreeBuilder1 = htmlTreeBuilder0.newInstance();
      Parser.parseBodyFragment("3_'/!N5jfYJ", "o^#ag:_BHnE5]JC!");
      ParseSettings parseSettings0 = htmlTreeBuilder1.settings;
      ParseSettings.normalName("");
      parser1.settings((ParseSettings) null);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder1 = xmlTreeBuilder0.newInstance();
      Parser parser0 = new Parser(xmlTreeBuilder1);
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder1);
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      parser1.settings(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        parser0.parseInput("s9S7!,", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Document.createShell("Too many redirects occurred trying to load URL %s");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Parser.parseFragment("", (Element) document0, "Too many redirects occurred trying to load URL %s", parseErrorList0);
      Document document1 = document0.parser(parser0);
      Parser parser1 = document1.parser();
      parser1.getTreeBuilder();
      document1.dataNodes();
      parser1.parseInput("", "");
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "plaintext";
      Parser.parseXmlFragment("plaintext", "plaintext");
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("plaintext", "plaintext");
      String string1 = "<` U]2KvW^-Y}aXa";
      parser0.isContentForTagData("<` U]2KvW^-Y}aXa");
      Reader reader0 = null;
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = ",G\\ZG1uE";
      Document document0 = Parser.parseBodyFragment(",GZG1uE", "m\"gDj");
      Document document1 = document0.clone();
      Element element0 = document1.attr("m\"gDj", "m\"gDj");
      Parser parser1 = parser0.newInstance();
      element0.appendText("m\"gDj");
      parser1.setTrackErrors(2657);
      // Undeclared exception!
      try { 
        Parser.parseFragment(",GZG1uE", element0, ",GZG1uE", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Charset must not be null", "|^p@$[EH");
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder1 = xmlTreeBuilder0.newInstance();
      Parser parser0 = new Parser(xmlTreeBuilder1);
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.setTrackErrors(1);
      parser1.parseInput("'E'5AF9p]3<oHMbNFE", "Charset must not be null");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = parseSettings0.normalizeAttributes(attributes0);
      Attribute attribute0 = Attribute.createFromEncoded(" <%s>", "|^p@$[EH");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.put(" <%s>", true);
      attributes3.put("", false);
      attributes1.get("org.eclipse.jetty.io.ConnectionStatistics");
      Attributes attributes4 = attributes3.add(" <%s>", (String) null);
      parseSettings0.normalizeAttributes(attributes4);
      parser2.parseFragmentInput("|^p@$[EH", document0, "q!u(1WFl#LwZ[{!5h");
      Parser.htmlParser();
      ParseSettings parseSettings1 = parser1.settings();
      parser1.settings(parseSettings1);
      Parser.xmlParser();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      parseSettings0.normalizeAttribute("");
      Parser parser1 = parser0.settings(parseSettings0);
      parser1.parseInput("", "");
      parser0.setTreeBuilder(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("org.jsoup.parser.Parser");
      parser0.parseInput((Reader) stringReader0, "fH7!N5fNH`-7}y<X*Y");
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = new Parser(xmlTreeBuilder0);
      Parser parser1 = parser0.setTreeBuilder(xmlTreeBuilder0);
      parser1.isContentForTagData("");
      Document document0 = Parser.parse("", "");
      parser1.settings();
      Parser.parseFragment("", (Element) document0, "Vz&V#Yo0-9BUG");
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.newInstance();
      Parser parser1 = parser0.newInstance();
      Parser.htmlParser();
      parser0.parseInput(":$wVy?aU", ":$wVy?aU");
      parser0.getErrors();
      Parser.unescapeEntities(":$wVy?aU", true);
      parser1.parseInput("", "org.jsoup.parser.Parser");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      parser1.parseInput("", "");
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser.parseFragment("", (Element) null, "");
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      parser1.settings(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      XmlTreeBuilder xmlTreeBuilder1 = xmlTreeBuilder0.newInstance();
      Parser parser0 = new Parser(xmlTreeBuilder1);
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      parser0.settings(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Parser parser0 = null;
      try {
        parser0 = new Parser((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      TreeBuilder treeBuilder0 = null;
      Parser.parseBodyFragment("", "23kxKHE*x");
      // Undeclared exception!
      try { 
        parser0.setTreeBuilder((TreeBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = mock(ParseSettings.class, new ViolatedAssumptionAnswer());
      parser0.settings(parseSettings0);
      String string0 = "%YUP.-EgiGLo";
      Parser parser1 = Parser.xmlParser();
      Reader reader0 = mock(Reader.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(reader0).markSupported();
      String string1 = "-->";
      // Undeclared exception!
      try { 
        parser1.parseInput(reader0, "-->");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parser0.settings(parseSettings0);
      parser0.setTrackErrors(136);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.newInstance();
      Document document0 = Parser.parseBodyFragment("{} rejected {}", "");
      Element element0 = document0.body();
      parser0.parseFragmentInput("{} rejected {}", element0, "");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilder htmlTreeBuilder1 = htmlTreeBuilder0.newInstance();
      ParseSettings parseSettings0 = htmlTreeBuilder1.settings;
      Parser parser1 = parser0.settings((ParseSettings) null);
      Parser parser2 = parser1.setTreeBuilder(htmlTreeBuilder0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      // Undeclared exception!
      try { 
        parser2.parseInput((Reader) pipedReader0, "JNQ=IzAE_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Parser.parseBodyFragment("Z1ho%o,<:_Aa)5*Gf", ">,Ab/p4f1dJy:");
      Parser parser0 = Parser.xmlParser();
      parser0.isTrackErrors();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-2346));
      parser1.isContentForTagData("org.jsoup.parser.Parser");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Element element0 = null;
      Parser parser0 = Parser.htmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      parseErrorList0.clone();
      Parser.parseFragment(":LL/Y", (Element) null, ";#SZ<y:tz,W0mAl", parseErrorList0);
      parser0.getTreeBuilder();
      String string0 = null;
      // Undeclared exception!
      try { 
        Parser.parseXmlFragment((String) null, "0&Z4-J*V;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Parser.parseXmlFragment("^B_,rn/_SFUR*0", "");
      Parser.parse("", "^B_,rn/_SFUR*0");
      Parser parser0 = Parser.xmlParser();
      Parser.unescapeEntities("", true);
      parser0.isContentForTagData("%22");
      Parser.htmlParser();
  }
}
