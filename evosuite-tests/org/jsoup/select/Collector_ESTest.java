/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:29:58 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.select.Collector;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Collector_ESTest extends Collector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_IsFirstChild0);
      Comment comment0 = new Comment("");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = collector_FirstFinder0.head(comment0, (-3000));
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("7'$1JvpA?%Mp*t^");
      Evaluator.MatchesWholeText evaluator_MatchesWholeText0 = new Evaluator.MatchesWholeText(pattern0);
      Document document0 = new Document("7'$1JvpA?%Mp*t^");
      Element element0 = Collector.findFirst(evaluator_MatchesWholeText0, document0);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsEmpty0);
      Document document0 = Parser.parse("<8O1M;", "");
      Collector.collect(structuralEvaluator_Has0, document0);
  }
}
