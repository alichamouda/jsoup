/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:21:17 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.parser.Token;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Token_ESTest extends Token_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertEquals(6, token_TokenTypeArray0.length);
      assertNotNull(token_TokenTypeArray0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.reset();
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      Token.Tag token_Tag1 = token_StartTag0.name("(Zu_");
      assertNotNull(token_Tag1);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_Tag1, token_Tag0);
      assertSame(token_Tag1, token_StartTag0);
      
      token_StartTag0.newAttribute();
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("}K6FsU", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_Tag1);
      assertSame(token_StartTag1, token_Tag0);
      
      token_StartTag1.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_Tag1);
      assertSame(token_StartTag1, token_Tag0);
      
      boolean boolean0 = token_StartTag1.hasAttribute("org.jsoup.parser.Token$1");
      assertFalse(boolean0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_Tag1);
      assertSame(token_StartTag1, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('K');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeValue("Q^0-hd-&auxj|X\"r");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      boolean boolean0 = token_EndTag0.isCharacter();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      
      boolean boolean1 = token_EndTag1.isComment();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "4";
      Token.CData token_CData0 = new Token.CData("4");
      assertNotNull(token_CData0);
      
      boolean boolean0 = token_CData0.isCharacter();
      assertTrue(boolean0);
      
      boolean boolean1 = token_CData0.isCharacter();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Token.Character token_Character0 = token_CData0.data("f.%w5H2%/Wc");
      assertNotNull(token_Character0);
      assertSame(token_CData0, token_Character0);
      assertSame(token_Character0, token_CData0);
      
      // Undeclared exception!
      try { 
        token_CData0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      boolean boolean0 = token_Character0.isCData();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EndTag1.type = token_TokenType0;
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      token_EndTag1.attributes = null;
      String string0 = token_EndTag1.toString();
      assertEquals("</[unset]>", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean1 = token_EndTag1.isCharacter();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      token_Comment0.bogus = false;
      Token.Comment token_Comment2 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment2, token_Comment1);
      assertSame(token_Comment2, token_Comment0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Comment1.type = token_TokenType0;
      Token.Comment token_Comment3 = token_Comment0.append((String) null);
      assertNotNull(token_Comment3);
      assertSame(token_Comment0, token_Comment3);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment3, token_Comment0);
      assertSame(token_Comment3, token_Comment1);
      assertSame(token_Comment3, token_Comment2);
      
      boolean boolean0 = token_Comment1.isComment();
      assertTrue(boolean0);
      assertSame(token_Comment0, token_Comment3);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment1, token_Comment3);
      
      boolean boolean1 = token_Comment0.isComment();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_Comment0, token_Comment3);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment0, token_Comment2);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string0 = "^Xo.py.r.Y2gQ?";
      token_EndTag0.appendAttributeName("^Xo.py.r.Y2gQ?");
      String string1 = token_EndTag0.tokenType();
      assertEquals("EndTag", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      token_EndTag0.newAttribute();
      int[] intArray0 = new int[4];
      intArray0[0] = 512;
      intArray0[1] = (-25);
      intArray0[2] = 8;
      intArray0[3] = 24;
      // Undeclared exception!
      try { 
        token_EndTag0.appendAttributeValue(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertEquals(6, token_TokenTypeArray0.length);
      assertNotNull(token_TokenTypeArray0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      // Undeclared exception!
      try { 
        token_StartTag1.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendAttributeValue('f');
      token_EndTag0.newAttribute();
      token_EndTag0.appendTagName('T');
      token_EndTag0.appendAttributeName('f');
      token_EndTag0.tagName = "";
      // Undeclared exception!
      try { 
        token_EndTag0.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      String string0 = token_Doctype0.getName();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string1 = token_EndTag0.toString();
      assertEquals("</[unset]>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string0 = "&*~V_";
      token_EndTag0.appendTagName("&*~V_");
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("&*~V_");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeName('|');
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.setEmptyAttributeValue();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string1 = "L){y*f%H='Qz9$";
      // Undeclared exception!
      try { 
        token_EndTag1.appendAttributeName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Token$Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      token_EndTag0.appendTagName('T');
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("_vG");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName('w');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.name();
      assertEquals("_vGw", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('u');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag1.isComment();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean1 = token_EndTag0.hasAttribute("_vGw");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendAttributeName('+');
      String string0 = "]]>";
      token_EndTag0.finaliseTag();
      token_EndTag0.appendTagName('X');
      token_EndTag0.tagName = "]]>";
      token_EndTag0.appendAttributeValue("]]>");
      int[] intArray0 = new int[0];
      token_EndTag0.appendAttributeValue(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('K');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      token_EndTag0.appendAttributeValue(charArray0);
      assertEquals(6, charArray0.length);
      assertSame(token_EndTag0, token_EndTag1);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K', 'K'}, charArray0);
      
      token_EndTag0.appendAttributeValue("Q^0-hd-&au6j|X\"r");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      boolean boolean0 = token_EndTag0.isEndTag();
      assertTrue(boolean0);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      
      String string0 = token_EndTag1.toString();
      assertEquals("</[unset]>", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = "";
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_StartTag0.type = token_TokenType0;
      token_StartTag0.normalName = "";
      token_StartTag0.appendAttributeName("Ktrg");
      token_StartTag0.appendAttributeName('j');
      token_StartTag0.appendAttributeName("n");
      String string1 = token_StartTag0.tokenType();
      assertEquals("StartTag", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string2 = token_Comment0.getData();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertNotNull(string2);
      
      Token.Comment token_Comment1 = token_Comment0.append("");
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      String string0 = token_Doctype0.toString();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("<!doctype >", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      String string1 = token_Doctype0.toString();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("<!doctype >", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = token_Doctype0.isDoctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        token_Doctype0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.setEmptyAttributeValue();
      String string0 = token_EndTag0.tokenType();
      assertEquals("EndTag", string0);
      assertNotNull(string0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.selfClosing = true;
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("org.jsoup.parser.Token$Comment");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      token_EndTag1.newAttribute();
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      boolean boolean0 = token_Doctype0.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      
      boolean boolean1 = token_EndTag0.hasAttributes();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean2 = token_EndTag2.isSelfClosing();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      String string1 = token_Doctype0.getName();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean3 = token_EndTag2.isSelfClosing();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = 'u';
      charArray0[2] = '|';
      charArray0[3] = '2';
      charArray0[4] = 'c';
      charArray0[5] = 'L';
      charArray0[6] = '6';
      charArray0[7] = 'r';
      charArray0[8] = 'A';
      token_EndTag1.appendAttributeValue(charArray0);
      assertEquals(9, charArray0.length);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertArrayEquals(new char[] {'h', 'u', '|', '2', 'c', 'L', '6', 'r', 'A'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("_vG");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.name();
      assertEquals("_vG", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('u');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag1.isComment();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeValue('T');
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean1 = token_EndTag0.hasAttributes();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('K');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      token_EndTag0.appendAttributeValue(charArray0);
      assertEquals(6, charArray0.length);
      assertSame(token_EndTag0, token_EndTag1);
      assertArrayEquals(new char[] {'K', 'K', 'K', 'K', 'K', 'K'}, charArray0);
      
      token_EndTag0.appendAttributeValue("Q^0-hd-&auxj|X\"r");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      String string0 = token_Character0.getData();
      assertNull(string0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      token_Doctype0.forceQuirks = true;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertTrue(token_Doctype0.isForceQuirks());
      
      Token.Doctype token_Doctype1 = token_Doctype0.asDoctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertTrue(token_Doctype0.isForceQuirks());
      assertTrue(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      String string1 = token_Doctype1.toString();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertTrue(token_Doctype0.isForceQuirks());
      assertTrue(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertEquals("<!doctype >", string1);
      assertNotNull(string1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      boolean boolean0 = token_Doctype1.isForceQuirks();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertTrue(token_Doctype0.isForceQuirks());
      assertTrue(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertTrue(boolean0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_Character0.type = token_TokenType0;
      String string2 = token_Comment0.toString();
      assertEquals("<!---->", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        token_Character0.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.reset((StringBuilder) null);
      String string0 = token_Doctype0.getName();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      String string1 = token_EndTag0.toString();
      assertEquals("</[unset]>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("org.jsoup.parser.Token$EndTag");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeValue("");
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag0.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag1);
      
      boolean boolean0 = token_StartTag1.isDoctype();
      assertFalse(boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendTagName("");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      String string0 = "";
      Token.Comment token_Comment1 = token_Comment0.append("");
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      String string1 = token_Comment0.toString();
      assertEquals("<!---->", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_Comment0, token_Comment1);
      
      // Undeclared exception!
      try { 
        token_Comment1.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string0 = token_StartTag1.normalName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = token_StartTag1.hasAttributes();
      assertFalse(boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean1 = token_StartTag0.isEndTag();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      
      // Undeclared exception!
      try { 
        Token.TokenType.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.parser.Token.TokenType.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.selfClosing = false;
      Token.Tag token_Tag0 = token_StartTag0.name("VaM5@1RT/E`UH>O");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      String string0 = token_StartTag0.toStringName();
      assertNotNull(string0);
      assertSame(token_StartTag0, token_Tag0);
      
      String string1 = token_StartTag0.normalName();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_StartTag0, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.Doctype token_Doctype2 = token_Doctype1.asDoctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertNotNull(token_Doctype2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype0);
      
      String string0 = token_Doctype2.toString();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("<!doctype >", string0);
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype1, token_Doctype0);
      assertSame(token_Doctype1, token_Doctype2);
      assertSame(token_Doctype2, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeValue('9');
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append('9');
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("]]>");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      String string0 = token_Comment1.tokenType();
      assertEquals("Comment", string0);
      assertNotNull(string0);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_Comment1.type = token_TokenType0;
      String string1 = token_Comment1.getData();
      assertEquals("9", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      String string2 = token_EOF0.toString();
      assertEquals("", token_EOF0.toString());
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      Token.Tag token_Tag1 = token_StartTag0.reset();
      assertNotNull(token_Tag1);
      assertSame(token_StartTag0, token_Tag1);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag1, token_Tag0);
      assertSame(token_Tag1, token_StartTag0);
      
      boolean boolean0 = token_EOF0.isEOF();
      assertEquals("", token_EOF0.toString());
      assertTrue(boolean0);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertEquals(6, token_TokenTypeArray0.length);
      assertNotNull(token_TokenTypeArray0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[2] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      token_EndTag0.appendAttributeValue(charArray0);
      assertEquals(6, charArray0.length);
      assertSame(token_EndTag0, token_EndTag1);
      assertArrayEquals(new char[] {'K', 'K', 'K', '\u0000', 'K', 'K'}, charArray0);
      
      token_EndTag1.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      token_EndTag1.appendAttributeName("^h/$|V$2cfd\"?&[^");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = token_StartTag0.toStringName();
      assertEquals("[unset]", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.appendAttributeValue((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData(">");
      assertNotNull(token_CData0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Doctype;
      token_CData0.type = token_TokenType0;
      String string0 = token_CData0.tokenType();
      assertEquals("CData", string0);
      assertNotNull(string0);
      
      String string1 = token_CData0.getData();
      assertEquals(">", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      Token token0 = token_CData0.reset();
      assertNotNull(token0);
      assertSame(token_CData0, token0);
      assertSame(token0, token_CData0);
      
      token0.type = token_CData0.type;
      // Undeclared exception!
      try { 
        token_CData0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("W)");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("W)");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.asCharacter();
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData2, token_CData0);
      assertSame(token_CData2, token_CData1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = (Token.EndTag)token_EndTag1.name("[^x00-x1fx7f-x9f \"'/=]+");
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      token_EndTag2.appendAttributeValue("");
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_EndTag2.type = token_TokenType0;
      token_EndTag2.appendAttributeValue("");
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      Token.TokenType token_TokenType1 = Token.TokenType.EndTag;
      token_EndTag1.type = token_TokenType1;
      token_EndTag2.selfClosing = false;
      token_EndTag2.newAttribute();
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      String string0 = token_Character0.toString();
      assertNull(string0);
      
      // Undeclared exception!
      try { 
        token_Character0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.asComment();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      String string0 = "";
      Token.Comment token_Comment2 = token_Comment1.append("");
      assertNotNull(token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment2, token_Comment0);
      assertSame(token_Comment2, token_Comment1);
      
      // Undeclared exception!
      try { 
        token_Comment2.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertEquals(6, token_TokenTypeArray0.length);
      assertNotNull(token_TokenTypeArray0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      assertSame(token_Doctype0, token_Doctype1);
      
      Token.Doctype token_Doctype2 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertNotNull(token_Doctype2);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_Doctype2.type = token_TokenType0;
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      
      String string0 = token_Doctype2.tokenType();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype2.getSystemIdentifier());
      assertFalse(token_Doctype2.isForceQuirks());
      assertEquals("Doctype", string0);
      assertNotNull(string0);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype1);
      assertSame(token_Doctype2, token_Doctype0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendAttributeValue('b');
      String string1 = token_Doctype0.getPublicIdentifier();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_Doctype0, token_Doctype2);
      assertSame(token_Doctype0, token_Doctype1);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = token_StartTag1.isSelfClosing();
      assertFalse(boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean1 = token_StartTag1.hasAttribute("default");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = token_EndTag0.asEndTag();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.tagName = "R:.3YU4";
      // Undeclared exception!
      try { 
        token_EndTag1.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      String string0 = token_EOF0.tokenType();
      assertEquals("", token_EOF0.toString());
      assertEquals("EOF", string0);
      assertNotNull(string0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertEquals("", token_EOF0.toString());
      assertEquals("", token_EOF1.toString());
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      // Undeclared exception!
      try { 
        token_EOF1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 0;
      token_StartTag0.appendAttributeValue(intArray0);
      assertEquals(2, intArray0.length);
      assertArrayEquals(new int[] {5, 0}, intArray0);
      
      token_StartTag0.newAttribute();
      boolean boolean0 = token_StartTag0.isSelfClosing();
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        token_StartTag0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      Token.Character token_Character1 = new Token.Character();
      assertFalse(token_Character1.equals((Object)token_Character0));
      assertNotNull(token_Character1);
      
      Token.CData token_CData0 = new Token.CData("<");
      assertNotNull(token_CData0);
      
      boolean boolean0 = token_Character0.isStartTag();
      assertFalse(boolean0);
      assertFalse(token_Character0.equals((Object)token_Character1));
      assertNotSame(token_Character0, token_Character1);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      String string0 = token_Doctype0.toString();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("<!doctype >", string0);
      assertNotNull(string0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      String string1 = token_Doctype0.toString();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("<!doctype >", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      String string2 = token_Character1.tokenType();
      assertEquals("Character", string2);
      assertFalse(token_Character1.equals((Object)token_Character0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(token_Character1, token_Character0);
      
      token_Doctype0.type = token_TokenType0;
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      String string3 = token_Doctype0.tokenType();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("Doctype", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      
      String string4 = token_Doctype0.getPubSysKey();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNull(string4);
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      Token.TokenType token_TokenType1 = Token.TokenType.Comment;
      StringBuilder stringBuilder1 = token_Doctype0.publicIdentifier;
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      
      Token.reset(stringBuilder1);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotSame(stringBuilder1, stringBuilder0);
      
      token_Character0.type = token_TokenType1;
      // Undeclared exception!
      try { 
        token_Character1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendAttributeName("");
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.newAttribute();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Token.StartTag token_StartTag2 = token_StartTag1.asStartTag();
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag1);
      
      Token.StartTag token_StartTag3 = (Token.StartTag)token_StartTag2.reset();
      assertNotNull(token_StartTag3);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag3);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag2);
      assertSame(token_StartTag3, token_StartTag1);
      assertSame(token_StartTag3, token_StartTag0);
      
      String string0 = token_StartTag2.toStringName();
      assertEquals("[unset]", string0);
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag1, token_StartTag3);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag0);
      assertSame(token_StartTag2, token_StartTag3);
      assertSame(token_StartTag2, token_StartTag1);
      
      token_StartTag0.appendAttributeValue("[unset]");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag0, token_StartTag3);
      assertSame(token_StartTag0, token_StartTag2);
      
      // Undeclared exception!
      try { 
        token_StartTag0.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      boolean boolean0 = token_Character0.isEndTag();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("hidden");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName("hidden");
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.toString();
      assertEquals("</[unset]>", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('i');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData((String) null);
      assertNotNull(token_CData0);
      
      String string0 = token_CData0.toString();
      assertEquals("<![CDATA[null]]>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append('2');
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.Comment token_Comment2 = token_Comment1.append((String) null);
      assertNotNull(token_Comment2);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment2, token_Comment1);
      assertSame(token_Comment2, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment2.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = token_Doctype0.publicIdentifier;
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotNull(stringBuilder1);
      assertNotSame(stringBuilder1, stringBuilder0);
      
      Token.reset(stringBuilder1);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder1.toString());
      assertFalse(stringBuilder1.equals((Object)stringBuilder0));
      assertNotSame(stringBuilder1, stringBuilder0);
      
      String string0 = token_Doctype0.tokenType();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("Doctype", string0);
      assertNotNull(string0);
      
      boolean boolean0 = token_EOF0.isCData();
      assertEquals("", token_EOF0.toString());
      assertFalse(boolean0);
      
      String string1 = token_Doctype0.toString();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("<!doctype >", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean1 = token_EOF0.isCharacter();
      assertEquals("", token_EOF0.toString());
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "";
      Token.CData token_CData0 = new Token.CData("");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("R2pj%I~^p");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      // Undeclared exception!
      try { 
        token_CData1.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append('-');
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment1.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      Token.reset((StringBuilder) null);
      StringBuilder stringBuilder0 = token_Doctype0.name;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      assertSame(token_Doctype0, token_Doctype1);
      
      // Undeclared exception!
      try { 
        token_EOF0.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.reset((StringBuilder) null);
      Token token0 = token_Comment0.reset();
      assertNotNull(token0);
      assertSame(token_Comment0, token0);
      assertSame(token0, token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append("org.jsoup.parser.Token$Tag");
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token0);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token0);
      assertSame(token_Comment1, token_Comment0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.appendAttributeValue("org.jsoup.parser.Token$Tag");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag0.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag1);
      
      String string0 = token_StartTag0.toString();
      assertEquals("<[unset]>", string0);
      assertNotNull(string0);
      assertSame(token_StartTag0, token_StartTag1);
      
      String string1 = token_StartTag0.toString();
      assertEquals("<[unset]>", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_StartTag0, token_StartTag1);
      
      // Undeclared exception!
      try { 
        token_StartTag0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("O[;COZZJmZ?O`_");
      assertNotNull(token_CData0);
      
      Token.CData token_CData1 = (Token.CData)token_CData0.data("O[;COZZJmZ?O`_");
      assertNotNull(token_CData1);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData0);
      
      Token.CData token_CData2 = (Token.CData)token_CData1.reset();
      assertNotNull(token_CData2);
      assertSame(token_CData0, token_CData2);
      assertSame(token_CData0, token_CData1);
      assertSame(token_CData1, token_CData2);
      assertSame(token_CData1, token_CData0);
      assertSame(token_CData2, token_CData1);
      assertSame(token_CData2, token_CData0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_CData2.type = token_TokenType0;
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      StringBuilder stringBuilder0 = token_Doctype0.systemIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName('Q');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append("org.jsoup.parser.Token$EOF");
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.reset(stringBuilder0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", stringBuilder0.toString());
      
      token_EndTag1.normalName = "O[;COZZJmZ?O`_";
      Token.Comment token_Comment2 = token_Comment1.append('Q');
      assertNotNull(token_Comment2);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment2, token_Comment1);
      assertSame(token_Comment2, token_Comment0);
      
      String string0 = token_Comment2.toString();
      assertEquals("<!--org.jsoup.parser.Token$EOFQ-->", string0);
      assertNotNull(string0);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment2, token_Comment1);
      assertSame(token_Comment2, token_Comment0);
      
      token_EndTag1.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      // Undeclared exception!
      try { 
        token_CData0.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      // Undeclared exception!
      try { 
        token_EOF0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertFalse(token_Doctype1.isForceQuirks());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_Doctype1.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment0.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = token_StartTag0.toString();
      assertEquals("<[unset]>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token.CData token_CData0 = new Token.CData("allowfullscreen");
      assertNotNull(token_CData0);
      
      Token token0 = token_CData0.reset();
      assertNotNull(token0);
      assertSame(token_CData0, token0);
      assertSame(token0, token_CData0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append("");
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.Comment token_Comment2 = token_Comment1.append('}');
      assertNotNull(token_Comment2);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment0, token_Comment2);
      assertSame(token_Comment1, token_Comment2);
      assertSame(token_Comment1, token_Comment0);
      assertSame(token_Comment2, token_Comment1);
      assertSame(token_Comment2, token_Comment0);
      
      // Undeclared exception!
      try { 
        token_Comment2.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = token_Comment0.append("nYHNl-w'");
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.finaliseTag();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      String string0 = token_EOF0.tokenType();
      assertEquals("", token_EOF0.toString());
      assertEquals("EOF", string0);
      assertNotNull(string0);
      
      Token.EOF token_EOF1 = (Token.EOF)token_EOF0.reset();
      assertEquals("", token_EOF0.toString());
      assertEquals("", token_EOF1.toString());
      assertNotNull(token_EOF1);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      boolean boolean0 = token_EOF1.isStartTag();
      assertEquals("", token_EOF0.toString());
      assertEquals("", token_EOF1.toString());
      assertFalse(boolean0);
      assertSame(token_EOF0, token_EOF1);
      assertSame(token_EOF1, token_EOF0);
      
      Token.EOF token_EOF2 = new Token.EOF();
      assertEquals("", token_EOF2.toString());
      assertFalse(token_EOF2.equals((Object)token_EOF1));
      assertFalse(token_EOF2.equals((Object)token_EOF0));
      assertNotNull(token_EOF2);
      
      // Undeclared exception!
      try { 
        token_EOF2.asStartTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EOF cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.toString();
      assertEquals("</[unset]>", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('K');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.reset((StringBuilder) null);
      char[] charArray0 = new char[6];
      charArray0[1] = 'K';
      token_EndTag0.newAttribute();
      assertSame(token_EndTag0, token_EndTag1);
      
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      token_EndTag0.appendAttributeValue(charArray0);
      assertEquals(6, charArray0.length);
      assertSame(token_EndTag0, token_EndTag1);
      assertArrayEquals(new char[] {'\u0000', 'K', 'K', 'K', 'K', 'K'}, charArray0);
      
      token_EndTag0.appendAttributeValue("Q^0-hd-&au6j|X\"r");
      assertSame(token_EndTag0, token_EndTag1);
      
      token_EndTag1.finaliseTag();
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      assertNotNull(token_EndTag2);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
      assertSame(token_EndTag2, token_EndTag1);
      assertSame(token_EndTag2, token_EndTag0);
      
      boolean boolean0 = token_EndTag0.isEndTag();
      assertTrue(boolean0);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      
      String string1 = token_EndTag1.toString();
      assertEquals("</[unset]>", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_EndTag0, token_EndTag2);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      assertSame(token_EndTag1, token_EndTag2);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      String string0 = token_Doctype0.toString();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("<!doctype >", string0);
      assertNotNull(string0);
      
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Token.reset(stringBuilder0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("", stringBuilder0.toString());
      
      String string1 = token_Doctype0.toString();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals("<!doctype >", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      
      boolean boolean0 = token_Doctype0.isDoctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        token_Doctype0.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendAttributeName('+');
      String string0 = "]]>";
      token_EndTag0.finaliseTag();
      token_EndTag0.appendAttributeValue("]]>");
      int[] intArray0 = new int[0];
      token_EndTag0.appendAttributeValue(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      token_EndTag0.appendAttributeValue(intArray0);
      assertEquals(0, intArray0.length);
      assertArrayEquals(new int[] {}, intArray0);
      
      // Undeclared exception!
      try { 
        token_EndTag0.name();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      Token.Doctype token_Doctype1 = (Token.Doctype)token_Doctype0.reset();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(token_Doctype1.isForceQuirks());
      assertEquals("", token_Doctype1.getSystemIdentifier());
      assertNotNull(token_Doctype1);
      assertSame(token_Doctype0, token_Doctype1);
      assertSame(token_Doctype1, token_Doctype0);
      
      // Undeclared exception!
      try { 
        token_Doctype1.asComment();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.newAttribute();
      token_EndTag0.appendTagName('T');
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("_vG");
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendTagName('w');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      String string0 = token_EndTag1.name();
      assertEquals("_vGw", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag1.appendAttributeName('u');
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean0 = token_EndTag1.isComment();
      assertFalse(boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      token_EndTag0.appendAttributeValue('T');
      assertSame(token_EndTag0, token_EndTag1);
      
      boolean boolean1 = token_EndTag1.hasAttribute("GpE/");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      boolean boolean0 = token_Character0.isCData();
      assertFalse(boolean0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      assertNotNull(token_EndTag1);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      token_EndTag1.attributes = null;
      String string0 = token_EndTag1.toString();
      assertEquals("</[unset]>", string0);
      assertNotNull(string0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
      
      boolean boolean1 = token_EndTag1.isCharacter();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertSame(token_EndTag0, token_EndTag1);
      assertSame(token_EndTag1, token_EndTag0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      String string0 = "multiple";
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      token_EndTag0.appendAttributeName('(');
      Attributes attributes0 = token_EndTag0.attributes;
      assertNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("multiple", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      String string1 = token_StartTag1.toString();
      assertEquals("<multiple>", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      token_StartTag1.setEmptyAttributeValue();
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      int[] intArray0 = new int[4];
      intArray0[0] = 2345;
      token_StartTag1.appendAttributeValue("[w");
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      intArray0[1] = 1;
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.name("<multiple>");
      assertNotNull(token_StartTag2);
      assertSame(token_StartTag0, token_StartTag2);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertSame(token_StartTag1, token_StartTag2);
      assertSame(token_StartTag2, token_StartTag1);
      assertSame(token_StartTag2, token_StartTag0);
      
      token_EndTag0.tagName = ">0x3)xRH~{l~s";
      intArray0[2] = 1;
      intArray0[3] = (-1);
      // Undeclared exception!
      try { 
        token_StartTag1.appendAttributeValue(intArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      Token.Comment token_Comment1 = (Token.Comment)token_Comment0.reset();
      assertNotNull(token_Comment1);
      assertSame(token_Comment0, token_Comment1);
      assertSame(token_Comment1, token_Comment0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      Token.TokenType token_TokenType1 = Token.TokenType.EndTag;
      token_Comment1.type = token_TokenType1;
      token_Comment1.type = token_TokenType0;
      String string0 = token_Comment0.getData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(token_Comment0, token_Comment1);
      
      Token.TokenType[] token_TokenTypeArray0 = Token.TokenType.values();
      assertEquals(6, token_TokenTypeArray0.length);
      assertNotNull(token_TokenTypeArray0);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertEquals("", token_EOF0.toString());
      assertNotNull(token_EOF0);
      
      String string1 = token_Comment0.toString();
      assertEquals("<!---->", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(token_Comment0, token_Comment1);
      
      String string2 = token_EOF0.toString();
      assertEquals("", token_EOF0.toString());
      assertEquals("", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      
      // Undeclared exception!
      try { 
        token_Comment1.asEndTag();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Comment cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      token_Doctype0.forceQuirks = true;
      token_Doctype0.getName();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      StringBuilder stringBuilder0 = token_Doctype0.publicIdentifier;
      Token.reset(stringBuilder0);
      token_EndTag0.setEmptyAttributeValue();
      Token.reset(stringBuilder0);
      token_EndTag0.normalName = "";
      token_EndTag0.appendAttributeValue("=;[3/y{>w#{[*8d{");
      token_EndTag0.isStartTag();
      token_Doctype0.getPublicIdentifier();
      Token.CData token_CData0 = new Token.CData("novalidate");
      token_CData0.toString();
      Token.Comment token_Comment0 = new Token.Comment();
      token_Comment0.bogus = true;
      token_Comment0.reset();
      token_Comment0.toString();
      token_CData0.isEOF();
      Token.EOF token_EOF0 = new Token.EOF();
      token_EOF0.toString();
      Token.TokenType.values();
      // Undeclared exception!
      try { 
        Token.TokenType.valueOf("[^x00-x1fx7f-x9f \"'/=]+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.parser.Token.TokenType.[^x00-x1fx7f-x9f \"'/=]+
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Token.Character token_Character0 = new Token.Character();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.Comment token_Comment0 = new Token.Comment();
      Token.Comment token_Comment1 = token_Comment0.append("b<#Qc,Kyx nJ");
      token_Comment1.append("Oy.'M/[4");
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.name("");
      String string0 = null;
      token_Character0.data((String) null);
      token_EndTag1.appendAttributeName("Ova&l7nBk'yBZ");
      token_EndTag1.appendAttributeName("");
      token_Character0.reset();
      // Undeclared exception!
      try { 
        token_EndTag1.asDoctype();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$EndTag cannot be cast to org.jsoup.parser.Token$Doctype
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      token_EndTag1.appendAttributeName('K');
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[5] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[3] = 'K';
      token_EndTag0.appendAttributeValue(charArray0);
      token_EndTag0.appendAttributeValue("Q^0-hd-&auxj|X\"r");
      token_EndTag1.finaliseTag();
      Token.EndTag token_EndTag2 = token_EndTag1.asEndTag();
      token_EndTag0.isCharacter();
      token_EndTag1.isComment();
      token_EndTag2.appendAttributeName("Q^0-hd-&auxj|X\"r");
      token_EndTag2.newAttribute();
      token_EndTag0.tokenType();
      // Undeclared exception!
      try { 
        Token.TokenType.valueOf("c`Y`gmb()MJ9C{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.parser.Token.TokenType.c`Y`gmb()MJ9C{
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.EndTag token_EndTag1 = (Token.EndTag)token_EndTag0.reset();
      token_EndTag1.appendAttributeName('K');
      char[] charArray0 = new char[6];
      charArray0[0] = 'K';
      charArray0[1] = 'K';
      charArray0[5] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      charArray0[5] = 'K';
      token_EndTag0.appendAttributeValue(charArray0);
      token_EndTag0.appendAttributeValue("Q^0-hd-&auxj|X\"r");
      token_EndTag1.finaliseTag();
      token_EndTag1.asEndTag();
      boolean boolean0 = token_EndTag0.isCharacter();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Token.EndTag token_EndTag0 = new Token.EndTag();
      token_EndTag0.appendAttributeValue('f');
      token_EndTag0.appendTagName('T');
      String string0 = token_EndTag0.name();
      assertEquals("T", string0);
      
      boolean boolean0 = token_EndTag0.hasAttribute("T");
      assertFalse(boolean0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      String string1 = token_StartTag0.toString();
      assertEquals("<[unset]>", string1);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_Doctype0.type = token_TokenType0;
      token_Doctype0.getSystemIdentifier();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.reset();
      Token.StartTag token_StartTag2 = (Token.StartTag)token_StartTag1.name("noresize");
      Token.Comment token_Comment0 = new Token.Comment();
      token_StartTag2.appendTagName('');
      token_StartTag1.appendTagName('o');
      token_Comment0.append('v');
      // Undeclared exception!
      try { 
        token_StartTag2.asCharacter();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Character
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }
}
