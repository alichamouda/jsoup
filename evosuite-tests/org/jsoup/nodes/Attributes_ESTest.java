/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:06:11 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.parser.ParseSettings;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add((String) null, (String) null);
      // Undeclared exception!
      try { 
        attributes0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("-m2'|E[=.zJAr2a0Hl(", "-m2'|E[=.zJAr2a0Hl(");
      Attributes attributes1 = attributes0.put("u}cD$\\xn#", "-m2'|E[=.zJAr2a0Hl(");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      int int0 = attributes1.deduplicate(parseSettings0);
      assertEquals(2, attributes0.size());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("-m2'|E[=.zJAr2a0Hl(", "-m2'|E[=.zJAr2a0Hl(");
      Attributes attributes1 = attributes0.put("u}cD$\\xn#", "-m2'|E[=.zJAr2a0Hl(");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      int int0 = attributes1.deduplicate(parseSettings0);
      assertFalse(attributes0.isEmpty());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(")FjUg\"Ajk", ")FjUg\"Ajk");
      attributes0.normalize();
      attributes1.put(")FjUg\"Ajk", "Qz]`IgI!a/L#\"");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      int int0 = attributes0.deduplicate(parseSettings0);
      assertEquals(1, attributes0.size());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("zCq\"n", "zCq\"n");
      attributes1.add("zCq\"n", ",b'{w>L[V6}7");
      Attributes attributes2 = attributes0.clone();
      boolean boolean0 = attributes0.equals(attributes2);
      assertFalse(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Unexpected character '%s' in input state [%s]", true);
      Attributes attributes2 = attributes1.clone();
      boolean boolean0 = attributes0.equals(attributes2);
      assertFalse(attributes0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(")FjUg\"Ajk", ")FjUg\"Ajk");
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.add(")FjUg\"Ajk", ")FjUg\"Ajk");
      Attributes attributes4 = attributes3.put(")FjUg\"Ajk", true);
      attributes1.add(":.diFGRelK;(u>`#", "listing");
      boolean boolean0 = attributes4.equals(attributes1);
      assertEquals(2, attributes2.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put(")FjUg\"Ajk", true);
      attributes0.add(":.diFGRelK;(u>`#", "listing");
      boolean boolean0 = attributes2.equals(attributes0);
      assertFalse(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.add("zfbPk$", "RLkrVw5<VxvT");
      boolean boolean0 = attributes0.equals(attributes2);
      assertEquals(1, attributes1.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      boolean boolean0 = attributes0.equals(document_OutputSettings_Syntax0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.equals(attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("      ", "      ");
      String string0 = attributes1.toString();
      assertEquals(1, attributes0.size());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("/k", "/k");
      attributes0.toString();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("|lg)#:t", true);
      attributes0.toString();
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("/#J(%g!WgPtW", "T@IDNZc*1| q)c&");
      attributes0.asList();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("2054s@>gnd", "2054s@>gnd");
      List<Attribute> list0 = attributes1.asList();
      assertEquals(1, attributes0.size());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("rg.jsoup.nodes.Attributes$Dataset$DatasetItrator", "rg.jsoup.nodes.Attributes$Dataset$DatasetItrator");
      Attributes attributes1 = new Attributes();
      attributes1.addAll(attributes0);
      assertFalse(attributes1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.addAll(attributes0);
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      int int0 = attributes0.deduplicate(parseSettings0);
      assertEquals(0, int0);
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("{gJ8!v}7F6j?@\"r", "{gJ8!v}7F6j?@\"r");
      boolean boolean0 = attributes1.hasDeclaredValueForKeyIgnoreCase("{gJ8!v}7F6j?@\"r");
      assertFalse(attributes0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("|lg)#:t", true);
      boolean boolean0 = attributes1.hasDeclaredValueForKeyIgnoreCase("|lg)#:t");
      assertFalse(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasDeclaredValueForKeyIgnoreCase("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("z>qbF=&\"n", "z>qbF=&\"n");
      boolean boolean0 = attributes1.hasDeclaredValueForKey("z>qbF=&\"n");
      assertFalse(attributes0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("jHz|bEvz7qJjKkto", true);
      boolean boolean0 = attributes0.hasDeclaredValueForKey("jHz|bEvz7qJjKkto");
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasDeclaredValueForKey("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("YTY~j7", "YTY~j7");
      boolean boolean0 = attributes1.hasKeyIgnoreCase("YTY~j7");
      assertFalse(attributes0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKeyIgnoreCase("org.jsoup.nod]Z.Attributes");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("org.jsoup.nodes.Attribues$Dataset", "org.jsoup.nodes.Attribues$Dataset");
      boolean boolean0 = attributes0.hasKey("org.jsoup.nodes.Attribues$Dataset");
      assertFalse(attributes0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      boolean boolean0 = attributes0.hasKey("org.jsoup.nodes.Attribues$Dataset");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.removeIgnoreCase(":9RK");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("V59Qb/z9.{B=[eV9`LK", "V59Qb/z9.{B=[eV9`LK");
      Attributes attributes1 = attributes0.put("f&h99^l/ev5", "f&h99^l/ev5");
      attributes1.remove("V59Qb/z9.{B=[eV9`LK");
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attribute attribute0 = new Attribute("+rmCt", "u}cD$\\xn#", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "+rmCt";
      stringArray0[1] = "+rmCt";
      attributes1.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes0.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add(":9RK", ":9RK");
      assertFalse(attributes0.isEmpty());
      
      attributes1.removeIgnoreCase(":9RK");
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("zp'\b'}?M{*", false);
      assertTrue(attributes1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("T.[Fxt>q ]", true);
      attributes0.normalize();
      attributes0.putIgnoreCase("T.[Fxt>q ]", "T.[Fxt>q ]");
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.getIgnoreCase(")fjug\"aj1");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("z>qbFG=&\"n", "z>qbFG=&\"n");
      String string0 = attributes1.getIgnoreCase("z>qbFG=&\"n");
      assertEquals(1, attributes0.size());
      assertEquals("z>qbFG=&\"n", string0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = attributes0.get("org.jsoup.nodes.Attributes$Dataset");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("   ", ".gz");
      String string0 = attributes1.get("   ");
      assertEquals(1, attributes0.size());
      assertEquals(".gz", string0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = Attributes.checkNotNull((String) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put(">qb=&8n", ">qb=&8n");
      attributes0.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      assertFalse(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("0f^0>rVa", "data-");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.add("#J(%g!WgPtW", "#J(%g!WgPtW");
      Attributes attributes2 = attributes0.clone();
      attributes2.addAll(attributes0);
      assertFalse(attributes0.isEmpty());
      assertTrue(attributes0.equals((Object)attributes2));
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("-m2'|E[=.zJAr2a0Hl(", "-m2'|E[=.zJAr2a0Hl(");
      Attributes attributes2 = attributes0.put("u}cD$\\xn#", "-m2'|E[=.zJAr2a0Hl(");
      attributes1.addAll(attributes2);
      assertFalse(attributes0.isEmpty());
      assertEquals(2, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hashCode();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = Attributes.internalKey("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      assertEquals("/org.jsoup.nodes.Attributes$Dataset$EntrySet", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Map<String, String> map0 = attributes0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("/#J(%g!WgPtW", true);
      attributes0.addAll(attributes1);
      assertEquals(1, attributes0.size());
  }
}
