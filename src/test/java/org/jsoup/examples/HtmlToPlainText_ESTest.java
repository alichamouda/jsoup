/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:21:19 GMT 2022
 */

package org.jsoup.examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.examples.HtmlToPlainText;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class HtmlToPlainText_ESTest extends HtmlToPlainText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "";
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("K", (String) null).when(element0).nodeName();
      doReturn(node0, (Node) null).when(element0).nextSibling();
      doReturn((Node) null).when(element0).parentNode();
      htmlToPlainText0.getPlainText(element0);
      Element element1 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(element1).nodeName();
      doReturn((Node) null).when(element1).nextSibling();
      doReturn((Node) null).when(element1).parentNode();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      // Undeclared exception!
      try { 
        HtmlToPlainText.main((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.examples.HtmlToPlainText", e);
      }
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-1431655763)).when(element0).childNodeSize();
      doReturn("dt", "dt").when(element0).nodeName();
      doReturn((Node) null, (Node) null).when(element0).nextSibling();
      doReturn((Node) null).when(element0).parentNode();
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("  \n", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(element0).childNodeSize();
      doReturn("p", (String) null).when(element0).nodeName();
      doReturn((Node) null, (Node) null).when(element0).nextSibling();
      doReturn((Node) null).when(element0).parentNode();
      // Undeclared exception!
      try { 
        htmlToPlainText0.getPlainText(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Node node0 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node1 = mock(Node.class, new ViolatedAssumptionAnswer());
      Node node2 = mock(Node.class, new ViolatedAssumptionAnswer());
      doReturn((-3393)).when(node2).childNodeSize();
      Element element0 = mock(Element.class, new ViolatedAssumptionAnswer());
      doReturn((-3460)).when(element0).childNodeSize();
      doReturn("li", "a").when(element0).nodeName();
      doReturn((String) null).when(element0).absUrl(anyString());
      doReturn(true).when(element0).hasParent();
      doReturn(node0, node1).when(element0).nextSibling();
      doReturn(node2).when(element0).parentNode();
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("\n *  <null>", string0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[3];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
