/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:42:07 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Safelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Safelist_ESTest extends Safelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("X");
      Object object0 = new Object();
      boolean boolean0 = safelist_AttributeValue0.equals(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = Safelist.Protocol.valueOf("option[selected]");
      boolean boolean0 = safelist_Protocol0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = Safelist.Protocol.valueOf("opt;on[selected]");
      boolean boolean0 = safelist_Protocol0.equals(safelist_Protocol0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Attributes attributes0 = safelist0.getEnforcedAttributes("Rawtext");
      assertTrue(attributes0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Attribute attribute0 = new Attribute("a", "a");
      boolean boolean0 = safelist0.isSafeAttribute("a", (Element) null, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      safelist0.addEnforcedAttribute(")H2`9NJ1rD/_Q", ")H2`9NJ1rD/_Q", "?4&K\"9f+EDcS<a+k5$@");
      Attribute attribute0 = new Attribute(")H2`9NJ1rD/_Q", ")H2`9NJ1rD/_Q");
      boolean boolean0 = safelist0.isSafeAttribute(")H2`9NJ1rD/_Q", (Element) null, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Attribute attribute0 = Attribute.createFromEncoded("height", "height");
      Document document0 = new Document("img");
      boolean boolean0 = safelist0.isSafeAttribute("img", document0, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "code";
      stringArray0[1] = "code";
      stringArray0[2] = "code";
      stringArray0[3] = "code";
      stringArray0[4] = "code";
      stringArray0[5] = "code";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "code";
      safelist0.addAttributes("code", stringArray0);
      Attribute attribute0 = Attribute.createFromEncoded("code", "code");
      boolean boolean0 = safelist0.isSafeAttribute("code", (Element) null, attribute0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      boolean boolean0 = safelist0.isSafeTag("code");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      boolean boolean0 = safelist0.isSafeTag("Cannot remove a protocol that is not set.");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SKIP_ENTIRELY";
      Safelist safelist1 = safelist0.addProtocols("SKIP_ENTIRELY", "SKIP_ENTIRELY", stringArray0);
      safelist1.addProtocols("SKIP_ENTIRELY", "Nh;)68yDc", stringArray0);
      Safelist safelist2 = safelist0.removeProtocols("SKIP_ENTIRELY", "SKIP_ENTIRELY", stringArray0);
      assertSame(safelist2, safelist0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "src";
      stringArray0[1] = "d";
      stringArray0[2] = "1[(6 L%E\"@";
      stringArray0[3] = "1[(6 L%E\"@";
      stringArray0[4] = "1[(6 L%E\"@";
      stringArray0[5] = "d";
      stringArray0[6] = "d";
      Safelist safelist1 = safelist0.addProtocols("d", "d", stringArray0);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "d";
      stringArray1[1] = "d";
      stringArray1[2] = "         ";
      stringArray1[3] = "d";
      stringArray1[4] = "1[(6 L%E\"@";
      stringArray1[5] = "d";
      stringArray1[6] = "d";
      Safelist safelist2 = safelist1.removeProtocols("d", "d", stringArray1);
      assertSame(safelist2, safelist1);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "SKIP_ENTIRELY";
      safelist0.addProtocols("SKIP_ENTIRELY", "SKIP_ENTIRELY", stringArray0);
      Safelist safelist1 = safelist0.removeProtocols("SKIP_ENTIRELY", "SKIP_ENTIRELY", stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("blockquote", "code", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("u", "u", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "X";
      stringArray0[1] = "X";
      stringArray0[2] = "]&/lCHq58hR^!c%";
      stringArray0[3] = "X";
      stringArray0[4] = "X";
      stringArray0[5] = "X";
      stringArray0[6] = "X";
      stringArray0[7] = "X";
      Safelist safelist1 = safelist0.addProtocols("X", "X", stringArray0);
      Safelist safelist2 = safelist1.addProtocols("X", "X", stringArray0);
      assertSame(safelist0, safelist2);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("a", "SKIP_CHILDREN");
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("div", "div");
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      safelist0.addEnforcedAttribute("heiNght", "heiNght", "heiNght");
      Safelist safelist1 = safelist0.removeEnforcedAttribute("heiNght", "heiNght");
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      Safelist safelist1 = safelist0.removeEnforcedAttribute("SKIP_ENTIRELY", ":all");
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = safelist0.addEnforcedAttribute("a", "a", "cte");
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rgso.prsxFTve-reSt'";
      safelist0.addAttributes("rgso.prsxFTve-reSt'", stringArray0);
      Safelist safelist1 = safelist0.removeAttributes("rgso.prsxFTve-reSt'", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "code";
      Safelist safelist1 = safelist0.removeAttributes("code", stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "td";
      Safelist safelist1 = safelist0.removeAttributes("td", stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ":all";
      Safelist safelist1 = safelist0.removeAttributes(":all", stringArray0);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "a";
      stringArray0[1] = "div";
      Safelist safelist1 = safelist0.addAttributes("a", stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "code";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Attribute attribute0 = new Attribute("src", "src");
      Document document0 = Parser.parse("src", "img");
      safelist0.isSafeAttribute("img", document0, attribute0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "rgso.prsxFTve-reStt";
      Safelist safelist1 = safelist0.removeTags(stringArray0);
      assertSame(safelist1, safelist0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Safelist safelist0 = null;
      try {
        safelist0 = new Safelist((Safelist) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      safelist0.preserveRelativeLinks(true);
      Attribute attribute0 = new Attribute("src", "1[(6 L%E\"@");
      Tag tag0 = Tag.valueOf("1[(6 L%E\"@");
      Element element0 = new Element(tag0, "src");
      boolean boolean0 = safelist0.isSafeAttribute("img", element0, attribute0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.addAttributes("v(6 L%E\"@", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("Request not made", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
