/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:20:09 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PrintWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.util.IllegalFormatConversionException;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.Consumer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.LeafNode;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Comment_ESTest extends Comment_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("%#");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      comment0.value = (Object) "%#";
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.setData("%#");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      comment0.reparentChild(comment0);
      assertSame(comment0, comment1);
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("'");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      
      Comment comment2 = comment1.setData("'");
      assertNotNull(comment2);
      assertNotSame(comment0, comment2);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertNotSame(comment2, comment0);
      assertSame(comment2, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      
      File file0 = MockFile.createTempFile("V@4@j_", "'");
      assertNotNull(file0);
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      comment2.value = (Object) mockFileWriter0;
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canRead());
      assertTrue(file0.exists());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      
      // Undeclared exception!
      try { 
        comment2.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.io.MockFileWriter cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("T");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      comment0.setBaseUri("B");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      comment0.siblingIndex = 1719;
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      
      Comment comment1 = comment0.setData("T");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(1719, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      Comment comment2 = comment1.setData("h]+55/fj}ztBL\"DYK");
      assertNotNull(comment2);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertSame(comment2, comment0);
      assertSame(comment2, comment1);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(1719, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(1719, comment2.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      
      Node node0 = comment2.nextSibling();
      assertNull(node0);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertSame(comment2, comment0);
      assertSame(comment2, comment1);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(1719, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(1719, comment2.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      
      Comment comment3 = comment0.setData("T");
      assertNotNull(comment3);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment3, comment0);
      assertSame(comment3, comment1);
      assertSame(comment3, comment2);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(1719, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      assertEquals("#comment", comment3.nodeName());
      
      comment3.coreValue("T");
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment3, comment0);
      assertSame(comment3, comment1);
      assertSame(comment3, comment2);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(1719, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      assertEquals("#comment", comment3.nodeName());
      
      List<Node> list0 = comment3.childNodesCopy();
      assertNotNull(list0);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment3, comment0);
      assertSame(comment3, comment1);
      assertSame(comment3, comment2);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(1719, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      assertEquals("#comment", comment3.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      String string0 = comment0.toString();
      assertNotNull(string0);
      assertEquals("<!--T-->", string0);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      
      Comment comment4 = comment0.clone();
      assertNotNull(comment4);
      assertSame(comment0, comment3);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertNotSame(comment4, comment1);
      assertNotSame(comment4, comment2);
      assertNotSame(comment4, comment0);
      assertNotSame(comment4, comment3);
      assertFalse(comment4.equals((Object)comment1));
      assertFalse(comment4.equals((Object)comment2));
      assertFalse(comment4.equals((Object)comment0));
      assertFalse(comment4.equals((Object)comment3));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      assertEquals(0, comment4.siblingIndex());
      assertEquals("#comment", comment4.nodeName());
      assertFalse(comment4.hasParent());
      
      String string1 = comment0.toString();
      assertNotNull(string1);
      assertEquals("<!--T-->", string1);
      assertSame(comment0, comment3);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertFalse(comment0.equals((Object)comment4));
      assertTrue(string1.equals((Object)string0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(1719, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment4.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Comment comment0 = new Comment("%#");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      comment0.value = (Object) "%#";
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Comment comment1 = (Comment)comment0.wrap("%#");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      
      comment1.reparentChild(comment0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      
      // Undeclared exception!
      try { 
        comment1.asXmlDeclaration();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Comment comment0 = new Comment("-->");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-->");
      assertFalse(boolean0);
      
      List<Node> list0 = comment0.childNodesCopy();
      assertNotNull(list0);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      int int0 = (-542);
      Node node0 = comment1.clearAttributes();
      assertNotNull(node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, node0);
      assertNotSame(comment1, comment0);
      assertSame(comment1, node0);
      assertSame(node0, comment1);
      assertNotSame(node0, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node0.equals((Object)comment0));
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals("#comment", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      
      comment1.setSiblingIndex((-542));
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, node0);
      assertNotSame(comment1, comment0);
      assertSame(comment1, node0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals((-542), comment1.siblingIndex());
      
      Comment comment2 = comment1.setData("yDzNa@hZp");
      assertNotNull(comment2);
      assertNotSame(comment0, comment2);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, node0);
      assertNotSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertSame(comment1, node0);
      assertSame(comment2, comment1);
      assertSame(comment2, node0);
      assertNotSame(comment2, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals((-542), comment1.siblingIndex());
      assertEquals((-542), comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      assertFalse(comment2.hasParent());
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(pipedOutputStream0);
      assertNotNull(filterOutputStream0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      assertNotNull(mockPrintWriter0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) comment0;
      objectArray0[1] = (Object) node0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockPrintWriter0;
      objectArray0[4] = (Object) node0;
      objectArray0[5] = (Object) pipedOutputStream0;
      objectArray0[6] = (Object) "?%s{io=%d/%d,kio=%d,kro=%d}";
      objectArray0[7] = (Object) "-->";
      objectArray0[8] = (Object) comment1;
      // Undeclared exception!
      try { 
        mockPrintWriter0.format((Locale) null, "?%s{io=%d/%d,kio=%d,kro=%d}", objectArray0);
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // d != org.jsoup.nodes.Comment
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("9Q^YTY~ZP_9RUv\"AM");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string0 = "?ug: no template insertion mode on stack";
      Comment comment1 = comment0.setData("?ug: no template insertion mode on stack");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      
      Comment comment2 = comment1.setData("?ug: no template insertion mode on stack");
      assertNotNull(comment2);
      assertSame(comment0, comment2);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertSame(comment2, comment1);
      assertSame(comment2, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      
      Comment comment3 = comment2.setData("?ug: no template insertion mode on stack");
      assertNotNull(comment3);
      assertSame(comment0, comment2);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertSame(comment1, comment3);
      assertSame(comment1, comment2);
      assertSame(comment2, comment1);
      assertSame(comment2, comment3);
      assertSame(comment2, comment0);
      assertSame(comment3, comment2);
      assertSame(comment3, comment1);
      assertSame(comment3, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment3.nodeName());
      assertEquals(0, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      
      Comment comment4 = comment1.clone();
      assertNotNull(comment4);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertSame(comment1, comment3);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment4);
      assertNotSame(comment4, comment1);
      assertNotSame(comment4, comment3);
      assertNotSame(comment4, comment0);
      assertNotSame(comment4, comment2);
      assertFalse(comment4.equals((Object)comment1));
      assertFalse(comment4.equals((Object)comment3));
      assertFalse(comment4.equals((Object)comment0));
      assertFalse(comment4.equals((Object)comment2));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals("#comment", comment4.nodeName());
      assertEquals(0, comment4.siblingIndex());
      assertFalse(comment4.hasParent());
      
      comment4.siblingIndex = 96;
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals("#comment", comment4.nodeName());
      assertEquals(96, comment4.siblingIndex());
      assertFalse(comment4.hasParent());
      
      Node node0 = comment4.previousSibling();
      assertNull(node0);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertSame(comment1, comment3);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment4);
      assertNotSame(comment4, comment1);
      assertNotSame(comment4, comment3);
      assertNotSame(comment4, comment0);
      assertNotSame(comment4, comment2);
      assertFalse(comment0.equals((Object)comment4));
      assertFalse(comment1.equals((Object)comment4));
      assertFalse(comment4.equals((Object)comment1));
      assertFalse(comment4.equals((Object)comment3));
      assertFalse(comment4.equals((Object)comment0));
      assertFalse(comment4.equals((Object)comment2));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals("#comment", comment4.nodeName());
      assertEquals(96, comment4.siblingIndex());
      assertFalse(comment4.hasParent());
      
      Comment comment5 = comment3.clone();
      assertNotNull(comment5);
      assertNotSame(comment0, comment5);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(comment1, comment5);
      assertSame(comment1, comment3);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment4);
      assertSame(comment2, comment1);
      assertNotSame(comment2, comment5);
      assertSame(comment2, comment3);
      assertSame(comment2, comment0);
      assertNotSame(comment2, comment4);
      assertNotSame(comment3, comment5);
      assertSame(comment3, comment2);
      assertNotSame(comment3, comment4);
      assertSame(comment3, comment1);
      assertSame(comment3, comment0);
      assertNotSame(comment5, comment0);
      assertNotSame(comment5, comment1);
      assertNotSame(comment5, comment2);
      assertNotSame(comment5, comment4);
      assertNotSame(comment5, comment3);
      assertFalse(comment0.equals((Object)comment4));
      assertFalse(comment1.equals((Object)comment4));
      assertFalse(comment2.equals((Object)comment4));
      assertFalse(comment3.equals((Object)comment4));
      assertFalse(comment5.equals((Object)comment0));
      assertFalse(comment5.equals((Object)comment1));
      assertFalse(comment5.equals((Object)comment2));
      assertFalse(comment5.equals((Object)comment4));
      assertFalse(comment5.equals((Object)comment3));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment3.nodeName());
      assertEquals(0, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      assertEquals(0, comment5.siblingIndex());
      assertEquals("#comment", comment5.nodeName());
      assertFalse(comment5.hasParent());
      
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertNotSame(comment0, comment5);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment3);
      assertSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment5));
      assertFalse(comment0.equals((Object)comment4));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      StringBuilder stringBuilder0 = new StringBuilder(1);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) "?ug: no template insertion mode on stack");
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      assertEquals("?ug: no template insertion mode on stack", stringBuilder0.toString());
      assertEquals("?ug: no template insertion mode on stack", stringBuilder1.toString());
      
      StringBuilder stringBuilder2 = stringBuilder1.append((double) 96);
      assertNotNull(stringBuilder2);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder0);
      assertSame(stringBuilder2, stringBuilder1);
      assertEquals("?ug: no template insertion mode on stack96.0", stringBuilder0.toString());
      assertEquals("?ug: no template insertion mode on stack96.0", stringBuilder1.toString());
      assertEquals("?ug: no template insertion mode on stack96.0", stringBuilder2.toString());
      
      // Undeclared exception!
      try { 
        stringBuilder2.insert(96, "?ug: no template insertion mode on stack");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 96
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("-->");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      comment0.siblingIndex = 142;
      assertEquals(142, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string0 = comment0.toString();
      assertNotNull(string0);
      assertEquals("<!---->-->", string0);
      assertEquals(142, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string1 = comment0.toString();
      assertNotNull(string1);
      assertEquals("<!---->-->", string1);
      assertTrue(string1.equals((Object)string0));
      assertEquals(142, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Appendable appendable0 = null;
      int int0 = (-1909);
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Set<String> set0 = document0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      comment0.value = (Object) document1;
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      comment0.setParentNode(document0);
      assertSame(document0, document1);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Document cannot be cast to java.lang.String
         //
         verifyException("org.jsoup.nodes.LeafNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = null;
      Comment comment0 = new Comment((String) null);
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      
      Comment comment2 = comment0.setData((String) null);
      assertNotNull(comment2);
      assertNotSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      
      List<Node> list0 = comment2.siblingNodes();
      assertNotNull(list0);
      assertNotSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      String string1 = comment2.nodeName();
      assertNotNull(string1);
      assertEquals("#comment", string1);
      assertNotSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      
      // Undeclared exception!
      try { 
        comment2.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Node node0 = comment1.forEachNode(consumer0);
      assertNotNull(node0);
      assertNotSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertSame(comment1, node0);
      assertNotSame(comment1, comment0);
      assertSame(node0, comment1);
      assertNotSame(node0, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node0.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      assertFalse(node0.hasParent());
      
      Node[] nodeArray0 = comment0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      assertNotSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment2 = comment1.setData("");
      assertNotNull(comment2);
      assertNotSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, node0);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment2, comment0);
      assertSame(comment2, node0);
      assertSame(comment2, comment1);
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      
      boolean boolean0 = comment2.isXmlDeclaration();
      assertFalse(boolean0);
      assertNotSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, node0);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment2, comment0);
      assertSame(comment2, node0);
      assertSame(comment2, comment1);
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      
      comment0.parentNode = node0;
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      assertFalse(node0.hasParent());
      assertFalse(comment0.parentNode.hasParent());
      assertEquals(0, comment0.parentNode.siblingIndex());
      
      String string0 = comment2.nodeName();
      assertNotNull(string0);
      assertEquals("#comment", string0);
      assertNotSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, node0);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment2, comment0);
      assertSame(comment2, node0);
      assertSame(comment2, comment1);
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      
      String string1 = comment2.nodeName();
      assertNotNull(string1);
      assertEquals("#comment", string1);
      assertNotSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, node0);
      assertSame(comment1, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment2, comment0);
      assertSame(comment2, node0);
      assertSame(comment2, comment1);
      assertFalse(comment0.equals((Object)node0));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "", 0, 0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      
      int int0 = 1;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertNotNull(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(0);
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(0, charBuffer1.limit());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasArray());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(0, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(0, charBuffer1.capacity());
      assertEquals("", charBuffer1.toString());
      assertFalse(charBuffer1.hasRemaining());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(30, document_OutputSettings3.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.prettyPrint(false);
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(30, document_OutputSettings4.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(30, document_OutputSettings4.maxPaddingWidth());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(30, document_OutputSettings5.maxPaddingWidth());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.outline());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings5.clone();
      assertNotNull(document_OutputSettings6);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings6);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings6);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings6);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings3);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertNotSame(document_OutputSettings6, document_OutputSettings2);
      assertNotSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings5);
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings5));
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(30, document_OutputSettings4.maxPaddingWidth());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertEquals(30, document_OutputSettings5.maxPaddingWidth());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings5.outline());
      assertFalse(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings6.escapeMode());
      assertEquals(1, document_OutputSettings6.indentAmount());
      assertEquals(30, document_OutputSettings6.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings6.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      
      // Undeclared exception!
      try { 
        comment2.outerHtmlHead(charBuffer0, 1, document_OutputSettings5);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("<c->(fa0yDA");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertNotNull(stringBuffer0);
      assertEquals(0, stringBuffer0.length());
      assertEquals("", stringBuffer0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(110371416);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(110371416, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(110371416, document_OutputSettings1.maxPaddingWidth());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(110371416, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(110371416, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(110371416, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(110371416, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(110371416, document_OutputSettings3.maxPaddingWidth());
      assertEquals(1, document_OutputSettings3.indentAmount());
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.encoder();
      assertNotNull(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(110371416, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(110371416, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(110371416, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(110371416, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(110371416, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(110371416, document_OutputSettings3.maxPaddingWidth());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(110371416, document_OutputSettings4.maxPaddingWidth());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      
      comment0.outerHtmlHead(stringBuffer0, 0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("<!--<c->(fa0yDA-->", stringBuffer0.toString());
      assertEquals(18, stringBuffer0.length());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(110371416, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(110371416, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(110371416, document_OutputSettings2.maxPaddingWidth());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(110371416, document_OutputSettings3.maxPaddingWidth());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(110371416, document_OutputSettings4.maxPaddingWidth());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings4.prettyPrint());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      boolean boolean1 = comment0.isXmlDeclaration();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("\r\n");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = comment0.filter(nodeFilter0);
      assertNotNull(node0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      
      comment0.reparentChild(node0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      assertTrue(node0.hasParent());
      
      String string0 = comment0.nodeName();
      assertNotNull(string0);
      assertEquals("#comment", string0);
      assertSame(comment0, node0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      
      // Undeclared exception!
      comment0.toString();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Node node0 = comment0.previousSibling();
      assertNull(node0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      int int0 = comment0.attributesSize();
      assertEquals(0, int0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string0 = comment0.getData();
      assertNull(string0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string1 = comment0.toString();
      assertNotNull(string1);
      assertEquals("<!--null-->", string1);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Node[] nodeArray0 = comment0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Node node1 = comment0.previousSibling();
      assertNull(node1);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string2 = comment0.coreValue();
      assertNull(string2);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string3 = "~1J)`-cz5$p+^6^;m";
      String string4 = comment0.toString();
      assertNotNull(string4);
      assertEquals("<!--null-->", string4);
      assertTrue(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        comment0.isXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Comment comment0 = new Comment((String) null);
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string0 = comment0.getData();
      assertNull(string0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "j:C-wlx|#k/w7-/LhC?";
      Comment comment0 = new Comment("j:C-wlx|#k/w7-/LhC?");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      
      LeafNode leafNode0 = comment1.doClone(comment0);
      assertNotNull(leafNode0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, leafNode0);
      assertNotSame(comment1, leafNode0);
      assertNotSame(comment1, comment0);
      assertNotSame(leafNode0, comment1);
      assertNotSame(leafNode0, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(leafNode0.equals((Object)comment1));
      assertFalse(leafNode0.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertTrue(leafNode0.hasParent());
      assertEquals(0, leafNode0.siblingIndex());
      assertEquals("#comment", leafNode0.nodeName());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('|');
      assertNotNull(charArrayWriter1);
      assertSame(charArrayWriter0, charArrayWriter1);
      assertSame(charArrayWriter1, charArrayWriter0);
      assertEquals("|", charArrayWriter0.toString());
      assertEquals(1, charArrayWriter0.size());
      assertEquals("|", charArrayWriter1.toString());
      assertEquals(1, charArrayWriter1.size());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(0, document_OutputSettings2.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(0, document_OutputSettings3.maxPaddingWidth());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      
      // Undeclared exception!
      try { 
        comment1.outerHtmlHead(mockPrintWriter0, (-1850), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "p~=(os9rIA%9wtf}<";
      Comment comment0 = new Comment("p~=(os9rIA%9wtf}<");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Node node0 = comment0.wrap("p~=(os9rIA%9wtf}<");
      assertNotNull(node0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertTrue(node0.hasParent());
      assertEquals("#comment", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      
      LeafNode leafNode0 = comment0.doClone(node0);
      assertNotNull(leafNode0);
      assertNotSame(comment0, leafNode0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertNotSame(node0, leafNode0);
      assertNotSame(leafNode0, node0);
      assertNotSame(leafNode0, comment0);
      assertFalse(leafNode0.equals((Object)node0));
      assertFalse(leafNode0.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertTrue(node0.hasParent());
      assertEquals("#comment", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, leafNode0.siblingIndex());
      assertEquals("#comment", leafNode0.nodeName());
      assertTrue(leafNode0.hasParent());
      
      comment0.parentNode = (Node) leafNode0;
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment0.hasParent());
      assertTrue(node0.hasParent());
      assertEquals("#comment", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, leafNode0.siblingIndex());
      assertEquals("#comment", leafNode0.nodeName());
      assertTrue(leafNode0.hasParent());
      assertTrue(comment0.parentNode.hasParent());
      assertEquals(0, comment0.parentNode.siblingIndex());
      
      // Undeclared exception!
      comment0.clone();
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      Node node0 = comment0.previousSibling();
      assertNull(node0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("<!--", false);
      assertNotNull(mockFileWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      comment1.outerHtmlHead(mockFileWriter0, 1, document_OutputSettings0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      String string0 = comment1.toString();
      assertNotNull(string0);
      assertEquals("<!--<!---->", string0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = "";
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      boolean boolean0 = comment0.hasSameValue((Object) null);
      assertFalse(boolean0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      comment0.nodelistChanged();
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string1 = comment0.nodeName();
      assertNotNull(string1);
      assertEquals("#comment", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = comment0.traverse(nodeVisitor0);
      assertNotNull(node0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(node0.hasParent());
      assertEquals("#comment", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, node0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment1.equals((Object)node0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      comment0.setBaseUri("");
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertFalse(comment0.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string2 = "";
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings2.maxPaddingWidth());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      Document document0 = new Document("#comment");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(0, document_OutputSettings3.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings2.maxPaddingWidth());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(0);
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(0, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(0, document_OutputSettings3.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(0, document_OutputSettings4.indentAmount());
      assertEquals(0, document_OutputSettings4.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(0, document_OutputSettings1.maxPaddingWidth());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(0, document_OutputSettings2.maxPaddingWidth());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#comment", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      
      // Undeclared exception!
      try { 
        comment1.outerHtmlHead((Appendable) null, 0, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Comment comment0 = new Comment("%#");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      comment0.value = (Object) "%#";
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Node node0 = comment0.wrap("%#");
      assertNotNull(node0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#comment", node0.nodeName());
      assertTrue(node0.hasParent());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, node0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment1.equals((Object)node0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertTrue(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      comment1.reparentChild(comment0);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, node0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment1.equals((Object)node0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertTrue(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertNull(xmlDeclaration0);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, node0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment1.equals((Object)node0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertTrue(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      XmlDeclaration xmlDeclaration1 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration1);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Comment comment2 = comment0.clone();
      assertNotNull(comment2);
      assertNotSame(comment0, comment2);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment2, comment0);
      assertNotSame(comment2, node0);
      assertNotSame(comment2, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)node0));
      assertFalse(comment2.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      assertTrue(comment2.hasParent());
      
      String string0 = comment1.toString();
      assertNotNull(string0);
      assertEquals("\n<!--%#-->", string0);
      assertNotSame(comment0, comment2);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, node0);
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment2));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment1.equals((Object)node0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertTrue(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      Comment comment3 = comment0.setData("\n<!--%#-->");
      assertNotNull(comment3);
      assertNotSame(comment0, comment2);
      assertSame(comment0, node0);
      assertNotSame(comment0, comment1);
      assertSame(comment0, comment3);
      assertNotSame(comment3, comment2);
      assertSame(comment3, node0);
      assertSame(comment3, comment0);
      assertNotSame(comment3, comment1);
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment3.equals((Object)comment2));
      assertFalse(comment3.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertTrue(comment3.hasParent());
      assertEquals(0, comment3.siblingIndex());
      assertEquals("#comment", comment3.nodeName());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "org.eclipse.jetty.util.thread.Invocable$InvocationType";
      Comment comment0 = new Comment("org.eclipse.jetty.util.thread.Invocable$InvocationType");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.setData("org.eclipse.jetty.util.thread.Invocable$InvocationType");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      
      String string1 = comment0.toString();
      assertNotNull(string1);
      assertEquals("<!--org.eclipse.jetty.util.thread.Invocable$InvocationType-->", string1);
      assertSame(comment0, comment1);
      assertFalse(string1.equals((Object)string0));
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      
      XmlDeclaration xmlDeclaration1 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration1);
      assertSame(comment0, comment1);
      assertNotSame(xmlDeclaration1, xmlDeclaration0);
      assertFalse(xmlDeclaration1.equals((Object)xmlDeclaration0));
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(xmlDeclaration1.hasParent());
      assertEquals("#declaration", xmlDeclaration1.nodeName());
      assertEquals(0, xmlDeclaration1.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment1.before("<!--org.eclipse.jetty.util.thread.Invocable$InvocationType-->");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Comment comment0 = new Comment("}(9");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      String string0 = comment0.getData();
      assertNotNull(string0);
      assertEquals("}(9", string0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      Comment comment2 = comment1.clone();
      assertNotNull(comment2);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment2, comment1);
      assertNotSame(comment2, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("<!--");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('\'');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintStream0.print(object0);
      assertSame(mockPrintStream0, printStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      comment0.outerHtmlTail(printStream0, (-4024), document_OutputSettings0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      String string0 = comment0.getData();
      assertNotNull(string0);
      assertEquals("<!--", string0);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string1 = comment0.nodeName();
      assertNotNull(string1);
      assertEquals("#comment", string1);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertNull(xmlDeclaration0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Comment comment1 = comment0.setData("");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      Comment comment2 = comment1.clone();
      assertNotNull(comment2);
      assertSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, comment0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment2, comment1);
      assertNotSame(comment2, comment0);
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
      
      String string0 = comment2.getData();
      assertNotNull(string0);
      assertEquals("", string0);
      assertSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, comment0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment2, comment1);
      assertNotSame(comment2, comment0);
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment1.equals((Object)comment2));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment2.nodeName());
      assertFalse(comment2.hasParent());
      assertEquals(0, comment2.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Comment comment0 = new Comment("XtmH/daqOPf~_");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      
      Comment comment1 = comment0.setData("XtmH/daqOPf~_");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      boolean boolean0 = comment1.isXmlDeclaration();
      assertFalse(boolean0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      
      String string0 = comment1.toString();
      assertNotNull(string0);
      assertEquals("<!--XtmH/daqOPf~_-->", string0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = "";
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      Node node0 = comment1.previousSibling();
      assertNull(node0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment1.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Comment comment0 = new Comment("");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment0.asXmlDeclaration();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Comment comment0 = new Comment("\tat ");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      Comment comment1 = comment0.setData("\tat ");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      Comment comment2 = comment1.clone();
      assertNotNull(comment2);
      assertSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertSame(comment1, comment0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment2.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Comment comment0 = new Comment("x");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      String string0 = comment0.toString();
      assertNotNull(string0);
      assertEquals("<!--x-->", string0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Comment comment0 = new Comment("2]-:q~,(#zC9Fk^");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Comment comment0 = new Comment("G");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string0 = comment0.toString();
      assertNotNull(string0);
      assertEquals("<!--G-->", string0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      comment0.setSiblingIndex(671);
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string1 = comment0.coreValue();
      assertNotNull(string1);
      assertEquals("G", string1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string2 = comment0.toString();
      assertNotNull(string2);
      assertEquals("<!--G-->", string2);
      assertTrue(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string3 = comment0.toString();
      assertNotNull(string3);
      assertEquals("<!--G-->", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      String string4 = comment1.nodeName();
      assertNotNull(string4);
      assertEquals("#comment", string4);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      Comment comment2 = comment1.clone();
      assertNotNull(comment2);
      assertNotSame(comment0, comment1);
      assertNotSame(comment0, comment2);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertEquals(671, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment2.nodeName());
      assertEquals(0, comment2.siblingIndex());
      assertFalse(comment2.hasParent());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Comment comment0 = new Comment("9Q^YTY~ZP_9RUv\"AM");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.setData("?ug: no template insertion mode on stack");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      
      Comment comment2 = comment1.setData("?ug: no template insertion mode on stack");
      assertNotNull(comment2);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertSame(comment2, comment1);
      assertSame(comment2, comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals(0, comment2.siblingIndex());
      assertFalse(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      
      Comment comment3 = comment1.clone();
      assertNotNull(comment3);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment3);
      assertNotSame(comment1, comment3);
      assertSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertNotSame(comment3, comment0);
      assertNotSame(comment3, comment2);
      assertNotSame(comment3, comment1);
      assertFalse(comment3.equals((Object)comment0));
      assertFalse(comment3.equals((Object)comment2));
      assertFalse(comment3.equals((Object)comment1));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals(0, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      assertEquals("#comment", comment3.nodeName());
      
      Node node0 = comment3.previousSibling();
      assertNull(node0);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment3);
      assertNotSame(comment1, comment3);
      assertSame(comment1, comment0);
      assertSame(comment1, comment2);
      assertNotSame(comment3, comment0);
      assertNotSame(comment3, comment2);
      assertNotSame(comment3, comment1);
      assertFalse(comment0.equals((Object)comment3));
      assertFalse(comment1.equals((Object)comment3));
      assertFalse(comment3.equals((Object)comment0));
      assertFalse(comment3.equals((Object)comment2));
      assertFalse(comment3.equals((Object)comment1));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      assertEquals(0, comment3.siblingIndex());
      assertFalse(comment3.hasParent());
      assertEquals("#comment", comment3.nodeName());
      
      Comment comment4 = comment0.clone();
      assertNotNull(comment4);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment3);
      assertNotSame(comment4, comment0);
      assertNotSame(comment4, comment2);
      assertNotSame(comment4, comment3);
      assertNotSame(comment4, comment1);
      assertFalse(comment0.equals((Object)comment3));
      assertFalse(comment4.equals((Object)comment0));
      assertFalse(comment4.equals((Object)comment2));
      assertFalse(comment4.equals((Object)comment3));
      assertFalse(comment4.equals((Object)comment1));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(0, comment4.siblingIndex());
      assertEquals("#comment", comment4.nodeName());
      assertFalse(comment4.hasParent());
      
      boolean boolean0 = comment0.isXmlDeclaration();
      assertTrue(boolean0);
      assertNotSame(comment0, comment4);
      assertSame(comment0, comment1);
      assertSame(comment0, comment2);
      assertNotSame(comment0, comment3);
      assertFalse(comment0.equals((Object)comment4));
      assertFalse(comment0.equals((Object)comment3));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings0.outline());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(30, document_OutputSettings3.maxPaddingWidth());
      
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("?ug: no template insertion mode on stack");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // ?ug: no template insertion mode on stack
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("<!--");
      assertNotNull(mockPrintStream0);
      
      PrintStream printStream0 = mockPrintStream0.append('\'');
      assertNotNull(printStream0);
      assertSame(mockPrintStream0, printStream0);
      assertSame(printStream0, mockPrintStream0);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      mockPrintStream0.print(object0);
      assertSame(mockPrintStream0, printStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      String string0 = comment0.getData();
      assertNotNull(string0);
      assertEquals("<!--", string0);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string1 = comment0.nodeName();
      assertNotNull(string1);
      assertEquals("#comment", string1);
      assertNotSame(comment0, comment1);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertNull(xmlDeclaration0);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Comment comment0 = new Comment("+}(9");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      String string0 = comment0.nodeName();
      assertNotNull(string0);
      assertEquals("#comment", string0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      String string1 = comment0.nodeName();
      assertNotNull(string1);
      assertEquals("#comment", string1);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Comment comment0 = new Comment("<!--");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      int int0 = 0;
      boolean boolean0 = comment0.isXmlDeclaration();
      assertFalse(boolean0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Node node0 = comment0.nextSibling();
      assertNull(node0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Document document0 = parser0.parseInput("^", ".,$TV4nS");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(".,$TV4nS", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        comment0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Comment comment0 = new Comment("%#");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      comment0.value = (Object) "%#";
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Node node0 = comment0.wrap("%#");
      assertNotNull(node0);
      assertSame(comment0, node0);
      assertSame(node0, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertTrue(node0.hasParent());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment1, node0);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment1.nodeName());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      comment1.reparentChild(comment0);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment1, node0);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment1.nodeName());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertNull(xmlDeclaration0);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment1, node0);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment1.nodeName());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      XmlDeclaration xmlDeclaration1 = comment0.asXmlDeclaration();
      assertNull(xmlDeclaration1);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertFalse(comment0.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Comment comment2 = comment0.clone();
      assertNotNull(comment2);
      assertNotSame(comment0, comment2);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment2, comment1);
      assertNotSame(comment2, comment0);
      assertNotSame(comment2, node0);
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)node0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment2.siblingIndex());
      assertTrue(comment2.hasParent());
      assertEquals("#comment", comment2.nodeName());
      
      String string0 = comment1.toString();
      assertNotNull(string0);
      assertEquals("\n<!--%#-->", string0);
      assertNotSame(comment0, comment2);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment1, node0);
      assertNotSame(comment1, comment0);
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment2));
      assertFalse(comment1.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment1.nodeName());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      Comment comment3 = comment0.setData("\n<!--%#-->");
      assertNotNull(comment3);
      assertNotSame(comment0, comment2);
      assertSame(comment0, comment3);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertSame(comment3, comment0);
      assertNotSame(comment3, comment2);
      assertNotSame(comment3, comment1);
      assertSame(comment3, node0);
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment3.equals((Object)comment2));
      assertFalse(comment3.equals((Object)comment1));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment3.nodeName());
      assertEquals(0, comment3.siblingIndex());
      assertTrue(comment3.hasParent());
      
      String string1 = comment1.toString();
      assertNotNull(string1);
      assertEquals("\n<!--%#-->", string1);
      assertNotSame(comment0, comment2);
      assertSame(comment0, comment3);
      assertNotSame(comment0, comment1);
      assertSame(comment0, node0);
      assertNotSame(comment1, comment2);
      assertNotSame(comment1, node0);
      assertNotSame(comment1, comment0);
      assertNotSame(comment1, comment3);
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(comment1.equals((Object)comment2));
      assertFalse(comment1.equals((Object)node0));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment1.equals((Object)comment3));
      assertTrue(string1.equals((Object)string0));
      assertEquals(0, comment0.siblingIndex());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#comment", comment1.nodeName());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Comment comment0 = new Comment("ItI2~RO@*gzph");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Node[] nodeArray0 = comment0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Comment comment1 = comment0.setData("ItI2~RO@*gzph");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Comment comment0 = new Comment("rRNOm^;");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Node[] nodeArray0 = comment0.childNodesAsArray();
      assertNotNull(nodeArray0);
      assertEquals(0, nodeArray0.length);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      String string0 = comment0.nodeName();
      assertNotNull(string0);
      assertEquals("#comment", string0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      Comment comment1 = comment0.setData("#comment");
      assertNotNull(comment1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      String string1 = comment1.outerHtml();
      assertNotNull(string1);
      assertEquals("<!--#comment-->", string1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      Node[] nodeArray1 = comment0.childNodesAsArray();
      assertNotNull(nodeArray1);
      assertEquals(0, nodeArray1.length);
      assertSame(comment0, comment1);
      assertNotSame(nodeArray1, nodeArray0);
      assertFalse(nodeArray1.equals((Object)nodeArray0));
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      comment1.siblingIndex = (-1581);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals((-1581), comment0.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals((-1581), comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      
      boolean boolean0 = comment1.isXmlDeclaration();
      assertFalse(boolean0);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals((-1581), comment0.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals((-1581), comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      
      String string2 = Node.EmptyString;
      assertNotNull(string2);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      XmlDeclaration xmlDeclaration1 = comment1.asXmlDeclaration();
      assertNotNull(xmlDeclaration1);
      assertSame(comment0, comment1);
      assertSame(comment1, comment0);
      assertNotSame(xmlDeclaration1, xmlDeclaration0);
      assertFalse(xmlDeclaration1.equals((Object)xmlDeclaration0));
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals((-1581), comment0.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertEquals((-1581), comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals(0, xmlDeclaration1.siblingIndex());
      assertEquals("#declaration", xmlDeclaration1.nodeName());
      assertFalse(xmlDeclaration1.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "queue {} startThread={}");
      assertNotNull(stringBuffer0);
      assertEquals("queue {} startThread={}", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.length());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      IntStream intStream0 = stringBuffer0.codePoints();
      assertNotNull(intStream0);
      assertEquals("queue {} startThread={}", stringBuffer0.toString());
      assertEquals(23, stringBuffer0.length());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertTrue(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(30, document_OutputSettings2.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertTrue(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(30, document_OutputSettings3.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertTrue(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(30, document_OutputSettings3.maxPaddingWidth());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(30, document_OutputSettings4.maxPaddingWidth());
      
      Comment comment0 = new Comment("queue {} startThread={}");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      Comment comment1 = comment0.clone();
      assertNotNull(comment1);
      assertNotSame(comment0, comment1);
      assertNotSame(comment1, comment0);
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertEquals(0, comment1.siblingIndex());
      
      // Undeclared exception!
      try { 
        comment1.outerHtmlHead(stringBuffer0, (-2905), document_OutputSettings3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
