/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:00:20 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class LeafNode_ESTest extends LeafNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("#data");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      assertNotSame(xmlDeclaration1, xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comment comment0 = new Comment("0QDCd8bt.VHrwcVym");
      Comment comment1 = (Comment)comment0.wrap("ScriptDataEndTagOpen");
      XmlDeclaration xmlDeclaration0 = comment1.asXmlDeclaration();
      assertFalse(xmlDeclaration0.hasParent());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("zU|Mg;5ej+|dm");
      String string0 = comment0.attr("zU|Mg;5ej+|dm");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "#data", "#data");
      assertFalse(documentType0.hasParent());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("uQ[s`Yz+hBA44HziV");
      cDataNode0.doSetBaseUri("uQ[s`Yz+hBA44HziV");
      assertFalse(cDataNode0.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comment comment0 = new Comment("#data");
      Node node0 = comment0.empty();
      assertEquals(0, node0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Comment comment0 = new Comment("0QDCd8bt.VHrwcVym");
      String string0 = comment0.absUrl("0QDCd8bt.VHrwcVym");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Comment comment0 = new Comment("0QDCd8bt.VHrwcVym");
      Comment comment1 = comment0.setData("ScriptDataEndTagOpen");
      assertSame(comment1, comment0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Comment comment0 = new Comment("#data");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      boolean boolean0 = xmlDeclaration0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("uQ[s`Yz+hBA44HziV");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        cDataNode0.addChildren(nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("^ $6z uU6V uR");
      Node node0 = comment0.removeAttr("^ $6z uU6V uR");
      assertEquals("#comment", node0.nodeName());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Comment comment0 = new Comment("0QDCd8bt.VHrwcVym");
      Comment comment1 = comment0.clone();
      assertNotSame(comment1, comment0);
  }
}
