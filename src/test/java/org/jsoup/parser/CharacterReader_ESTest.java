/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:09:33 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.stream.IntStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.CharacterReader;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class CharacterReader_ESTest extends CharacterReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ad@?d1fD<j");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(false);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[2];
      int int0 = stringReader0.read(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(2, int0);
      assertArrayEquals(new char[] {'a', 'd'}, charArray0);
      
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(2, charArray0.length);
      assertTrue(boolean0);
      assertArrayEquals(new char[] {'a', 'd'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("ad", string0);
      assertNotNull(string0);
      assertEquals(2, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray0[1] = '3';
      int int1 = stringReader0.read();
      assertEquals(64, int1);
      assertFalse(int1 == int0);
      
      charArray1[1] = '3';
      characterReader0.close();
      assertEquals(2, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      CharBuffer charBuffer0 = CharBuffer.allocate('3');
      assertNotNull(charBuffer0);
      assertEquals(51, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(51, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(51, charBuffer0.length());
      assertEquals(51, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      
      int int2 = (-1798);
      int int3 = 1449;
      int int4 = characterReader0.columnNumber();
      assertEquals(3, int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertEquals(2, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0J6nU*EVO%Fh");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("0J6nU*EVO%Fh");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("0", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int0 = CharacterReader.maxBufferLen;
      assertEquals(32768, int0);
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches('+');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('?');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean3 = characterReader0.containsIgnoreCase("0J6nU*EVO%Fh");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matches("0");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("J6nU*EVO%Fh", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(12, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo("0J6nU*EVO%Fh");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(12, characterReader0.pos());
      
      String string3 = characterReader0.cursorPos();
      assertEquals("1:13", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(12, characterReader0.pos());
      
      boolean boolean6 = characterReader0.matches("");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(12, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "%[_8+gy].28";
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = '+';
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesDigit();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[mr7nxK2L'u|xp^>");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      charArray0[0] = ' ';
      charArray0[1] = '=';
      charArray0[2] = ' ';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {' ', '=', ' '}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("[mr7nxK2L'u|xp^", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("|()(1");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {' ', '=', ' '}, charArray0);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(3, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(" = ", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(3, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      
      CharBuffer charBuffer1 = charBuffer0.compact();
      assertEquals(3, charArray0.length);
      assertArrayEquals(new char[] {' ', '=', ' '}, charArray0);
      assertNotNull(charBuffer1);
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer0.capacity());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer1.length());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("", charBuffer1.toString());
      assertEquals(3, charBuffer1.capacity());
      assertFalse(charBuffer1.isReadOnly());
      assertFalse(charBuffer1.isDirect());
      assertFalse(charBuffer1.hasRemaining());
      assertEquals(3, charBuffer1.position());
      assertEquals(0, charBuffer1.remaining());
      assertEquals(3, charBuffer1.limit());
      assertTrue(charBuffer1.hasArray());
      assertSame(charBuffer0, charBuffer1);
      assertSame(charBuffer1, charBuffer0);
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf(charBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Z~{0skVOQm<=2oC^'=");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.toString();
      assertEquals("Z~{0skVOQm<=2oC^'=", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'D';
      boolean boolean1 = characterReader0.matchesLetter();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = 'b';
      charArray0[2] = '!';
      charArray0[3] = '}';
      charArray0[4] = '.';
      charArray0[5] = 'H';
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'D', 'b', '!', '}', '.', 'H'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = characterReader0.containsIgnoreCase("Z~{0skVOQm<=2oC^'=");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("Z~{0skVOQm<=2oC^'=", string3);
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'D', 'b', '!', '}', '.', 'H'}, charArray0);
      assertNotNull(string3);
      assertEquals(18, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(18, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean4 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertEquals(18, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean5 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertArrayEquals(new char[] {'D', 'b', '!', '}', '.', 'H'}, charArray0);
      assertEquals(18, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[mr7nxK2L'u|xp^>");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[2] = '~';
      String string0 = characterReader0.consumeAttributeQuoted(true);
      assertEquals("[mr7nxK2L", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[2] = '-';
      charArray0[3] = 'x';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '-', 'x'}, charArray0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("'u|xp^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Array must not contain any null objects");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("Array must not contain any null objects", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("kvKS-?jC5;y88");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("A", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(2, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("rray", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      String string4 = characterReader0.cursorPos();
      assertEquals("1:6", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      String string5 = characterReader0.consumeAttributeQuoted(false);
      assertEquals(" must not contain any null objects", string5);
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(39, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "N23U8A/_v";
      StringReader stringReader0 = new StringReader("N23U8A/_v");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '`';
      charArray0[1] = 'k';
      stringReader0.reset();
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'`', 'k'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo('N');
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("N23U8A/_v");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("N23U8A/_v");
      assertEquals(0, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Fv'&[SJy51|5cMT ");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '';
      charArray0[2] = 'c';
      charArray0[3] = '(';
      charArray0[4] = '5';
      charArray0[5] = 'A';
      charArray0[6] = 'j';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("Fv'&[SJy", string0);
      assertArrayEquals(new char[] {'L', '', 'c', '(', '5', 'A', 'j'}, charArray0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(8, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("51", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(10, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[24];
      charArray0[0] = '+';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = '+';
      charArray0[2] = '+';
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[3] = '+';
      String string1 = characterReader0.consumeRawData();
      assertEquals("%[_8+gy].28", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      charArray0[4] = '+';
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(24, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(24, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean3 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string2 = characterReader0.consumeToAny(charArray0);
      assertEquals(24, charArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matches('+');
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('?');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean6 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string3 = characterReader0.consumeRawData();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean7 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean8 = characterReader0.matches("");
      assertTrue(boolean8);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean6);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string4 = characterReader0.consumeData();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string5 = characterReader0.consumeTo('+');
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean9 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(24, charArray0.length);
      assertFalse(boolean9);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean7);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean8);
      assertTrue(boolean9 == boolean6);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nF[;(k7&@Sv a?");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      CharacterReader characterReader1 = new CharacterReader(stringReader0, 949);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      
      String string0 = characterReader1.consumeHexSequence();
      assertEquals("F", string0);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(string0);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(1, characterReader1.pos());
      assertNotSame(characterReader1, characterReader0);
      
      CharacterReader characterReader2 = new CharacterReader(stringReader0, 2285);
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertNotNull(characterReader2);
      assertEquals(0, characterReader2.pos());
      assertFalse(characterReader2.isTrackNewlines());
      
      boolean boolean1 = characterReader2.matchConsumeIgnoreCase("Object must not be null");
      assertFalse(boolean1);
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(boolean1 == boolean0);
      assertEquals(0, characterReader2.pos());
      assertFalse(characterReader2.isTrackNewlines());
      assertNotSame(characterReader2, characterReader1);
      assertNotSame(characterReader2, characterReader0);
      
      int int1 = characterReader2.nextIndexOf("nF[;(k7&@Sv a?");
      assertEquals((-1), int1);
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(int1 == int0);
      assertEquals(0, characterReader2.pos());
      assertFalse(characterReader2.isTrackNewlines());
      assertNotSame(characterReader2, characterReader1);
      assertNotSame(characterReader2, characterReader0);
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3i%{ `?}O8;l`#8");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = '6';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'W', 'V', 'S', '6'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchConsume("F;3kI8Au)v");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeTo("3i%{ `?}O8;l`#8");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeData();
      assertEquals("3i%{ `?}O8;l`#8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf("3i%{ `?}O8;l`#8");
      assertEquals((-1), int0);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unconsume();
      assertEquals(15, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeRawData();
      assertEquals("8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeHexSequence();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = characterReader0.isTrackNewlines();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeAttributeQuoted(true);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean4 = characterReader0.matchesLetter();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WTF: No buffer left to unconsume.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("TF: No buffer left to unconsume.", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeTo("TF: No buffer left to unconsume.");
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = ';';
      charArray0[1] = 'I';
      int int0 = characterReader0.nextIndexOf('I');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      charArray0[2] = 't';
      char char0 = 'P';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, 852, 117);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("pzF!");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("pzF!");
      assertTrue(boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.containsIgnoreCase("pzF!");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("pzF", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.toString();
      assertEquals("!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.pos();
      assertEquals(3, int0);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[mr7nxK2L'u|xp^>");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      charArray0[1] = '{';
      charArray0[2] = '-';
      charArray0[3] = 'x';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '{', '-', 'x'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("[mr7nxK2L'u|xp^", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      int int0 = 125;
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 125);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = 'C';
      // Undeclared exception!
      try { 
        characterReader0.matches('C');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertEquals(0, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("aU3", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(3, characterReader0.pos());
      
      String string1 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("!", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char char0 = 'A';
      int int0 = characterReader0.nextIndexOf('A');
      assertEquals((-1), int0);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char char1 = '@';
      characterReader0.close();
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf('@');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ad@?d1fD<j");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("ad", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      char[] charArray1 = new char[2];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = '3';
      int int0 = stringReader0.read();
      assertEquals(97, int0);
      
      charArray1[1] = '3';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'3', '3'}, charArray1);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("33", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertNotSame(charArray1, charArray0);
      
      CharBuffer charBuffer1 = CharBuffer.allocate(97);
      assertFalse(charBuffer1.equals((Object)charBuffer0));
      assertNotNull(charBuffer1);
      assertTrue(charBuffer1.hasArray());
      assertEquals(97, charBuffer1.length());
      assertFalse(charBuffer1.isDirect());
      assertEquals(0, charBuffer1.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer1.toString());
      assertEquals(97, charBuffer1.limit());
      assertFalse(charBuffer1.isReadOnly());
      assertEquals(97, charBuffer1.capacity());
      assertEquals(97, charBuffer1.remaining());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.hasRemaining());
      assertNotSame(charBuffer1, charBuffer0);
      
      IntStream intStream0 = charBuffer0.codePoints();
      assertEquals(2, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertArrayEquals(new char[] {'3', '3'}, charArray1);
      assertNotNull(intStream0);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.remaining());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("33", charBuffer0.toString());
      assertEquals(2, charBuffer0.length());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertNotSame(charArray1, charArray0);
      assertNotSame(charBuffer0, charBuffer1);
      
      int int1 = stringReader0.read(charBuffer0);
      assertEquals(2, charArray1.length);
      assertEquals(2, int1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(charBuffer0.equals((Object)charBuffer1));
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'d', '@'}, charArray1);
      assertEquals(0, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(2, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(2, charBuffer0.limit());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.length());
      assertEquals(2, charBuffer0.position());
      assertNotSame(charArray1, charArray0);
      assertNotSame(charBuffer0, charBuffer1);
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("@?d1fD", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(8, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        stringReader0.read(charArray1, (-1798), 1449);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.isEmpty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("}K7uU3gaO]Z}tuT)PQB");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = '\'';
      boolean boolean0 = characterReader0.matchConsume("tjf}{gs");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = 'g';
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAny(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\'', 'g'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.cursorPos();
      assertEquals("1:1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeLetterSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("pA=<");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("pA", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      String string1 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("=<", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('A');
      assertEquals((-1), int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('@');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      characterReader0.rewindToMark();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[3] = 'A';
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("p", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'@', '@', '\u0000', 'A'}, charArray0);
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string3 = characterReader0.consumeTo("3:^2'AT#\"_yTKHq");
      assertEquals("A=<", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int2 = characterReader0.lineNumber();
      assertEquals(1, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string4 = characterReader0.consumeDigitSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      String string0 = "nF[;(k7&@Sv a?";
      StringReader stringReader0 = new StringReader("nF[;(k7&@Sv a?");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      stringReader0.close();
      CharacterReader characterReader1 = null;
      try {
        characterReader1 = new CharacterReader(stringReader0, 949);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("U3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("!", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf('A');
      assertEquals((-1), int0);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.nextIndexOf('@');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'@', '@', 'A', 'A'}, charArray0);
      assertNotNull(string3);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(5, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Sa\"tfLH>3eD75'.|");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = '{';
      String string0 = characterReader0.consumeData();
      assertEquals("S", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('T');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      charArray0[2] = 'C';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(3, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'T', '{', 'C'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf("Sa\"tfLH>3eD75'.|");
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("a", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(3, characterReader0.pos());
      
      int int2 = characterReader0.nextIndexOf("a");
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(3, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches("S");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(3, characterReader0.pos());
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("t", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int3 = characterReader0.nextIndexOf("t");
      assertEquals((-1), int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string3 = characterReader0.consumeAttributeQuoted(true);
      assertEquals("f", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matches('i');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeHexSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}L~$B8NAx`m");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("5", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf('');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = stringReader0.read();
      assertEquals(53, int1);
      assertFalse(int1 == int0);
      
      String string1 = characterReader0.toString();
      assertEquals("}L~$B8NAx`m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("}L~$B8NAx`m", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'', '', ''}, charArray0);
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(12, characterReader0.pos());
      
      characterReader0.rewindToMark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.toString();
      assertEquals("}L~$B8NAx`m", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string1));
      assertTrue(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("5");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int2 = characterReader0.nextIndexOf('~');
      assertEquals(2, int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("U3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("!", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('A');
      assertEquals((-1), int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('@');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'@', '@', 'A', 'A'}, charArray0);
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('O', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("N23U8A/_v");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = '+';
      String string2 = characterReader0.consumeTo("L^P;DnT2ep79yW4J7");
      assertEquals("Object ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = 'l';
      charArray0[0] = '.';
      String string3 = characterReader0.consumeTo('l');
      assertEquals("must not be nu", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(21, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[3] = 'N';
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(21, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nF[;(k7&@Sv a?");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      CharacterReader characterReader1 = new CharacterReader(stringReader0, 949);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      
      String string0 = characterReader1.consumeHexSequence();
      assertEquals("", string0);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(string0);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      assertNotSame(characterReader1, characterReader0);
      
      CharacterReader characterReader2 = new CharacterReader(stringReader0, 2285);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertNotNull(characterReader2);
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(0, characterReader2.pos());
      
      String string1 = characterReader2.consumeAttributeQuoted(false);
      assertEquals("nF[;(k7", string1);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(7, characterReader2.pos());
      assertNotSame(characterReader2, characterReader0);
      assertNotSame(characterReader2, characterReader1);
      
      int int0 = characterReader2.nextIndexOf("nF[;(k7&@Sv a?");
      assertEquals((-1), int0);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(7, characterReader2.pos());
      assertNotSame(characterReader2, characterReader0);
      assertNotSame(characterReader2, characterReader1);
      
      String string2 = characterReader2.consumeDigitSequence();
      assertEquals("", string2);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(7, characterReader2.pos());
      assertNotSame(characterReader2, characterReader0);
      assertNotSame(characterReader2, characterReader1);
      
      int int1 = characterReader1.lineNumber();
      assertEquals(1, int1);
      assertFalse(characterReader1.equals((Object)characterReader2));
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertFalse(int1 == int0);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      assertNotSame(characterReader1, characterReader2);
      assertNotSame(characterReader1, characterReader0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      String string0 = characterReader0.consumeRawData();
      assertEquals("%[_8+gy].28", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      charArray0[1] = '+';
      charArray0[2] = '+';
      int int0 = characterReader0.columnNumber();
      assertEquals(12, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      charArray0[3] = '+';
      charArray0[4] = '+';
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchesDigit();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string2 = characterReader0.consumeToAny(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches('+');
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('?');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean5 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string3 = characterReader0.consumeRawData();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean6 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean7 = characterReader0.matches("");
      assertTrue(boolean7);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean8 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean8);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean5);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string4 = characterReader0.consumeData();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean9 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean9);
      assertFalse(boolean9 == boolean7);
      assertFalse(boolean9 == boolean8);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean4);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nF[;(k7&@Sv a?");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("nF[;(k7&@Sv a?");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeData();
      assertEquals("nF[;(k7", string0);
      assertNotNull(string0);
      assertEquals(7, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("F;3kI8Au_v");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(7, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unconsume();
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches('?');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('7', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(7, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('&', char1);
      assertFalse(char1 == char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(8, characterReader0.pos());
      
      characterReader0.advance();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      char[] charArray0 = new char[15];
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nF[;(k7&@Sv a?");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      CharacterReader characterReader1 = new CharacterReader(stringReader0, 949);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      
      String string0 = characterReader1.consumeHexSequence();
      assertEquals("", string0);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(string0);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      assertNotSame(characterReader1, characterReader0);
      
      CharacterReader characterReader2 = new CharacterReader(stringReader0, 2285);
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertNotNull(characterReader2);
      assertEquals(0, characterReader2.pos());
      assertFalse(characterReader2.isTrackNewlines());
      
      int int0 = characterReader2.nextIndexOf("nF[;(k7&@Sv a?");
      assertEquals(0, int0);
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertEquals(0, characterReader2.pos());
      assertFalse(characterReader2.isTrackNewlines());
      assertNotSame(characterReader2, characterReader1);
      assertNotSame(characterReader2, characterReader0);
      
      String string1 = characterReader0.consumeData();
      assertEquals("nF[;(k7", string1);
      assertFalse(characterReader0.equals((Object)characterReader1));
      assertFalse(characterReader0.equals((Object)characterReader2));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(7, characterReader0.pos());
      assertNotSame(characterReader0, characterReader1);
      assertNotSame(characterReader0, characterReader2);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.mark();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = '+';
      charArray0[2] = '+';
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[3] = '+';
      charArray0[4] = '+';
      char char0 = characterReader0.current();
      assertEquals('%', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("%[_8", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('+');
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('+');
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean4 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string2 = characterReader0.consumeRawData();
      assertEquals("+gy].28", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean5 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean6 = characterReader0.matches("");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean7 = characterReader0.matchesIgnoreCase("%[_8");
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean0);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeData();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.cursorPos();
      assertEquals("1:12", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int2 = characterReader0.lineNumber();
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("String must not be empty");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("n~LXPQ7wg%l4T:q S");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("String", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      String string0 = characterReader0.consumeTagName();
      assertEquals("Object", string0);
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = characterReader0.current();
      assertEquals(' ', char0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("N23U8A/_v");
      assertFalse(boolean0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[0] = '+';
      String string3 = characterReader0.consumeTo("L^P;DnT2ep79yW4J7");
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(7, characterReader0.pos());
      
      charArray0[1] = '[';
      charArray0[2] = '.';
      String string4 = characterReader0.consumeTo('[');
      assertEquals("must not be null", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(23, characterReader0.pos());
      
      charArray0[3] = 'N';
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(23, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Must be false");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 87);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf("Must be false");
      assertEquals(0, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeTo("v0");
      assertEquals("Must be fals", string0);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("'");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = '&';
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToEnd();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("String must not be empty");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches(';');
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("String must not be empty");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("String must not be empty", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(24, characterReader0.pos());
      
      String string1 = characterReader0.toString();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(24, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf("String must not be empty");
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(24, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("WTF: No buffer left to unconsume.");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("WTF: No buffer left to unconsume.", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("F;3k8A/_v");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches('?');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(34, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('\uFFFF', char1);
      assertTrue(char1 == char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(35, characterReader0.pos());
      
      characterReader0.advance();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:37", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(37, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      charArray0[0] = '\uFFFF';
      boolean boolean3 = characterReader0.matchesAny(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string4 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertNotNull(string4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string5 = characterReader0.consumeLetterSequence();
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches("4_GCk{qM%?2");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesLetter();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean6 = characterReader0.rangeEquals(977, 977, "");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string6 = characterReader0.consumeRawData();
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string2));
      assertNotNull(string6);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("?'!");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("?'!");
      assertEquals(0, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("?", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('A');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int2 = characterReader0.nextIndexOf('@');
      assertEquals((-1), int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(" ");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = 'r';
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = 'l';
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[2] = 'o';
      charArray0[3] = 'X';
      charArray0[4] = '1';
      // Undeclared exception!
      try { 
        characterReader0.current();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertEquals(0, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("aU3", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("!", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'@', '@', 'A', 'A'}, charArray0);
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = characterReader0.current();
      assertEquals('O', char0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("N23U8A/_v");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[0] = '+';
      String string2 = characterReader0.consumeTo("L^P;DnT2ep79yW4J7");
      assertEquals("Object ", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(7, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = '[';
      charArray0[2] = '.';
      String string3 = characterReader0.consumeTo('[');
      assertEquals("must not be null", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(23, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[3] = 'N';
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(23, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nF[;(k7&@Sv a?");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('1');
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = '1';
      String string2 = characterReader0.consumeTo('1');
      assertEquals("nF[;(k7&@Sv a?", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      charArray0[2] = ',';
      charArray0[3] = '1';
      int int0 = characterReader0.nextIndexOf(',');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      charArray0[4] = '1';
      charArray0[5] = '1';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(6, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'\u0000', '1', ',', '1', '1', '1'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches('u');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      boolean boolean3 = characterReader0.isEmpty();
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      boolean boolean5 = characterReader0.isEmpty();
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      boolean boolean6 = characterReader0.containsIgnoreCase("nF[;(k7&@Sv a?");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('J');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      characterReader0.unconsume();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      boolean boolean7 = characterReader0.matchesLetter();
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      boolean boolean8 = characterReader0.matchesLetter();
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean5);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      boolean boolean9 = characterReader0.matchConsume("");
      assertTrue(boolean9);
      assertFalse(boolean9 == boolean1);
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9 == boolean2);
      assertFalse(boolean9 == boolean8);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean0);
      assertFalse(boolean9 == boolean7);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean6);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      String string5 = characterReader0.consumeLetterSequence();
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string0));
      assertNotNull(string5);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      String string6 = characterReader0.consumeToAny(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("?", string6);
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string3));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string0));
      assertArrayEquals(new char[] {'\u0000', '1', ',', '1', '1', '1'}, charArray0);
      assertNotNull(string6);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
      
      String string7 = characterReader0.consumeTo("WTF: N buffer left to unconsume.");
      assertEquals("", string7);
      assertFalse(string7.equals((Object)string0));
      assertFalse(string7.equals((Object)string2));
      assertFalse(string7.equals((Object)string6));
      assertNotNull(string7);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(14, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("WTF: No buffer left to unconsume.");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches("Object must not be null");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.containsIgnoreCase("F;3k8A/_v");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('?');
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('W', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('T', char1);
      assertFalse(char1 == char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      characterReader0.advance();
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[1];
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("WTF: No buffer left to unconsume.");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeData();
      assertEquals("WTF: No buffer left to unconsume.", string0);
      assertNotNull(string0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matches("Object must not be null");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.containsIgnoreCase("F;3k8A/_v");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('J');
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(34, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('\uFFFF', char1);
      assertTrue(char1 == char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(35, characterReader0.pos());
      
      characterReader0.advance();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:37", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(37, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      charArray0[0] = '\uFFFF';
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matches("4_GCk{qM%?2");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean6 = characterReader0.matchesLetter();
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean7 = characterReader0.rangeEquals(977, 977, "");
      assertFalse(boolean7);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        CharBuffer.wrap((CharSequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WTF: No buffer left to unconsume.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matches("6SY@<Z%(W");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      stringReader0.reset();
      stringReader0.mark(0);
      long long0 = stringReader0.skip(0L);
      assertEquals(0L, long0);
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("WTF", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeData();
      assertEquals(": No buffer left to unconsume.", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeToAnySorted((char[]) null);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string5 = characterReader0.consumeHexSequence();
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesAnySorted((char[]) null);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("U3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(3, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("!", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('A');
      assertEquals((-1), int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('@');
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      charArray0[2] = 'A';
      charArray0[3] = 'A';
      String string4 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertArrayEquals(new char[] {'@', '@', 'A', 'A'}, charArray0);
      assertNotNull(string4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      String string5 = characterReader0.consumeData();
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string1));
      assertNotNull(string5);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2|,T4");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('2', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      stringReader0.reset();
      char[] charArray0 = new char[6];
      charArray0[0] = '2';
      charArray0[1] = '2';
      boolean boolean1 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      charArray0[2] = '2';
      charArray0[3] = '2';
      charArray0[4] = '2';
      charArray0[5] = '2';
      boolean boolean2 = characterReader0.matches("GN^9ne");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("|,T4", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches('2');
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        CharacterReader.rangeEquals(charArray0, (-516), (-516), (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{\"h[");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 115);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("{\"h[", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      String string1 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("'");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = '&';
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(false);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("WTF: No buffer left to unconsume.");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("WTF: No buffer left to unconsume.", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("N23U8A/_v");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches('?');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(33, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(34, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('\uFFFF', char1);
      assertTrue(char1 == char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(35, characterReader0.pos());
      
      characterReader0.advance();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:37", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(37, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      charArray0[0] = '\uFFFF';
      boolean boolean3 = characterReader0.matchesAny(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches("4_GCk{qM%?2");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesLetter();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean6 = characterReader0.rangeEquals(977, 977, "");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('7');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = '+';
      charArray0[2] = '+';
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[3] = '+';
      charArray0[4] = '+';
      char char0 = characterReader0.current();
      assertEquals('%', char0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = characterReader0.matches('+');
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.nextIndexOf('?');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean4 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeRawData();
      assertEquals("%[_8+gy].28", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean5 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean6 = characterReader0.matches("");
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean7 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeData();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cnsVh>f/im0");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'A';
      charArray0[1] = 'k';
      charArray0[2] = 'E';
      charArray0[3] = 'e';
      charArray0[4] = 'u';
      charArray0[5] = 'h';
      charArray0[6] = 'A';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'A', 'k', 'E', 'e', 'u', 'h', 'A'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("cnsVh", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches("cnsVh");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = '+';
      charArray0[2] = '+';
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[3] = '+';
      charArray0[4] = '+';
      char char0 = characterReader0.current();
      assertEquals('%', char0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = characterReader0.matchesDigit();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("%[_8", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches('+');
      assertTrue(boolean4);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('?');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean5 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string2 = characterReader0.consumeRawData();
      assertEquals("+gy].28", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean6 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean7 = characterReader0.matches("");
      assertTrue(boolean7);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean8 = characterReader0.matchesIgnoreCase("%[_8");
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string3 = characterReader0.consumeData();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("&I~;J,41");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals("&I~;J,41", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(8, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(9, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(8, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(8, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";d5w`)Mganb");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 615);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'M';
      charArray0[1] = '=';
      charArray0[2] = '-';
      charArray0[3] = 'o';
      charArray0[4] = 'L';
      charArray0[5] = 'P';
      charArray0[6] = 'q';
      charArray0[7] = 'o';
      charArray0[8] = ';';
      boolean boolean1 = characterReader0.matchesAny(charArray0);
      assertEquals(9, charArray0.length);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'M', '=', '-', 'o', 'L', 'P', 'q', 'o', ';'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("!t");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isTrackNewlines();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches("");
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '[';
      charArray0[1] = 'D';
      charArray0[2] = 'b';
      charArray0[3] = '\"';
      charArray0[4] = '~';
      charArray0[5] = '?';
      charArray0[6] = '/';
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertArrayEquals(new char[] {'[', 'D', 'b', '\"', '~', '?', '/'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = characterReader0.containsIgnoreCase("!t");
      assertTrue(boolean3);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kO'a&I=]C#");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('k', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader(" ");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[0] = 'r';
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = 'l';
      charArray0[2] = 'o';
      charArray0[3] = 'X';
      charArray0[4] = '1';
      char char0 = characterReader0.current();
      assertEquals(' ', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.consumeToAny(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals(" ", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'r', 'l', 'o', 'X', '1'}, charArray0);
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      char char1 = characterReader0.consume();
      assertEquals('\uFFFF', char1);
      assertFalse(char1 == char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      String string5 = characterReader0.consumeData();
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertNotNull(string5);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      String string6 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = 'k';
      charArray0[1] = '/';
      charArray0[2] = 'W';
      charArray0[3] = 'T';
      charArray0[5] = ' ';
      charArray0[6] = 't';
      charArray0[7] = 'W';
      charArray0[8] = '5';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("org.jsoup.parser.Charac", string0);
      assertArrayEquals(new char[] {'k', '/', 'W', 'T', '\u0000', ' ', 't', 'W', '5'}, charArray0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(23, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(23, characterReader0.pos());
      
      String string1 = characterReader0.consumeRawData();
      assertEquals("terReader", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(32, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.parser.CharacterReader");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 762);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = ' ';
      charArray0[2] = 'B';
      charArray0[3] = 'G';
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(4, int0);
      assertArrayEquals(new char[] {'o', 'r', 'g', '.'}, charArray0);
      
      stringReader0.reset();
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      stringReader0.close();
      boolean boolean1 = characterReader0.matchesIgnoreCase("7bM&/k");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("!vh^ {!]:9\"![}O\"'a");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      stringReader0.mark(0);
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("!vh^ {!]:9\"![}O\"'a");
      assertEquals(0, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'a';
      charArray0[1] = '~';
      charArray0[2] = 'n';
      charArray0[3] = '6';
      charArray0[4] = 'J';
      charArray0[5] = ':';
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("!vh^ {!]:9\"![}O\"'", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'a', '~', 'n', '6', 'J', ':'}, charArray0);
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(17, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("!vh^ {!]:9\"![}O\"'a");
      assertFalse(boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(17, characterReader0.pos());
      
      char[] charArray1 = new char[5];
      assertFalse(charArray1.equals((Object)charArray0));
      
      charArray1[0] = 'N';
      charArray1[1] = 'p';
      long long0 = stringReader0.skip(442L);
      assertEquals(18L, long0);
      
      charArray1[2] = 'C';
      charArray1[3] = 'u';
      charArray1[4] = 'q';
      boolean boolean1 = characterReader0.matchesAny(charArray1);
      assertEquals(5, charArray1.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {'N', 'p', 'C', 'u', 'q'}, charArray1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(17, characterReader0.pos());
      assertNotSame(charArray1, charArray0);
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("a", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" X$}:^He*H[bat_&e");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".<|S@S$}C");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.ready();
      assertTrue(boolean0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 857);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals(".", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase(".<|S@S$}C");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesLetter();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'Z';
      charArray0[1] = 'r';
      charArray0[2] = 'D';
      charArray0[3] = 'z';
      charArray0[4] = ':';
      charArray0[5] = 'I';
      String string1 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(6, charArray0.length);
      assertEquals("<|S@S$}C", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'Z', 'r', 'D', 'z', ':', 'I'}, charArray0);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchConsume("!+~uKh!@|");
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2!TNcOpC5_>V8");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 1287);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("^`>k*");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.pos();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("2!TNcOpC5_>V8", string0);
      assertNotNull(string0);
      assertEquals(13, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("lzgJ");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("lzgJ", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("lzgJ");
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string1 = characterReader0.toString();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[1];
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Mark invalid");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.cursorPos();
      assertEquals("1:1", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'R';
      String string2 = characterReader0.consumeTo('R');
      assertEquals("Mark invalid", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(12, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeLetterThenDigitSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o!I,BsNcRHoA45");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'U';
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[2] = '=';
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[3] = 'x';
      charArray0[4] = 'J';
      boolean boolean2 = characterReader0.matchesLetter();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[5] = 'n';
      int int0 = stringReader0.read();
      assertEquals(111, int0);
      
      charArray0[6] = 'H';
      char char0 = characterReader0.current();
      assertEquals('o', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[7] = 'T';
      charArray0[8] = '.';
      boolean boolean3 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new char[] {'#', 'U', '=', 'x', 'J', 'n', 'H', 'T', '.'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesIgnoreCase("o!I,BsNcRHoA45");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo('o');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C]");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      stringReader0.close();
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'e';
      charArray0[1] = 'u';
      charArray0[2] = '$';
      boolean boolean1 = characterReader0.containsIgnoreCase("`o8MF(h@I.");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[3] = ']';
      charArray0[4] = 'O';
      charArray0[5] = '\"';
      charArray0[6] = 'G';
      charArray0[7] = 'U';
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("C", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'e', 'u', '$', ']', 'O', '\"', 'G', 'U'}, charArray0);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      stringReader0.close();
      boolean boolean2 = characterReader0.rangeEquals(270, 2295, "9NB");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("la~O[z|Ac\"d,CH2");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = 'Z';
      charArray0[2] = '1';
      charArray0[3] = 'I';
      charArray0[4] = 'k';
      charArray0[5] = 'w';
      charArray0[6] = 'R';
      charArray0[7] = 'l';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(8, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'k', 'Z', '1', 'I', 'k', 'w', 'R', 'l'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:1", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isTrackNewlines();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('T');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string4 = characterReader0.consumeRawData();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("wDCdE~f3aI");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("wDCdE~f3aI", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(10, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = 'a';
      String string1 = characterReader0.consumeTo('a');
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char1 = characterReader0.consume();
      assertEquals('\uFFFF', char1);
      assertFalse(char1 == char0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.isTrackNewlines();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("mk.6v.o:/8Eg");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals("mk.6v.o:/8Eg", string0);
      assertNotNull(string0);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.isEmpty();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeRawData();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:13", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[6];
      charArray0[0] = 'W';
      String string3 = characterReader0.consumeTo("C0wR~");
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = '#';
      // Undeclared exception!
      try { 
        characterReader0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      stringReader0.close();
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WTF: No buffer left to unconsume.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsumeIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("f");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("6Z&JJ5i?fP/k");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      String string0 = characterReader0.consumeTo("WTF: No buffer left to unconsume.");
      assertEquals("f", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "org.jsoup.parser.CharacterReader";
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        characterReader0.consumeToAnySorted((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "tR9xzp:ihO";
      StringReader stringReader0 = new StringReader("tR9xzp:ihO");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.isEmpty();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = null;
      String string1 = characterReader0.consumeData();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean3 = CharacterReader.rangeEquals((char[]) null, 1422, 0, "");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      
      int int1 = characterReader0.pos();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int2 = characterReader0.lineNumber();
      assertEquals(1, int2);
      assertFalse(int2 == int1);
      assertTrue(int2 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int3 = characterReader0.pos();
      assertEquals(0, int3);
      assertTrue(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeRawData();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 31);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matches('$');
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Aid");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(941);
      assertEquals(3L, long0);
      
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 941);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.toString();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\uFFFF';
      charArray0[1] = '\uFFFF';
      charArray0[2] = '\uFFFF';
      charArray0[3] = '\uFFFF';
      charArray0[4] = '\uFFFF';
      int int1 = stringReader0.read(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals((-1), int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {'\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF', '\uFFFF'}, charArray0);
      
      int int2 = 0;
      boolean boolean1 = characterReader0.rangeEquals(941, 0, "");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray1);
      assertEquals(0, charArray1.length);
      assertFalse(charArray1.equals((Object)charArray0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(0, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.capacity());
      assertNotSame(charArray1, charArray0);
      
      char char1 = '2';
      // Undeclared exception!
      try { 
        charBuffer0.put(0, '\uFFFF');
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = '\\';
      charArray0[2] = '>';
      charArray0[3] = '6';
      charArray0[4] = 'H';
      boolean boolean0 = CharacterReader.rangeEquals(charArray0, (-1), (-1), "o>+.XS,khmhH");
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'b', '\\', '>', '6', 'H'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader("/Zj");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.isEmpty();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals("/Zj", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(3, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("/Zj");
      assertEquals((-1), int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int1 = characterReader0.pos();
      assertEquals(4, int1);
      assertFalse(int1 == int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches("/Zj");
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesDigit();
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int2 = characterReader0.pos();
      assertEquals(4, int2);
      assertFalse(int2 == int0);
      assertTrue(int2 == int1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean6 = characterReader0.isTrackNewlines();
      assertTrue(boolean6);
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean5);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int3 = characterReader0.nextIndexOf('6');
      assertEquals((-1), int3);
      assertFalse(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(int3 == int2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null, 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wJE' AdQT");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("wJE' AdQT");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[0];
      int int0 = stringReader0.read(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      boolean boolean3 = stringReader0.markSupported();
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      
      int int1 = stringReader0.read(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertArrayEquals(new char[] {}, charArray0);
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeRawData();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string2);
      assertNotNull(string2);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.cursorPos();
      assertEquals("1:10", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean4 = characterReader0.matchesAny(charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertArrayEquals(new char[] {}, charArray0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean5 = characterReader0.matchConsume("1:10");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string3));
      assertNotNull(string4);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string5 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string3));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string5);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string6 = characterReader0.consumeData();
      assertEquals("", string6);
      assertFalse(string6.equals((Object)string3));
      assertNotNull(string6);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ovVB(U");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 880);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '5';
      charArray0[1] = '\"';
      charArray0[2] = 'o';
      charArray0[3] = '.';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'5', '\"', 'o', '.'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchConsume("ovVB(U");
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(6, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matches("");
      assertTrue(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches("ovVB(U");
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(6, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringReader stringReader0 = new StringReader("WTF: No buffer left to unconsume.");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'F';
      boolean boolean1 = characterReader0.matches('F');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[1];
      stringReader0.reset();
      long long0 = stringReader0.skip((-1L));
      assertEquals(0L, long0);
      
      charArray0[0] = 'Q';
      int int0 = stringReader0.read(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals((-1), int0);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      stringReader0.close();
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.cursorPos();
      assertEquals("1:2", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = stringReader0.markSupported();
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = CharacterReader.rangeEquals(charArray0, (-1), (-3864), "");
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      
      String string2 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertArrayEquals(new char[] {'Q'}, charArray0);
      assertNotNull(string2);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean4 = CharacterReader.rangeEquals(charArray0, (-3864), 90, "26Es.");
      assertEquals(1, charArray0.length);
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertArrayEquals(new char[] {'Q'}, charArray0);
      
      String string3 = characterReader0.consumeAttributeQuoted(true);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c67M9dSXuC&.TsVT}");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 70);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '|';
      charArray0[1] = '?';
      charArray0[2] = 'D';
      charArray0[3] = 'X';
      charArray0[4] = '0';
      charArray0[5] = '?';
      charArray0[6] = 'c';
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(7, charArray0.length);
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'|', '?', 'D', 'X', '0', '?', 'c'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("'");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      char char0 = '&';
      charArray0[0] = '&';
      String string0 = characterReader0.consumeTo('&');
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[1] = '0';
      boolean boolean1 = characterReader0.matchesAny(charArray0);
      assertEquals(2, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'&', '0'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('0');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string1);
      assertArrayEquals(new char[] {'&', '0'}, charArray0);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAnySorted(charArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("WTF: No buffer left to unconsume.");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeData();
      assertEquals("WTF: No buffer left to unconsume.", string0);
      assertNotNull(string0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("F;3k8A/_v");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(false);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matches('?');
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertEquals(33, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(34, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      char char1 = characterReader0.consume();
      assertEquals('\uFFFF', char1);
      assertTrue(char1 == char0);
      assertEquals(35, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      characterReader0.advance();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      characterReader0.close();
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      char[] charArray0 = new char[1];
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:37", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(37, int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      charArray0[0] = '\uFFFF';
      boolean boolean3 = characterReader0.matchesAny(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'\uFFFF'}, charArray0);
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      String string4 = characterReader0.consumeLetterSequence();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches("4_GCk{qM%?2");
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesLetter();
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
      
      boolean boolean6 = characterReader0.rangeEquals(977, 977, "");
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(36, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("HEd");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = stringReader0.read();
      assertEquals(72, int0);
      
      stringReader0.close();
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("Mark invalid");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = 'P';
      boolean boolean1 = characterReader0.matches('P');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char1 = 'm';
      int int0 = characterReader0.nextIndexOf('m');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.cursorPos();
      assertEquals("1:1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesLetter();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader((Reader) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "";
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matchConsume((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "Lgt]L<<'Xz`N>c";
      CharacterReader characterReader0 = new CharacterReader("Lgt]L<<'Xz`N>c");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.nextIndexOf('a');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = stringReader0.ready();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 4702);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      stringReader0.reset();
      boolean boolean2 = characterReader0.matchesDigit();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      stringReader0.reset();
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '\'';
      charArray0[1] = '[';
      charArray0[2] = '>';
      int int1 = stringReader0.read(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals(3, int1);
      assertFalse(int1 == int0);
      assertArrayEquals(new char[] {'o', 'r', 'g'}, charArray0);
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("org", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = characterReader0.matchesDigit();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringReader stringReader0 = new StringReader("mH`9");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[5];
      charArray0[0] = ')';
      charArray0[1] = 't';
      charArray0[2] = '(';
      charArray0[3] = 'j';
      charArray0[4] = 'j';
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {')', 't', '(', 'j', 'j'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals("mH`9", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string1 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "org.jsoup.UncheckedIOException";
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.matchesAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matches('I');
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('g');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[5];
      charArray0[0] = 'g';
      charArray0[1] = 'g';
      charArray0[2] = 'g';
      charArray0[3] = 'g';
      charArray0[4] = 'g';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'g', 'g', 'g', 'g', 'g'}, charArray0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.cursorPos();
      assertEquals("1:1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo("1:1");
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string4 = characterReader0.consumeToEnd();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 109);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matches('w');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '5';
      charArray0[1] = '7';
      charArray0[2] = 'O';
      charArray0[3] = '?';
      charArray0[4] = 'c';
      charArray0[5] = 'f';
      charArray0[6] = '`';
      int int0 = stringReader0.read(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals(7, int0);
      assertArrayEquals(new char[] {'o', 'r', 'g', '.', 'j', 's', 'o'}, charArray0);
      
      long long0 = stringReader0.skip(1L);
      assertEquals(1L, long0);
      
      stringReader0.reset();
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("fauS*VEeMDNx=%");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int1 = characterReader0.columnNumber();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("fauS*VEeMDNx=%", string0);
      assertNotNull(string0);
      assertEquals(14, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.isTrackNewlines();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(14, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesIgnoreCase("fauS*VEeMDNx=%");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertEquals(14, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(14, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(14, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("BUXnRH(h1V");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo('i');
      assertEquals("BUXnRH(h1V", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("<%T87n\"p");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.rangeEquals(1, 1, "<.KQR:");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeRawData();
      assertEquals("org.jsoup.UncheckedIOException", string0);
      assertNotNull(string0);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[1];
      charArray0[0] = '4';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'4'}, charArray0);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("!^=G'#kqQ");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("!^=G'#kqQ");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.nextIndexOf('b');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matches("");
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = '\'';
      String string1 = characterReader0.consumeToAny(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("!^=G", string1);
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {'b', 'b', 'b', '\''}, charArray0);
      assertNotNull(string1);
      assertEquals(4, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeData();
      assertEquals("'#kqQ", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      int int0 = 409;
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 409);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeAttributeQuoted(true);
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeTo("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6jn8Vv,**E@+");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'u';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'u'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("4G;uR@VFVWdu+AzC");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeAttributeQuoted(true);
      assertEquals("4G;uR@VFVWdu+AzC", string0);
      assertNotNull(string0);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matches("");
      assertTrue(boolean0);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.pos();
      assertEquals(16, int1);
      assertFalse(int1 == int0);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int2 = characterReader0.nextIndexOf('g');
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(16, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.advance();
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeHexSequence();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int3 = characterReader0.columnNumber();
      assertEquals(18, int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchConsume("4G;uR@VFVWdu+AzC");
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[0];
      String string4 = characterReader0.consumeToAny(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(string4);
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.rewindToMark();
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int4 = characterReader0.lineNumber();
      assertEquals(1, int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertTrue(int4 == int0);
      assertEquals(17, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Oy7|#;Kn^");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[7];
      charArray0[0] = '?';
      charArray0[1] = '#';
      charArray0[2] = '\\';
      charArray0[3] = 'p';
      charArray0[5] = '0';
      charArray0[6] = '.';
      String string0 = characterReader0.consumeToAny(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("Oy7|", string0);
      assertArrayEquals(new char[] {'?', '#', '\\', 'p', '\u0000', '0', '.'}, charArray0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      char[] charArray1 = new char[0];
      assertFalse(charArray1.equals((Object)charArray0));
      
      String string1 = characterReader0.consumeToAnySorted(charArray1);
      assertEquals(0, charArray1.length);
      assertEquals("#;Kn^", string1);
      assertFalse(charArray1.equals((Object)charArray0));
      assertFalse(string1.equals((Object)string0));
      assertArrayEquals(new char[] {}, charArray1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      assertNotSame(charArray1, charArray0);
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.parser.CharacterReader");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeData();
      assertEquals("org.jsoup.parser.CharacterReader", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(32, characterReader0.pos());
      
      String string1 = characterReader0.consumeRawData();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(32, characterReader0.pos());
      
      char[] charArray0 = null;
      // Undeclared exception!
      try { 
        characterReader0.consumeToAny((char[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '\'';
      charArray0[1] = 'Z';
      charArray0[2] = '`';
      charArray0[3] = 'P';
      charArray0[4] = '[';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("WTF: No buffer left to unconsume.", string0);
      assertArrayEquals(new char[] {'\'', 'Z', '`', 'P', '['}, charArray0);
      assertNotNull(string0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf("WTF: No buffer left to unconsume.");
      assertEquals((-1), int0);
      assertEquals(33, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.unconsume();
      assertEquals(32, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.UncheckedIOException");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeTo("org.jsoup.UncheckedIOException");
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals("org.jsoup.UncheckedIOException", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.advance();
      assertEquals(31, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeToEnd();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.pos();
      assertEquals(30, int0);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.toString();
      assertEquals("", string3);
      assertTrue(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertTrue(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(30, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("wDCdE~f3aI");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("wDCdE~f3aI", string0);
      assertNotNull(string0);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("wDCdE~f3aI");
      assertFalse(boolean0);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:11", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeLetterSequence();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeTagName();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertNotNull(string4);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string5 = characterReader0.consumeTagName();
      assertEquals("", string5);
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string2));
      assertNotNull(string5);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.containsIgnoreCase(":");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o!zCUZ");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchConsume("o!zCUZ");
      assertTrue(boolean0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeData();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'o';
      boolean boolean1 = characterReader0.matches("");
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertEquals(1, charArray0.length);
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertArrayEquals(new char[] {'o'}, charArray0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = CharacterReader.rangeEquals(charArray0, (-3512), (-3512), "o!zCUZ");
      assertEquals(1, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertArrayEquals(new char[] {'o'}, charArray0);
      
      boolean boolean4 = characterReader0.matches('o');
      assertFalse(boolean4);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(7, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchConsumeIgnoreCase("");
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(7, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("0UBuHWhF3u");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('0', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      charArray0[1] = '^';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("0UBuHWhF3u", string0);
      assertArrayEquals(new char[] {'r', '^'}, charArray0);
      assertNotNull(string0);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("0UBuHWhF3u");
      assertFalse(boolean0);
      assertEquals(10, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '.';
      charArray0[1] = '.';
      charArray0[2] = 'E';
      charArray0[3] = '*';
      charArray0[4] = 'u';
      charArray0[5] = '(';
      charArray0[6] = 's';
      charArray0[7] = 'b';
      charArray0[8] = 'b';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(9, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'.', '.', 'E', '*', 'u', '(', 's', 'b', 'b'}, charArray0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: WTF: No buffer left to unconsume.
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[7];
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[0] = 'o';
      int int0 = stringReader0.read();
      assertEquals((-1), int0);
      
      String string1 = characterReader0.consumeLetterSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = 'n';
      charArray0[2] = '}';
      charArray0[3] = '2';
      charArray0[4] = 'c';
      charArray0[5] = '3';
      charArray0[6] = '{';
      boolean boolean1 = characterReader0.matchesAny(charArray0);
      assertEquals(7, charArray0.length);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertArrayEquals(new char[] {'o', 'n', '}', '2', 'c', '3', '{'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = null;
      try {
        characterReader0 = new CharacterReader(stringReader0, (-61));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("7T=|#Qw@ox1a-}SJK?7");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.current();
      assertEquals('7', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("7T=|#Qw@ox1a-}SJK?7");
      assertEquals(0, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[8];
      charArray0[0] = '7';
      charArray0[1] = '7';
      charArray0[2] = 'X';
      charArray0[3] = '7';
      charArray0[4] = '7';
      charArray0[5] = '7';
      charArray0[6] = '7';
      charArray0[7] = '7';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'7', '7', 'X', '7', '7', '7', '7', '7'}, charArray0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("7T=|#Qw@ox1a-}SJK?7");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(19, characterReader0.pos());
      
      characterReader0.unconsume();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(18, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeToEnd();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BFCl>LZxw\\RSx");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = characterReader0.current();
      assertEquals('F', char0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("BFCl>LZxw\\RSx");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[7];
      charArray0[0] = 'F';
      charArray0[1] = 'F';
      charArray0[2] = 'M';
      charArray0[3] = 'F';
      charArray0[4] = 'F';
      charArray0[5] = 'F';
      charArray0[6] = 'F';
      String string0 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(7, charArray0.length);
      assertEquals("", string0);
      assertArrayEquals(new char[] {'F', 'F', 'M', 'F', 'F', 'F', 'F'}, charArray0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3i%{ `?}O8;l`#8");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeTo("3i%{ `?}O8;l`#8");
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeData();
      assertEquals("3i%{ `?}O8;l`#8", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(16, characterReader0.pos());
      
      characterReader0.unconsume();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      String string2 = characterReader0.consumeHexSequence();
      assertEquals("8", string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(16, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isTrackNewlines();
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(16, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('^');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Mark invalid");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: WTF: No buffer left to unconsume.
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("R4");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matches("R4");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[3];
      charArray0[0] = 'i';
      charArray0[1] = 's';
      charArray0[2] = '{';
      boolean boolean1 = CharacterReader.rangeEquals(charArray0, (-1716), 47, "R4");
      assertEquals(3, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'i', 's', '{'}, charArray0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchConsume("");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      StringReader stringReader0 = new StringReader("org.jsoup.UncheckedIOException");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 65535);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = stringReader0.markSupported();
      assertTrue(boolean0);
      
      boolean boolean1 = characterReader0.matches('q');
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("org", string0);
      assertNotNull(string0);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals(".jsoup.UncheckedIOException", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(30, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matches("org");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(30, characterReader0.pos());
      
      String string2 = characterReader0.consumeDigitSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(30, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(30, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('q');
      assertEquals((-1), int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(30, characterReader0.pos());
      
      int int1 = characterReader0.pos();
      assertEquals(30, int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(30, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("er");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('}');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchConsumeIgnoreCase("er");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("z=B)`Jr}Y");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[0];
      boolean boolean0 = characterReader0.matchesAny(charArray0);
      assertEquals(0, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1MvPCR|h}NGd:");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("", string1);
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("", string2);
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string3 = characterReader0.consumeData();
      assertEquals("", string3);
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.trackNewlines(false);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char char0 = characterReader0.consume();
      assertEquals('\uFFFF', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      char[] charArray0 = new char[2];
      String string4 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals("", string4);
      assertArrayEquals(new char[] {'\u0000', '\u0000'}, charArray0);
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      charArray0[0] = '\uFFFF';
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Sx}h");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.close();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.consume();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.trackNewlines(true);
      assertEquals(0, characterReader0.pos());
      assertTrue(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("a", string0);
      assertNotNull(string0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      String string1 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("U3", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(3, characterReader0.pos());
      
      String string2 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("!", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf('@');
      assertEquals((-1), int0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesDigit();
      assertFalse(boolean0);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertArrayEquals(new char[] {'@', '@', '\u0000', '\u0000'}, charArray0);
      assertNotNull(string3);
      assertTrue(characterReader0.isTrackNewlines());
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringReader stringReader0 = new StringReader("_AB:.<rL,LwRSs");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("E|GToR[G|m");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("E|GToR[G|m");
      assertEquals(0, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("E", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      int int1 = characterReader0.pos();
      assertEquals(1, int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(1, characterReader0.pos());
      
      characterReader0.advance();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(2, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("$^cx");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf(')');
      assertEquals((-1), int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.nextIndexOf("$^cx");
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("f\"\"");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.advance();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("kO'a&I=]C#");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(0, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Muj)6f");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Rz d/");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("Rz d/");
      assertFalse(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      int int0 = characterReader0.nextIndexOf("Rz d/");
      assertEquals(0, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesLetter();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.close();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.consumeDigitSequence();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("}K7uU3gaO]Z}tuT)PQB");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      boolean boolean0 = characterReader0.isEmpty();
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.matchConsume("tjf}{gs");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = 'g';
      characterReader0.unmark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean2 = characterReader0.matchesAny(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertArrayEquals(new char[] {'\'', 'g', '\u0000', '\u0000'}, charArray0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.cursorPos();
      assertEquals("1:1", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean3 = characterReader0.matchesLetter();
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeLetterSequence();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[mr7nxK2L'u|xp^>");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      String string0 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("[mr7nxK2L", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      charArray0[2] = '-';
      charArray0[3] = 'x';
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '\u0000', '-', 'x'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(9, characterReader0.pos());
      
      String string2 = characterReader0.consumeTagName();
      assertEquals("'u|xp^", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesIgnoreCase("[mr7nxK2L");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      String string3 = characterReader0.consumeDigitSequence();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.matches((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: N buffer left to unconsume.");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[2];
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[0] = 'i';
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("WTF", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(3, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = 'e';
      String string3 = characterReader0.consumeToAny(charArray0);
      assertEquals(2, charArray0.length);
      assertEquals(": N buff", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertArrayEquals(new char[] {'i', 'e'}, charArray0);
      assertNotNull(string3);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("er", string4);
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(13, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.containsIgnoreCase((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("[mr7nxK2L'u|xp^>");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[4];
      charArray0[0] = '~';
      String string0 = characterReader0.consumeAttributeQuoted(false);
      assertEquals("[mr7nxK2L", string0);
      assertNotNull(string0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[2] = '-';
      charArray0[3] = 'x';
      boolean boolean0 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(4, charArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new char[] {'~', '\u0000', '-', 'x'}, charArray0);
      assertEquals(9, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeTagName();
      assertEquals("'u|xp^", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(15, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("O<7N%Os03_zf");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.unconsume();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: WTF: No buffer left to unconsume.
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("pzF!");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchConsumeIgnoreCase("pzF!");
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("pzF!");
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      String string1 = characterReader0.toString();
      assertEquals("", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
      
      int int0 = characterReader0.pos();
      assertEquals(4, int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(4, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      StringReader stringReader0 = new StringReader("5}L~$B8NAx`m");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeHexSequence();
      assertEquals("5", string0);
      assertNotNull(string0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.nextIndexOf('');
      assertEquals((-1), int0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = stringReader0.read();
      assertEquals(53, int1);
      assertFalse(int1 == int0);
      
      String string1 = characterReader0.toString();
      assertEquals("}L~$B8NAx`m", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.cursorPos();
      assertEquals("1:2", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[3];
      charArray0[0] = '';
      charArray0[1] = '';
      charArray0[2] = '';
      boolean boolean0 = characterReader0.matchesIgnoreCase("WTF: N buffer left to unconsume.");
      assertFalse(boolean0);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string3 = characterReader0.consumeToAnySorted(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("}L~$B8NAx`m", string3);
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string2));
      assertTrue(string3.equals((Object)string1));
      assertArrayEquals(new char[] {'', '', ''}, charArray0);
      assertNotNull(string3);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.rewindToMark();
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string4 = characterReader0.toString();
      assertEquals("}L~$B8NAx`m", string4);
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      assertTrue(string4.equals((Object)string3));
      assertTrue(string4.equals((Object)string1));
      assertNotNull(string4);
      assertEquals(1, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string5 = characterReader0.consumeToAny(charArray0);
      assertEquals(3, charArray0.length);
      assertEquals("}L~$B8NAx`m", string5);
      assertFalse(string5.equals((Object)string2));
      assertTrue(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string0));
      assertTrue(string5.equals((Object)string4));
      assertArrayEquals(new char[] {'', '', ''}, charArray0);
      assertNotNull(string5);
      assertEquals(12, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o!I,BsNcRHoA45");
      assertNotNull(stringReader0);
      
      stringReader0.reset();
      CharacterReader characterReader0 = new CharacterReader("o!I,BsNcRHoA45");
      assertNotNull(characterReader0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      char[] charArray0 = new char[9];
      charArray0[0] = '#';
      charArray0[1] = 'U';
      String string0 = characterReader0.cursorPos();
      assertEquals("1:1", string0);
      assertNotNull(string0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean0 = characterReader0.matchesLetter();
      assertTrue(boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesDigit();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[4] = 'x';
      charArray0[4] = 'J';
      boolean boolean2 = characterReader0.matchesLetter();
      assertTrue(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[5] = 'n';
      int int0 = CharacterReader.maxBufferLen;
      assertEquals(32768, int0);
      
      charArray0[6] = 'H';
      char char0 = characterReader0.current();
      assertEquals('o', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      charArray0[6] = 'T';
      charArray0[8] = '#';
      boolean boolean3 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(9, charArray0.length);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertArrayEquals(new char[] {'#', 'U', '\u0000', '\u0000', 'J', 'n', 'T', '\u0000', '#'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string1 = characterReader0.consumeHexSequence();
      assertEquals("", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matchesIgnoreCase("o!I,BsNcRHoA45");
      assertTrue(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      String string2 = characterReader0.consumeTo('o');
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      boolean boolean5 = characterReader0.matchesIgnoreCase("");
      assertTrue(boolean5);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(0, characterReader0.pos());
      
      // Undeclared exception!
      try { 
        characterReader0.nextIndexOf("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("String must nnt be empty");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matches(';');
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean1 = characterReader0.containsIgnoreCase("String must nnt be empty");
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int1 = characterReader0.columnNumber();
      assertEquals(1, int1);
      assertTrue(int1 == int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeLetterSequence();
      assertEquals("String", string0);
      assertNotNull(string0);
      assertEquals(6, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeToEnd();
      assertEquals(" must nnt be empty", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals(24, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string2 = characterReader0.toString();
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotNull(string2);
      assertEquals(24, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int2 = characterReader0.nextIndexOf("String must nnt be empty");
      assertEquals((-1), int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(24, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      Integer integer0 = new Integer(';');
      assertEquals(59, (int)integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(integer0.equals((Object)int1));
      assertFalse(integer0.equals((Object)int2));
      assertNotNull(integer0);
      
      String string3 = characterReader0.consumeTagName();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      assertTrue(string3.equals((Object)string2));
      assertNotNull(string3);
      assertEquals(24, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      characterReader0.mark();
      assertEquals(24, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nF[;(k7&@Sv a?");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesAsciiAlpha();
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeTagName();
      assertEquals("nF[;(k7&@Sv", string0);
      assertNotNull(string0);
      assertEquals(11, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = stringReader0.read();
      assertEquals(110, int0);
      
      CharacterReader characterReader1 = new CharacterReader(stringReader0, 949);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertNotNull(characterReader1);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(0, characterReader1.pos());
      
      String string1 = characterReader1.consumeHexSequence();
      assertEquals("F", string1);
      assertFalse(characterReader1.equals((Object)characterReader0));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader1.isTrackNewlines());
      assertEquals(1, characterReader1.pos());
      assertNotSame(characterReader1, characterReader0);
      
      CharacterReader characterReader2 = new CharacterReader(stringReader0, 2285);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertNotNull(characterReader2);
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(0, characterReader2.pos());
      
      boolean boolean1 = characterReader2.matchConsumeIgnoreCase("Object must not be null");
      assertFalse(boolean1);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(boolean1 == boolean0);
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(0, characterReader2.pos());
      assertNotSame(characterReader2, characterReader0);
      assertNotSame(characterReader2, characterReader1);
      
      int int1 = characterReader2.nextIndexOf("nF[;(k7&@Sv a?");
      assertEquals((-1), int1);
      assertFalse(characterReader2.equals((Object)characterReader0));
      assertFalse(characterReader2.equals((Object)characterReader1));
      assertFalse(int1 == int0);
      assertFalse(characterReader2.isTrackNewlines());
      assertEquals(0, characterReader2.pos());
      assertNotSame(characterReader2, characterReader0);
      assertNotSame(characterReader2, characterReader1);
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("Object must not be null");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string0 = characterReader0.consumeDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      String string1 = characterReader0.consumeDigitSequence();
      assertEquals("", string1);
      assertNotNull(string1);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char char0 = characterReader0.current();
      assertEquals('O', char0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.matchesIgnoreCase("N23U8A/_v");
      assertFalse(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      int int0 = characterReader0.lineNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      boolean boolean0 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertTrue(boolean0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      String string0 = characterReader0.consumeLetterThenDigitSequence();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[1] = '+';
      charArray0[2] = '+';
      int int0 = characterReader0.columnNumber();
      assertEquals(1, int0);
      assertEquals(0, characterReader0.pos());
      assertFalse(characterReader0.isTrackNewlines());
      
      charArray0[3] = '+';
      String string1 = characterReader0.consumeRawData();
      assertEquals("%[_8+gy].28", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      charArray0[4] = '+';
      char char0 = characterReader0.current();
      assertEquals('\uFFFF', char0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean1 = characterReader0.matchesAnySorted(charArray0);
      assertEquals(5, charArray0.length);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.unmark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean2 = characterReader0.matchConsumeIgnoreCase("%[_8+gy].28");
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean3 = characterReader0.matchesDigit();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string2 = characterReader0.consumeToAny(charArray0);
      assertEquals(5, charArray0.length);
      assertEquals("", string2);
      assertFalse(string2.equals((Object)string1));
      assertArrayEquals(new char[] {'+', '+', '+', '+', '+'}, charArray0);
      assertNotNull(string2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean4 = characterReader0.matches('+');
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      int int1 = characterReader0.nextIndexOf('?');
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean5 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string3 = characterReader0.consumeRawData();
      assertEquals("", string3);
      assertFalse(string3.equals((Object)string1));
      assertNotNull(string3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean6 = characterReader0.matchesAsciiAlpha();
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean7 = characterReader0.matches("");
      assertTrue(boolean7);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      characterReader0.mark();
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      String string4 = characterReader0.consumeData();
      assertEquals("", string4);
      assertFalse(string4.equals((Object)string1));
      assertNotNull(string4);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
      
      boolean boolean8 = characterReader0.containsIgnoreCase("%[_8+gy].28");
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean3);
      assertFalse(characterReader0.isTrackNewlines());
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      characterReader0.containsIgnoreCase("%[_8+gy].28");
      char[] charArray0 = new char[5];
      charArray0[0] = '+';
      characterReader0.consumeLetterThenDigitSequence();
      charArray0[2] = '+';
      characterReader0.columnNumber();
      charArray0[3] = '+';
      charArray0[4] = '+';
      characterReader0.consume();
      characterReader0.matchesAnySorted(charArray0);
      characterReader0.unmark();
      characterReader0.matchesAnySorted(charArray0);
      characterReader0.matchesDigit();
      characterReader0.consumeToAny(charArray0);
      characterReader0.matches('+');
      characterReader0.nextIndexOf('?');
      characterReader0.containsIgnoreCase("%[_8+gy].28");
      characterReader0.consumeRawData();
      characterReader0.matchesAsciiAlpha();
      characterReader0.matches("");
      characterReader0.matchesIgnoreCase("[_8");
      characterReader0.mark();
      characterReader0.consumeData();
      CharacterReader.rangeEquals(charArray0, 2176, (-849), " j,w");
      characterReader0.matchesAsciiAlpha();
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("%[_8+gy].28");
      characterReader0.containsIgnoreCase("%[_8+gy].28");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.columnNumber();
      characterReader0.unmark();
      characterReader0.matchesDigit();
      characterReader0.matches('+');
      characterReader0.nextIndexOf('?');
      characterReader0.containsIgnoreCase("%[_8+gy].28");
      characterReader0.matchesAsciiAlpha();
      characterReader0.matches("");
      characterReader0.mark();
      characterReader0.consumeData();
      characterReader0.consumeTo("%[_8+gy].28");
      assertEquals(11, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ad@?d1fD<j");
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      characterReader0.trackNewlines(false);
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      characterReader0.matchesAny(charArray0);
      characterReader0.consumeHexSequence();
      char[] charArray1 = new char[2];
      charArray0[1] = '3';
      stringReader0.read();
      charArray1[1] = '3';
      CharBuffer.allocate('3');
      characterReader0.columnNumber();
      characterReader0.consumeData();
      characterReader0.consumeTo("ad");
      // Undeclared exception!
      try { 
        stringReader0.read(charArray1, (-1798), 1449);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("aU3!");
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.trackNewlines(false);
      characterReader0.consumeLetterThenDigitSequence();
      characterReader0.consumeAttributeQuoted(false);
      characterReader0.nextIndexOf('@');
      characterReader0.matchesDigit();
      char[] charArray0 = new char[4];
      charArray0[0] = '@';
      charArray0[1] = '@';
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.lineNumber();
      characterReader0.matchesDigit();
      assertEquals(5, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("nF[;(k7&@Sv a?");
      char[] charArray0 = new char[6];
      charArray0[0] = '1';
      characterReader0.consumeHexSequence();
      charArray0[1] = '1';
      characterReader0.consumeTo('1');
      characterReader0.consumeLetterThenDigitSequence();
      charArray0[2] = ',';
      charArray0[3] = '1';
      characterReader0.nextIndexOf(',');
      charArray0[4] = '1';
      charArray0[5] = '1';
      characterReader0.matchesAnySorted(charArray0);
      characterReader0.matches('u');
      characterReader0.isEmpty();
      characterReader0.matchesDigit();
      characterReader0.isEmpty();
      characterReader0.containsIgnoreCase("nF[;(k7&@Sv a?");
      characterReader0.nextIndexOf('V');
      characterReader0.matches('U');
      characterReader0.unconsume();
      characterReader0.matchesLetter();
      characterReader0.matchesLetter();
      characterReader0.matchConsume("");
      characterReader0.matchesAny(charArray0);
      characterReader0.trackNewlines(true);
      characterReader0.consumeLetterSequence();
      characterReader0.consumeTagName();
      characterReader0.consumeToAny(charArray0);
      characterReader0.consumeAttributeQuoted(true);
      characterReader0.lineNumber();
      // Undeclared exception!
      try { 
        characterReader0.rewindToMark();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Mark invalid
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("3i%{ `?}O8;l`#8");
      characterReader0.matchesAsciiAlpha();
      char[] charArray0 = new char[4];
      charArray0[0] = 'W';
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = '6';
      characterReader0.matchesAnySorted(charArray0);
      characterReader0.matchConsume("F;3kI8Au)v");
      characterReader0.consumeTo("3i%{ `?}O8;l`#8");
      characterReader0.consumeData();
      characterReader0.nextIndexOf("3i%{ `?}O8;l`#8");
      characterReader0.unconsume();
      characterReader0.consumeRawData();
      characterReader0.consumeHexSequence();
      characterReader0.isTrackNewlines();
      characterReader0.consumeAttributeQuoted(false);
      characterReader0.matchesLetter();
      characterReader0.columnNumber();
      characterReader0.mark();
      assertEquals(16, characterReader0.pos());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      CharacterReader characterReader0 = new CharacterReader("WTF: No buffer left to unconsume.");
      characterReader0.matches("WTF: No buffer left to unconsume.");
      characterReader0.consumeData();
      characterReader0.containsIgnoreCase("F;3kI8Au_v");
      characterReader0.unconsume();
      characterReader0.trackNewlines(true);
      characterReader0.matches('?');
      characterReader0.matchesDigit();
      characterReader0.trackNewlines(true);
      characterReader0.consume();
      characterReader0.consume();
      characterReader0.advance();
      characterReader0.close();
      char[] charArray0 = new char[15];
      characterReader0.consumeDigitSequence();
      characterReader0.cursorPos();
      characterReader0.toString();
      characterReader0.columnNumber();
      charArray0[0] = '.';
      characterReader0.close();
      characterReader0.matchesAny(charArray0);
      characterReader0.consumeToAnySorted(charArray0);
      characterReader0.consumeLetterSequence();
      characterReader0.matches("4_GCk{qM%?2");
      characterReader0.matchesLetter();
      characterReader0.rangeEquals(977, 977, "");
      characterReader0.lineNumber();
      characterReader0.close();
      characterReader0.cursorPos();
      characterReader0.columnNumber();
      characterReader0.mark();
      assertTrue(characterReader0.isTrackNewlines());
  }
}
