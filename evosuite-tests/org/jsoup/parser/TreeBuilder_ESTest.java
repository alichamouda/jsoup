/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:27:44 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TreeBuilder_ESTest extends TreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9YQ8sn");
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse(stringReader0, "9YQ8sn", parser0);
      Attributes attributes0 = new Attributes();
      boolean boolean0 = xmlTreeBuilder0.processStartTag("9YQ8sn", attributes0);
      boolean boolean1 = xmlTreeBuilder0.processStartTag("9YQ8sn", attributes0);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(109548807);
      xmlTreeBuilder0.parser = parser1;
      // Undeclared exception!
      try { 
        xmlTreeBuilder0.error("O]NdHBv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseError", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9YQ8sn");
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse(stringReader0, "#root", parser0);
      boolean boolean0 = xmlTreeBuilder0.currentElementIs("#root");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      ArrayList<Element> arrayList0 = new ArrayList<Element>(linkedList0);
      xmlTreeBuilder0.stack = arrayList0;
      arrayList0.add((Element) null);
      boolean boolean0 = xmlTreeBuilder0.currentElementIs((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      LinkedList<FormElement> linkedList0 = new LinkedList<FormElement>();
      ArrayList<Element> arrayList0 = new ArrayList<Element>(linkedList0);
      xmlTreeBuilder0.stack = arrayList0;
      boolean boolean0 = xmlTreeBuilder0.currentElementIs((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9YQ8sn");
      Parser parser0 = Parser.xmlParser();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.initialiseParse(stringReader0, "9YQ8sn", parser0);
      boolean boolean0 = xmlTreeBuilder0.currentElementIs("9YQ8sn");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Tag tag0 = Tag.valueOf("JeD/9P");
      Attributes attributes0 = new Attributes();
      Parser parser0 = Parser.xmlParser();
      xmlTreeBuilder0.parseFragment("G0Hz", ":containsData(%s)", parser0);
      Element element0 = new Element(tag0, "JeD/9P", attributes0);
      Elements elements0 = element0.getElementsByAttributeValueEnding("^8ffA", "6TX4\"aRWFSrsFwMp");
      xmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      boolean boolean0 = xmlTreeBuilder0.processStartTag("G0Hz", attributes0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Document document0 = Parser.parse("9YQ8snV8", "9YQ8snV8");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      boolean boolean0 = xmlTreeBuilder0.isContentForTagData("E&$v#BtT.Z8 (m");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      xmlTreeBuilder0.parse("BaseURI must not be null", "BaseURI must not be null");
      xmlTreeBuilder0.error("BaseURI must not be null");
  }
}
