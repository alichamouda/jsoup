/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:07:09 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.StringWriter;
import java.net.CookieStore;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayDeque;
import java.util.Collection;
import java.util.HashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.eclipse.jetty.io.ArrayByteBufferPool;
import org.eclipse.jetty.util.AttributesMap;
import org.eclipse.jetty.util.HttpCookieStore;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.Consumer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.LeafNode;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Node_ESTest extends Node_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Tag.valueOf("1oR?pYWYum>\"Kp18;");
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      cDataNode0.attributes();
      Node[] nodeArray0 = new Node[1];
      SynchronousQueue<DataNode> synchronousQueue0 = new SynchronousQueue<DataNode>();
      cDataNode0.ownerDocument();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      int int0 = 2304;
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2304);
      Document document2 = document1.connection(connection0);
      Element element0 = document2.prependChild(document1);
      HttpConnection httpConnection1 = new HttpConnection();
      Stack<Node> stack0 = new Stack<Node>();
      Document document3 = Document.createShell("multipart/form-data");
      document3.selectXpath("multipart/form-data");
      Elements elements0 = document3.getElementsMatchingOwnText("application/x-www-form-urlencoded");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
      // Undeclared exception!
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "RK3wTL&PN4CQ}j";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment("RK3wTL&PN4CQ}j", "");
      document0.tag();
      String string2 = "duH";
      Attributes attributes0 = null;
      CDataNode cDataNode0 = new CDataNode("");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        leafNode0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.CDataNode", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String string0 = "RK3wTL&PN4CQ}j";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment("RK3wTL&PN4CQ}j", "");
      document0.tag();
      String string2 = "dOe";
      Attributes attributes0 = null;
      CDataNode cDataNode0 = new CDataNode("");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      leafNode0.unwrap();
      leafNode0.siblingNodes();
      // Undeclared exception!
      try { 
        document0.replaceChild(leafNode0, leafNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "RK3wTL&PN4CQ}j";
      String string1 = "`";
      Document document0 = new Document("RK3wTL&PN4CQ}j");
      Tag.valueOf("RK3wTL&PN4CQ}j");
      String string2 = "Oe";
      Attributes attributes0 = null;
      CDataNode cDataNode0 = new CDataNode("");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        leafNode0.siblingNodes();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Comment comment0 = new Comment("V5i8=txXan");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comment0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "FG9/";
      CDataNode cDataNode0 = new CDataNode("FG9/");
      Comment comment0 = new Comment("FG9/");
      Comment comment1 = comment0.setData("oX}]T<[w_:p\"YG0");
      Comment comment2 = comment1.clone();
      comment2.toString();
      comment1.parent();
      Tag tag0 = Tag.valueOf("FG9/");
      Element element0 = new Element(tag0, "abs:method");
      // Undeclared exception!
      try { 
        element0.selectFirst("abs:method");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'abs:method': unexpected token at ':method'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Comment comment0 = new Comment("K5:yx@.~X_O|");
      String string0 = "T30HZ";
      Comment comment1 = comment0.setData("T30HZ");
      comment1.reparentChild(comment0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      comment1.attributes();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      comment1.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("i}0b[N;hojD8:%");
      Element element0 = document0.prependElement("i}0b[N;hojD8:%");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("replacementChar");
      Tag tag0 = document0.tag();
      Attributes attributes0 = new Attributes();
      Element element0 = document0.prependText("replacementChar");
      document0.doClone(element0);
      FormElement formElement0 = new FormElement(tag0, "uX:7i", attributes0);
      FormElement formElement1 = formElement0.clone();
      formElement1.addClass("");
      formElement1.clone();
      Document document1 = document0.clone();
      Vector<PseudoTextElement> vector0 = new Vector<PseudoTextElement>();
      Element element1 = document1.appendChildren(vector0);
      // Undeclared exception!
      try { 
        element1.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("RK3wTL&PN4CQ}j", "");
      Tag tag0 = document0.tag();
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.clone();
      document0.cssSelector();
      Element element0 = new Element(tag0, " gBgp ");
      document0.wholeOwnText();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element1 = document0.traverse(nodeVisitor0);
      Element element2 = element1.append("RK3wTL&PN4CQ}j");
      document0.childNodesAsArray();
      cDataNode0.siblingNodes();
      element0.nextSibling();
      // Undeclared exception!
      try { 
        element2.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataNode dataNode0 = new DataNode("cE6$");
      dataNode0.hasSameValue((Object) null);
      DataNode dataNode1 = dataNode0.clone();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = dataNode0.filter(nodeFilter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dataNode1.setSiblingIndex((-1));
      dataNode0.childNodes();
      dataNode1.toString();
      dataNode1.toString();
      Element element0 = new Element("osp:");
      element0.nodelistChanged();
      element0.doClone(node0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "o-pm=24#K{UvHi q";
      Document document0 = Document.createShell("o-pm=24#K{UvHi q");
      Document document1 = (Document)document0.clearAttributes();
      document1.reparentChild(document0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Comment comment0 = new Comment("K5:yx@.~X_O|");
      String string0 = "T30HZ";
      Comment comment1 = comment0.setData("T30HZ");
      comment1.reparentChild(comment0);
      // Undeclared exception!
      try { 
        comment1.reparentChild(comment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("rUStVh$:H");
      document0.data();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DataNode dataNode0 = new DataNode("rUStVh$:H");
      DataNode dataNode1 = dataNode0.clone();
      Document document1 = (Document)document0.text("");
      dataNode0.toString();
      dataNode1.reparentChild(document0);
      // Undeclared exception!
      try { 
        document1.childNodesCopy();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Comment comment0 = new Comment("V5i8=txXan");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = comment0.traverse(nodeVisitor0);
      // Undeclared exception!
      try { 
        node0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "";
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "~0 n;S-^iSM^`g$2");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEachNode(consumer0);
      document0.ownerDocument();
      Element element0 = document0.prependElement("h}D^NeW ");
      // Undeclared exception!
      try { 
        element0.selectFirst("Flushed={} written={} remaining={} {}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Flushed={} written={} remaining={} {}': unexpected token at '={} written={} remaining={} {}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "";
      DataNode dataNode0 = new DataNode("");
      String string1 = "s W9(m\"i2(cC`J)t>";
      DataNode dataNode1 = (DataNode)dataNode0.wrap("s W9(m\"i2(cC`J)t>");
      dataNode1.nextSibling();
      dataNode1.setParentNode(dataNode0);
      Appendable appendable0 = null;
      int int0 = 1;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        dataNode1.unwrap();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1oR?pYWYum>\"Kp18;", "1oR?pYWYum>\"Kp18;");
      Document document1 = document0.normalise();
      document0.prependChild(document1);
      document1.elementSiblingIndex();
      Tag.valueOf("1oR?pYWYum>\"Kp18;");
      document1.attr("abs:^(");
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      cDataNode0.attributes();
      document0.parent();
      Node[] nodeArray0 = new Node[1];
      SynchronousQueue<DataNode> synchronousQueue0 = new SynchronousQueue<DataNode>();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      int int0 = (-118628011);
      Parser parser1 = parser0.setTrackErrors((-118628011));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Kqeh+0\"G");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser2 = parser1.settings(parseSettings0);
      Parser parser3 = parser2.newInstance();
      String string0 = "org.jsoup.nodes.Node";
      Document document0 = parser3.parseInput("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      Element element0 = document0.firstElementSibling();
      String string1 = "syst";
      document0.toggleClass("syst");
      document0.getElementsByAttribute("org.jsoup.nodes.Node");
      element0.appendTo(document0);
      Document document1 = (Document)element0.appendChild(document0);
      document1.appendText("org.jsoup.nodes.Node");
      document0.nextElementSibling();
      // Undeclared exception!
      document1.wrap("Kqeh+0\"G");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "abs:method");
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      document1.doClone(document0);
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2294);
      Document document2 = document1.connection(connection0);
      document2.toString();
      document2.prependChild(document1);
      document2.unwrap();
      HttpConnection httpConnection1 = new HttpConnection();
      Stack<Node> stack0 = new Stack<Node>();
      Document document3 = new Document("CS~p^@.q");
      Tag tag0 = document3.tag();
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("abs:abs:", "");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "^vnW:~|,L#8R)FSJ", attributes1);
      FormElement formElement1 = formElement0.clone();
      FormElement formElement2 = formElement1.addElement(document1);
      formElement2.elements();
      // Undeclared exception!
      try { 
        httpConnection1.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Parser.parseBodyFragment("I^/4z 6GQ;_@kvy!2", "I^/4z 6GQ;_@kvy!2");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      Element element0 = document2.appendElement("I^/4z 6GQ;_@kvy!2");
      Node node0 = element0.removeAttr("}Bt^pDR");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.forEachNode(consumer0);
      // Undeclared exception!
      try { 
        document1.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1oR?pYWYum>\"Kp18;", "1oR?pYWYum>\"Kp18;");
      Element element0 = document0.prependText("1oR?pYWYum>\"Kp18;");
      element0.elementSiblingIndex();
      Tag.valueOf("1oR?pYWYum>\"Kp18;");
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      cDataNode0.attributes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1oR?pYWYum>\"Kp18;");
      document0.parent();
      Node[] nodeArray0 = new Node[1];
      SynchronousQueue<DataNode> synchronousQueue0 = new SynchronousQueue<DataNode>();
      document0.cssSelector();
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("abs:meta");
      element0.closest((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1oR?pYWYum>\"Kp18;", "1oR?pYWYum>\"Kp18;");
      Element element0 = document0.prependText("1oR?pYWYum>\"Kp18;");
      element0.elementSiblingIndex();
      Tag tag0 = document0.tag();
      Tag.valueOf("1oR?pYWYum>\"Kp18;");
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      tag0.getName();
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "1oR?pYWYum>\"Kp18;", attributes0);
      tag0.getName();
      // Undeclared exception!
      try { 
        formElement0.addChildren((Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      CDataNode cDataNode1 = (CDataNode)cDataNode0.text("Ysn@C1xL8j1@7mw");
      StringBuilder stringBuilder0 = new StringBuilder(48);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      cDataNode1.outerHtmlTail(stringBuilder0, 1241, document_OutputSettings4);
      cDataNode1.isBlank();
      cDataNode1.setSiblingIndex(2259);
      cDataNode0.doClone(cDataNode1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z O5");
      HttpConnection httpConnection0 = new HttpConnection();
      document1.doClone(document0);
      int int0 = 2294;
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2294);
      Document document2 = document1.connection(connection0);
      document2.prependChild(document1);
      int int1 = 0;
      HttpConnection httpConnection1 = new HttpConnection();
      // Undeclared exception!
      document1.attr("Content-Encoding", "application/x-www-form-urlencoded");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#text");
      document1.doClone(document0);
      int int0 = 2294;
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2294);
      Document document2 = document1.connection(connection0);
      document2.prependChild(document1);
      document2.unwrap();
      int int1 = 0;
      document1.equals((Object) null);
      HttpConnection httpConnection1 = new HttpConnection();
      Stack<Node> stack0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        httpConnection1.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#text");
      document1.doClone(document0);
      document1.equals((Object) null);
      HttpConnection httpConnection0 = new HttpConnection();
      Stack<Node> stack0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        httpConnection0.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "< lf";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DataNode dataNode0 = new DataNode("< lf");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      DataNode dataNode1 = dataNode0.clone();
      Node node0 = dataNode1.shallowClone();
      node0.outerHtml();
      DataNode dataNode2 = dataNode1.setWholeData("< lf");
      // Undeclared exception!
      try { 
        dataNode2.replaceChild(dataNode0, dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = "x\"I<(IW";
      Document document0 = new Document("x\"I<(IW");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.attributesSize();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      document0.charset(charset0);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document1.filter(nodeFilter0);
      document1.hasClass("oa[ST");
      String string1 = "abs:";
      // Undeclared exception!
      try { 
        document3.attr("abs:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser.parseBodyFragment("abs:mh,2h/+5~o-R~]{:Uj<", "abs:mh,2h/+5~o-R~]{:Uj<");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Document document0 = Parser.parse("org.jsoup.nodes.Node", "Esyw LQ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Parser.unescapeEntities("f", false);
      Pattern.compile("f");
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("org.jsoup.nodes.Node$OuterHtmlVisitor");
      evaluator_AttributeStarting0.toString();
      TextNode.stripLeadingWhitespace("abs:charset");
      document0.getElementsByAttributeValue("abs:charset", "org.jsoup.nodes.Node");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      document1.doClone(document0);
      int int0 = 2294;
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2294);
      Document document2 = document1.connection(connection0);
      Element element0 = document2.prependChild(document1);
      Node node0 = document2.unwrap();
      int int1 = 0;
      HttpConnection httpConnection1 = new HttpConnection();
      Stack<Node> stack0 = new Stack<Node>();
      Node[] nodeArray0 = new Node[7];
      Element element1 = document0.appendChild(document1);
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document2;
      nodeArray0[6] = node0;
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$F1[[g>q^2b", "$F1[[g>q^2b");
      HttpConnection httpConnection0 = new HttpConnection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Connection connection0 = httpConnection0.followRedirects(true);
      Document document1 = document0.connection(connection0);
      Document document2 = document1.clone();
      document2.absUrl("Content-Type");
      document1.hasText();
      document2.wrap("abs:method");
      document0.quirksMode();
      HttpCookieStore.Empty httpCookieStore_Empty0 = new HttpCookieStore.Empty();
      httpConnection0.cookieStore((CookieStore) httpCookieStore_Empty0);
      Element element0 = document0.empty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        element0.getElementsContainingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("abs:org.eclipse.jetty.io.ssl.SslHandshakeListener$Event", "org.jsoup.nodes.Node");
      Element element0 = document0.firstElementSibling();
      element0.getElementsByClass("org.jsoup.nodes.Node");
      document0.childNodeSize();
      Comment comment0 = new Comment("]olxsW3");
      Comment comment1 = comment0.setData("{D5I'eFQ)'OqMK");
      Comment comment2 = comment1.clone();
      XmlDeclaration xmlDeclaration0 = comment2.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      xmlDeclaration1.name();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document2 = (Document)document1.doClone(document0);
      int int0 = 2294;
      HttpConnection httpConnection1 = (HttpConnection)httpConnection0.proxy("<' t{JlOZUS", 2294);
      Document document3 = document1.connection((Connection) httpConnection1);
      document3.prependChild(document1);
      document3.unwrap();
      int int1 = 0;
      HttpConnection httpConnection2 = new HttpConnection();
      document2.after("head");
      Stack<Node> stack0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        httpConnection2.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Document.createShell("Ezv");
      String string0 = "meta";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.hasAttr("meta");
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = parser1.parseInput("h<2&{", "h<2&{");
      document0.lastElementSibling();
      document0.getAllElements();
      Document document1 = (Document)document0.attr("7v2A+E[1C'}S^VDxJ:", false);
      document1.removeAttr("h<2&{");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      String string0 = "Cannot upgrade: ";
      DataNode dataNode0 = new DataNode("Cannot upgrade: ");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      DataNode dataNode1 = dataNode0.setWholeData("Cannot upgrade: ");
      DataNode dataNode2 = dataNode0.clone();
      dataNode1.toString();
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter1).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      dataNode2.filter(nodeFilter1);
      String string1 = ".]H9I3";
      // Undeclared exception!
      try { 
        dataNode1.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("U,");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element0 = document0.appendElement("U,");
      element0.tagName();
      element0.clearAttributes();
      Tag tag0 = Tag.valueOf("-]:");
      CDataNode cDataNode0 = new CDataNode("U,");
      CDataNode cDataNode1 = cDataNode0.clone();
      Attributes attributes0 = cDataNode1.attributes();
      Attributes attributes1 = attributes0.clone();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "U,", attributes1);
      StringWriter stringWriter0 = new StringWriter(688);
      stringWriter0.getBuffer();
      int int0 = (-1995);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("u,");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // u,
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      String string0 = "Cannot upgrade: ";
      DataNode dataNode0 = new DataNode("Cannot upgrade: ");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = dataNode0.filter(nodeFilter0);
      NodeFilter.FilterResult nodeFilter_FilterResult1 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult1).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      DataNode dataNode1 = (DataNode)node0.filter(nodeFilter1);
      dataNode1.wrap(".H9I3");
      dataNode1.setSiblingIndex((-2366));
      TextNode.normaliseWhitespace(".H9I3");
      Document.createShell(".H9I3");
      // Undeclared exception!
      try { 
        dataNode0.after(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2365, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      String string0 = "1rxRLU^WBSc";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("1rxRLU^WBSc", false);
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      int int0 = 406;
      xmlDeclaration0.attributes();
      xmlDeclaration1.getWholeDeclaration();
      xmlDeclaration1.setBaseUri("1rxRLU^WBSc");
      xmlDeclaration1.nodeName();
      xmlDeclaration0.doClone(xmlDeclaration1);
      // Undeclared exception!
      try { 
        xmlDeclaration0.childNode(406);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 406
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Parser.parseBodyFragment("abs:", "abs:");
      Parser parser2 = parser1.setTrackErrors(2293);
      parseSettings0.normalizeTag("oUJmk");
      Document document0 = parser2.parseInput("org.jsoup.select.Evaluator$MatchText", "org.jsoup.select.Evaluator$MatchText");
      document0.childNodesAsArray();
      document0.children();
      document0.updateMetaCharsetElement();
      document0.getElementsByIndexGreaterThan((-2112));
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      // Undeclared exception!
      try { 
        document_OutputSettings2.indentAmount((-2112));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Comment comment0 = new Comment("key=");
      Comment comment1 = comment0.setData("A{_d~|8)V");
      Comment comment2 = comment1.clone();
      comment2.setData(")0{h\"5C'[K");
      Document document0 = new Document("org.eclipse.jetty.util.Scanner");
      Element element0 = document0.toggleClass("abs:class");
      element0.childrenSize();
      Pattern pattern0 = Pattern.compile("key=", 0);
      document0.getElementsByAttributeValueMatching("abs:class", pattern0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = new Document("InTableText");
      document0.previousSibling();
      document0.getElementsByAttributeValueMatching("InTableText", "InTableText");
      document0.normalise();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      DataNode dataNode0 = new DataNode("org.jsoup.nodes.Node");
      document0.parentNode();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JKw~9]K{/E)p>Q~z^");
      String string0 = "1oR?pYWYum>\"Kp18;";
      Document document0 = Parser.parseBodyFragment("1oR?pYWYum>\"Kp18;", "1oR?pYWYum>\"Kp18;");
      Element element0 = document0.prependText("1oR?pYWYum>\"Kp18;");
      element0.elementSiblingIndex();
      document0.tag();
      Tag.valueOf("1oR?pYWYum>\"Kp18;");
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      document0.outerHtml();
      cDataNode0.attributes();
      // Undeclared exception!
      try { 
        document0.removeChild(element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      document1.doClone(document0);
      int int0 = 2294;
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2294);
      Document document2 = document1.connection(connection0);
      document2.prependChild(document1);
      document2.unwrap();
      int int1 = 0;
      HttpConnection httpConnection1 = new HttpConnection();
      List<Node> list0 = new Stack<Node>();
      // Undeclared exception!
      try { 
        httpConnection1.post();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "1rxRLU^WBSc";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("1rxRLU^WBSc", false);
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      xmlDeclaration1.clearAttributes();
      // Undeclared exception!
      try { 
        xmlDeclaration0.addChildren(406, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.childNodes();
      CDataNode cDataNode0 = new CDataNode((String) null);
      documentType0.name();
      CDataNode cDataNode1 = (CDataNode)cDataNode0.clone();
      cDataNode1.toString();
      CDataNode cDataNode2 = (CDataNode)cDataNode1.clone();
      DataNode dataNode0 = new DataNode("PUBLIC");
      DataNode dataNode1 = dataNode0.setWholeData("<![CDATA[null]]>");
      documentType0.reparentChild(cDataNode0);
      DataNode dataNode2 = dataNode1.clone();
      DataNode dataNode3 = dataNode2.setWholeData("#text");
      cDataNode1.setParentNode(documentType0);
      dataNode2.attributesSize();
      String string0 = "NFy=*N2?w";
      String string1 = "accept";
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) cDataNode1;
      nodeArray0[1] = (Node) cDataNode2;
      nodeArray0[2] = (Node) dataNode1;
      nodeArray0[3] = (Node) dataNode3;
      nodeArray0[4] = (Node) documentType0;
      // Undeclared exception!
      try { 
        dataNode1.addChildren(33, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "content";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("content", true);
      Comment comment0 = new Comment("content");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      comment0.forEachNode(consumer0);
      Comment comment1 = comment0.setData("content");
      Comment comment2 = comment1.clone();
      // Undeclared exception!
      try { 
        comment2.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      String string0 = "legend";
      CDataNode cDataNode0 = new CDataNode("legend");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.toString();
      cDataNode0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "x\"I<(IW";
      Document document0 = new Document("x\"I<(IW");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      Document document4 = document3.shallowClone();
      document0.nextSibling();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.attributesSize();
      document4.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        Charset.forName("#text");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #text
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String string0 = "1rxRLU^WBSc";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("1rxRLU^WBSc", false);
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      Node node0 = xmlDeclaration1.clearAttributes();
      node0.attributes();
      xmlDeclaration1.getWholeDeclaration();
      xmlDeclaration1.setBaseUri("1rxRLU^WBSc");
      xmlDeclaration1.nodeName();
      xmlDeclaration0.doClone(node0);
      int int0 = 70;
      // Undeclared exception!
      try { 
        xmlDeclaration0.childNode(70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 70
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Comment comment0 = new Comment("bS8{gxTxbq3:8mg:_1");
      comment0.asXmlDeclaration();
      Node node0 = null;
      // Undeclared exception!
      try { 
        comment0.setParentNode((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("(21m@fPw");
      Document document1 = document0.normalise();
      Element element0 = document1.appendChild(document0);
      document0.removeChild(document1);
      Element element1 = document0.tagName("(21m@fPw");
      Element element2 = document0.doClone(element1);
      element1.prependText("(21m@fPw");
      element2.getElementsByAttribute("org.eclipse.jetty.io.ssl.SslHandshakeListener$Event");
      Evaluator.ContainsWholeOwnText evaluator_ContainsWholeOwnText0 = new Evaluator.ContainsWholeOwnText("(21m@fPw");
      element0.is((Evaluator) evaluator_ContainsWholeOwnText0);
      int int0 = 43;
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element2;
      // Undeclared exception!
      try { 
        document1.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("abs:", "abs:");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      Element element0 = document0.selectFirst((Evaluator) evaluator_IsFirstOfType0);
      Element element1 = element0.tagName("abs:");
      element1.absUrl("org.jsoup.nodes.Node");
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueNot("abs:", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell("](\"oL{TfE{M[U+^R4");
      Element element0 = document0.child(0);
      element0.removeAttr("](\"oL{TfE{M[U+^R4");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("#text");
      TextNode textNode1 = new TextNode("Y =&(4n");
      textNode0.doClone(textNode1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      document_OutputSettings0.prepareEncoder();
      document_OutputSettings1.encoder();
      document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      // Undeclared exception!
      try { 
        textNode0.indent((Appendable) null, 0, document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("IOd/e!OR]@<");
      Element element0 = document0.attr("org.jsoup.nodes.Node$OuterHtmlVisitor", "");
      element0.wrap("IOd/e!OR]@<");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      Comment comment0 = new Comment("68y6");
      Comment comment1 = comment0.clone();
      Comment comment2 = comment1.setData("9oUJmk/bq-12Dq");
      XmlDeclaration xmlDeclaration0 = comment2.asXmlDeclaration();
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      nodeArray0[1] = (Node) xmlDeclaration1;
      // Undeclared exception!
      try { 
        document0.insertChildren(2790, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String string0 = "RK3wTL&PN4CQ}j";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment("RK3wTL&PN4CQ}j", "");
      document0.tag();
      String string2 = "dOe";
      Attributes attributes0 = null;
      CDataNode cDataNode0 = new CDataNode("");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.replaceChild(leafNode0, leafNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Comment comment0 = new Comment("");
      comment0.previousSibling();
      Comment comment1 = comment0.setData((String) null);
      // Undeclared exception!
      try { 
        comment1.asXmlDeclaration();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Comment", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.nodeName();
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = "]3^pF _Om";
      DataNode dataNode0 = new DataNode("]3^pF _Om");
      DataNode dataNode1 = dataNode0.clone();
      DataNode dataNode2 = dataNode1.setWholeData("abs:");
      dataNode2.getWholeData();
      dataNode2.clearAttributes();
      Document.createShell("abs:");
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.clone();
      StringBuilder stringBuilder0 = new StringBuilder("V)Pt");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      dataNode1.indent(stringBuilder0, 19, document_OutputSettings0);
      StringBuilder stringBuilder1 = stringBuilder0.append(1L);
      int int0 = (-1720);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1720), false);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1720
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "";
      DataNode dataNode0 = new DataNode("");
      String string1 = "s W9(m\"i2(cC`J)t>";
      dataNode0.setParentNode(dataNode0);
      int int0 = 1;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      dataNode0.childNodesCopy();
      dataNode0.clearAttributes();
      // Undeclared exception!
      try { 
        dataNode0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Node");
      document0.toString();
      document0.clearAttributes();
      document0.toggleClass("\"~`wO</I*Fc'");
      document0.outerHtml();
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.siblingNodes();
      Document document1 = (Document)document0.clearAttributes();
      document1.tagName("1nfRrmJQ.Q7W^N-q");
      // Undeclared exception!
      try { 
        document1.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("");
      MockFile mockFile0 = new MockFile(":jTj.cxt;h[x#", ".f|)j>");
      mockFile0.toURI();
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      document0.html((OutputStreamWriter) mockFileWriter0);
      Node[] nodeArray0 = new Node[0];
      document0.addChildren((-2127), nodeArray0);
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType(0, 0);
      evaluator_IsNthLastOfType0.matches(document0, document0);
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
      document0.hasParent();
      document0.title();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf(".f|)j>", parseSettings0);
      Attributes attributes0 = document0.attributes();
      FormElement formElement0 = new FormElement(tag0, ".f|)j>", attributes0);
      FormElement formElement1 = formElement0.clone();
      FormElement formElement2 = formElement1.addElement(formElement0);
      formElement2.formData();
      CDataNode cDataNode0 = new CDataNode("W@W3V1=a_@DsP1*~");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      cDataNode0.outerHtmlHead(mockFileWriter0, 0, document_OutputSettings1);
      Element element0 = formElement2.removeClass("");
      formElement2.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K;!H", "K;!H");
      Element element0 = document0.removeClass("{!jWR6");
      element0.attr("{!jWR6");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "x\"I<(IW";
      Document document0 = new Document("x\"I<(IW");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.attributesSize();
      // Undeclared exception!
      try { 
        Charset.forName("#text");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #text
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.childNodes();
      CDataNode cDataNode0 = new CDataNode((String) null);
      documentType0.name();
      CDataNode cDataNode1 = (CDataNode)cDataNode0.clone();
      cDataNode1.toString();
      cDataNode1.clone();
      DataNode dataNode0 = new DataNode("PUBLIC");
      DataNode dataNode1 = dataNode0.setWholeData("<![CDATA[null]]>");
      documentType0.reparentChild(cDataNode0);
      DataNode dataNode2 = dataNode1.clone();
      dataNode2.setWholeData("#text");
      cDataNode1.setParentNode(documentType0);
      dataNode2.attributesSize();
      Document document0 = Parser.parse("NFy=*N2?w", "accept");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Document document2 = document1.normalise();
      Tag tag0 = document2.tag();
      Element element0 = new Element(tag0, "NFy=*N2?w");
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = null;
      try {
        evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("NFy=*N2?w", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.tagName("`sQ.NFkI");
      // Undeclared exception!
      try { 
        document0.replaceWith(element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "Include Predicate";
      Document document0 = Parser.parse("Include Predicate", "l{==2zL_;)");
      DataNode dataNode0 = new DataNode("l{==2zL_;)");
      DataNode dataNode1 = dataNode0.clone();
      // Undeclared exception!
      try { 
        document0.replaceWith(dataNode1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Comment comment0 = new Comment("V5i8=txXan");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = comment0.traverse(nodeVisitor0);
      node0.shallowClone();
      comment0.isXmlDeclaration();
      CDataNode cDataNode0 = new CDataNode("zz?C/8sY");
      cDataNode0.nodeName();
      cDataNode0.setParentNode(comment0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = "$F";
      DocumentType documentType0 = new DocumentType("$F", "$F", "$F");
      DataNode dataNode0 = new DataNode("PUBLIC");
      int int0 = 20;
      StringWriter stringWriter0 = new StringWriter(20);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "PUBLIC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      dataNode0.outerHtmlTail(stringWriter1, 20, document_OutputSettings4);
      // Undeclared exception!
      try { 
        dataNode0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "1oR?pYWYum>\"Kp18;";
      Document document0 = Parser.parseBodyFragment("1oR?pYWYum>\"Kp18;", "1oR?pYWYum>\"Kp18;");
      Element element0 = document0.prependText("1oR?pYWYum>\"Kp18;");
      element0.elementSiblingIndex();
      Tag tag0 = document0.tag();
      Tag.valueOf("1oR?pYWYum>\"Kp18;");
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      tag0.getName();
      cDataNode0.attributes();
      // Undeclared exception!
      try { 
        document0.removeChild(element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("acti");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Tag tag0 = document2.tag();
      FormElement formElement0 = new FormElement(tag0, "acti", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.removeChild(document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.parser((Parser) null);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('j');
      charArrayWriter1.write(10);
      document1.nextElementSibling();
      document0.outerHtml((Appendable) charArrayWriter1);
      Pattern pattern0 = Pattern.compile("vI");
      Elements elements0 = document1.getElementsMatchingOwnText(pattern0);
      Element element0 = document1.id("n8B8I?$,_Be");
      document1.appendChildren(elements0);
      element0.child(0);
      document1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("9D n&$_,BuDs", "9D n&$_,BuDs");
      Element element0 = document0.prependElement(">!K\fagh'5}");
      document0.getElementsByClass("s6#;K[G=2ZK8");
      element0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = "< LFA|eP!I\"FE5Kc8?";
      Document document0 = new Document("< LFA|eP!I\"FE5Kc8?");
      document0.getAllElements();
      Element element0 = document0.prepend("< LFA|eP!I\"FE5Kc8?");
      element0.val();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("max threads (");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Parser parser0 = Parser.htmlParser();
      int int0 = 440;
      Parser parser1 = parser0.setTrackErrors(440);
      Document document2 = document1.parser(parser1);
      Document document3 = document2.shallowClone();
      document2.shallowClone();
      Document document4 = (Document)document3.appendChild(document0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parser1.settings(parseSettings0);
      document4.shouldIndent(document_OutputSettings0);
      document4.prependChild(document2);
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      HttpConnection httpConnection0 = new HttpConnection();
      Document document1 = document0.connection((Connection) httpConnection0);
      String string1 = "";
      document0.reparentChild(document1);
      document1.getElementsContainingOwnText("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      // Undeclared exception!
      try { 
        document1.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      String string0 = ">\\6#w_zC<";
      Document document0 = Parser.parse(">\u0006#w_zC<", "");
      document0.cssSelector();
      document0.html();
      document0.childNodesCopy();
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = ">\\6#w_zC<";
      Document document0 = Parser.parse(">\u0006#w_zC<", ">\u0006#w_zC<");
      document0.cssSelector();
      document0.html();
      document0.childNodesCopy();
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("abs:");
      CDataNode cDataNode1 = cDataNode0.clone();
      CDataNode cDataNode2 = (CDataNode)cDataNode1.text("!+P_kSv,X");
      StringWriter stringWriter0 = new StringWriter(1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      document_OutputSettings2.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.maxPaddingWidth(1);
      document_OutputSettings4.maxPaddingWidth(1);
      cDataNode2.indent(stringWriter0, 1, document_OutputSettings4);
      CDataNode cDataNode3 = (CDataNode)cDataNode2.clone();
      cDataNode3.splitText(1);
      Document document0 = new Document("");
      Document document1 = (Document)document0.firstElementSibling();
      document1.childNodesAsArray();
      Document document2 = (Document)document0.toggleClass("");
      Document document3 = (Document)document1.lastElementSibling();
      DataNode dataNode0 = new DataNode("doctype-public");
      DataNode dataNode1 = dataNode0.setWholeData("$6%`");
      DataNode dataNode2 = dataNode1.clone();
      dataNode2.nodeName();
      document3.toString();
      Document document4 = (Document)document0.appendTo(document2);
      document2.reparentChild(document4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("*");
      String string0 = (String)cDataNode0.value;
      cDataNode0.hasSameValue("*");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode0.nodelistChanged();
      cDataNode1.reparentChild(cDataNode0);
      cDataNode0.childNodesCopy();
      // Undeclared exception!
      try { 
        cDataNode1.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "JXf8TO";
      Document document0 = Parser.parse("JXf8TO", "#cdata");
      document0.attributes();
      Document document1 = document0.clone();
      document1.toString();
      // Undeclared exception!
      try { 
        document0.after("registerDir {} {}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          Document document0 = Parser.parseBodyFragment("STARTED", "");
          HttpConnection httpConnection0 = new HttpConnection();
          httpConnection0.data("STARTED", "Skivx([-");
          document0.getElementsByAttribute("org.jsoup.nodes.Node$OuterHtmlVisitor");
          httpConnection0.data("STARTED", "HqK[&:F");
          FileDescriptor fileDescriptor0 = new FileDescriptor();
          MockFileWriter mockFileWriter0 = null;
          try {
            mockFileWriter0 = new MockFileWriter(fileDescriptor0);
            fail("Expecting exception: SecurityException");
          
          } catch(SecurityException e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"writeFileDescriptor\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
             // java.io.FileOutputStream.<init>(FileOutputStream.java:245)
             // java.io.FileWriter.<init>(FileWriter.java:116)
             // org.evosuite.runtime.mock.java.io.MockFileWriter.<init>(MockFileWriter.java:79)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
             // sun.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
             // sun.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
             // java.lang.reflect.Constructor.newInstance(Constructor.java:423)
             // org.evosuite.testcase.statements.ConstructorStatement$1.execute(ConstructorStatement.java:233)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.ConstructorStatement.execute(ConstructorStatement.java:188)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.evosuite.runtime.sandbox.MSecurityManager", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("$}>5lJFuhBxcfiCa;Z)", "$}>5lJFuhBxcfiCa;Z)");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Element element0 = document0.appendText("");
      document0.className();
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.outerHtml();
      String string0 = "FqIu `:+8XZV?";
      document1.doSetBaseUri("FqIu `:+8XZV?");
      String string1 = "9;4(\"";
      element0.children();
      document1.firstElementSibling();
      element0.getElementById("9;4(\"");
      // Undeclared exception!
      try { 
        document1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String string0 = ">flush {}";
      DocumentType documentType0 = new DocumentType(">flush {}", ">flush {}", ">flush {}");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.firstElementSibling();
      document1.addClass("SYSTEM");
      Node[] nodeArray0 = new Node[0];
      document1.addChildren(nodeArray0);
      document1.childrenSize();
      document1.childNodes();
      // Undeclared exception!
      try { 
        documentType0.replaceChild(document1, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Comment comment0 = new Comment("key=");
      Comment comment1 = comment0.setData("A{_d~|8)V");
      Comment comment2 = comment1.clone();
      comment2.setData(")0{h\"5C'[K");
      Document document0 = new Document("org.eclipse.jetty.util.Scanner");
      document0.toggleClass("abs:class");
      document0.childrenSize();
      Pattern pattern0 = Pattern.compile("key=", 0);
      document0.getElementsByAttributeValueMatching("abs:class", pattern0);
      CDataNode cDataNode0 = new CDataNode("org.eclipse.jetty.util.Scanner");
      CDataNode cDataNode1 = cDataNode0.clone();
      MockFileWriter mockFileWriter0 = new MockFileWriter("A{_d~|8)V", true);
      mockFileWriter0.flush();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      cDataNode1.outerHtmlTail(mockFileWriter0, 0, document_OutputSettings0);
      // Undeclared exception!
      try { 
        comment2.replaceChild(comment1, comment1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = "Cannot upgrade: ";
      DataNode dataNode0 = new DataNode("Cannot upgrade: ");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      dataNode0.filter(nodeFilter0);
      DataNode dataNode1 = dataNode0.clone();
      NodeFilter nodeFilter1 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter1).head(any(org.jsoup.nodes.Node.class) , anyInt());
      DataNode dataNode2 = (DataNode)dataNode1.filter(nodeFilter1);
      dataNode2.wrap(".H9I3");
      dataNode2.setSiblingIndex((-2366));
      dataNode1.getWholeData();
      Document.createShell("Cannot upgrade: ");
      // Undeclared exception!
      try { 
        dataNode0.after((Node) dataNode1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = "Must be false";
      Document document0 = Parser.parse("Must be false", "Must be false");
      // Undeclared exception!
      try { 
        document0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Comment comment0 = new Comment("*");
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("", "");
      Document document1 = document0.shallowClone();
      // Undeclared exception!
      try { 
        document1.after((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("s#9G~RXl67eq3dL");
      document0.getElementsContainingText("s#9G~RXl67eq3dL");
      AttributesMap attributesMap0 = new AttributesMap();
      AttributesMap attributesMap1 = new AttributesMap(attributesMap0);
      attributesMap1.removeAttribute("");
      Set<String> set0 = attributesMap1.getAttributeNameSet();
      document0.classNames(set0);
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.clone();
      String string0 = "Y!4`$#))S1Rer=id";
      // Undeclared exception!
      try { 
        document0.absUrl("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("XR_cj_[h]Qa");
      cDataNode0.getWholeText();
      TextNode textNode0 = cDataNode0.splitText(0);
      TextNode.stripLeadingWhitespace("org.jsoup.nodes.Entities$EscapeMode");
      textNode0.shallowClone();
      String string0 = "";
      // Undeclared exception!
      try { 
        textNode0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Comment comment0 = new Comment("th");
      comment0.setData("th");
      // Undeclared exception!
      try { 
        comment0.before("th");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("E]P-Bw@#9;D{`", "org.jsoup.nodes.Node", "2uVu:s]y");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) documentType0;
      nodeArray0[1] = (Node) documentType0;
      // Undeclared exception!
      try { 
        documentType0.addChildren(nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = "p?l0HZ`w'K7qc7zj,Y";
      DataNode dataNode0 = new DataNode("p?l0HZ`w'K7qc7zj,Y");
      DataNode dataNode1 = dataNode0.setWholeData("");
      DataNode dataNode2 = dataNode1.clone();
      // Undeclared exception!
      try { 
        dataNode2.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("O");
      document0.tagName();
      document0.is("O");
      document0.addClass("method");
      // Undeclared exception!
      try { 
        document0.after("O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("Mk1-Ea");
      Element element0 = document0.head();
      Element element1 = element0.appendChild(document0);
      element0.dataset();
      document0.hashCode();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('?');
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      element1.outerHtmlTail(charArrayWriter1, 10, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Comment comment0 = new Comment("XM");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        comment0.replaceChild((Node) null, (Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("5C_=+L Jm`E#]s", parseSettings0);
      parseSettings0.normalizeTag("5C_=+L Jm`E#]s");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("5C_=+L Jm`E#]s", true);
      Attribute attribute0 = new Attribute("Dropped duplicate attribute(s) in tag [%s]", "5C_=+L Jm`E#]s");
      Attributes attributes2 = attributes1.put(attribute0);
      Tag.valueOf("?ap3qup&\"&d");
      Attributes attributes3 = attributes2.clone();
      attributes3.normalize();
      FormElement formElement0 = new FormElement(tag0, "Dropped duplicate attribute(s) in tag [%s]", attributes3);
      FormElement formElement1 = formElement0.clone();
      formElement0.nextSibling();
      formElement1.nextElementSiblings();
      formElement0.hasChildNodes();
      Comment comment0 = new Comment("G7,a|b6?2hMip");
      Comment comment1 = comment0.setData("_9o");
      Comment comment2 = comment1.clone();
      comment2.toString();
      // Undeclared exception!
      try { 
        formElement0.replaceChild((Node) null, formElement1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document(",Qm\",c");
      document0.hasText();
      document0.classNames();
      document0.quirksMode();
      document0.prependText(",Qm\",c");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("", "", "");
      documentType0.nodeName();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("abs:");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Node node0 = document1.doClone(document0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      node0.forEachNode(consumer0);
      node0.childNodes();
      document0.siblingIndex = 80;
      Element element0 = document0.appendText("");
      document1.empty();
      // Undeclared exception!
      try { 
        element0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "rlI6l|1?nsKo");
      // Undeclared exception!
      try { 
        document0.childNode(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element0 = document0.forEachNode(consumer0);
      element0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.forEachNode((Consumer<? super Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.lastElementSibling();
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("9bQK7v*nw!S");
      Document document1 = document0.normalise();
      Document document2 = document1.shallowClone();
      document2.updateMetaCharsetElement();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.setBaseUri("");
      cDataNode1.clone();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GP8nXsFzB!wh]F,^)", "GP8nXsFzB!wh]F,^)");
      Document document1 = document0.parser((Parser) null);
      Document document2 = document1.clone();
      // Undeclared exception!
      try { 
        document2.selectFirst("GP8nXsFzB!wh]F,^)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'GP8nXsFzB!wh]F,^)': unexpected token at '!wh]F,^)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",!\"");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ",!\"", attributes0);
      pseudoTextElement0.childrenSize();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DataNode dataNode0 = new DataNode("+ )^wn QuLB");
      DataNode dataNode1 = dataNode0.clone();
      dataNode1.wrap("+ )^wn QuLB");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "ph!07`-xC5~U/Gn.";
      Document document0 = new Document((String) null);
      document0.previousElementSiblings();
      Document document1 = document0.clone();
      Element element0 = document0.appendTo(document1);
      element0.after((Node) document1);
      element0.nextElementSiblings();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CDataNode cDataNode0 = new CDataNode("ph!07`-xC5~U/Gn.");
      cDataNode0.text();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      document1.before("ph!07`-xC5~U/Gn.");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "RK3wTL&PN4CQ}j";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment("RK3wTL&PN4CQ}j", "");
      document0.tag();
      String string2 = "dOe";
      Attributes attributes0 = null;
      CDataNode cDataNode0 = new CDataNode("");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      leafNode0.siblingNodes();
      // Undeclared exception!
      try { 
        document0.replaceChild(leafNode0, leafNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataNode dataNode0 = new DataNode("mB");
      dataNode0.hasSameValue("mB");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataNode dataNode1 = dataNode0.clone();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = dataNode0.filter(nodeFilter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dataNode1.setSiblingIndex((-1));
      dataNode1.toString();
      Element element0 = new Element("osp:");
      element0.nodelistChanged();
      element0.doClone(node0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "RK3wTL&PN4CQ}j";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment("RK3wTL&PN4CQ}j", "");
      document0.tag();
      String string2 = "dOe";
      Attributes attributes0 = null;
      CDataNode cDataNode0 = new CDataNode("");
      LeafNode leafNode0 = cDataNode0.doClone(document0);
      leafNode0.attributesSize();
      // Undeclared exception!
      try { 
        document0.replaceChild(leafNode0, leafNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DataNode dataNode0 = new DataNode("mB");
      dataNode0.hasSameValue("mB");
      DataNode dataNode1 = dataNode0.clone();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Node node0 = dataNode0.filter(nodeFilter0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      dataNode1.setSiblingIndex((-1));
      dataNode0.childNodes();
      dataNode1.toString();
      dataNode1.toString();
      Element element0 = new Element("osp:");
      element0.nodelistChanged();
      element0.doClone(node0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Parser.parse("I^/4z 6GQ;_@kvy!2", "I^/4z 6GQ;_@kvy!2");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      HttpConnection httpConnection0 = new HttpConnection();
      Document document2 = document1.connection((Connection) httpConnection0);
      document2.appendElement("I^/4z 6GQ;_@kvy!2");
      Document document3 = (Document)document0.clearAttributes();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document3.forEachNode(consumer0);
      // Undeclared exception!
      try { 
        document1.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Comment comment0 = new Comment("key=");
      Comment comment1 = comment0.setData("A{_d~|8)V");
      Comment comment2 = comment1.clone();
      Comment comment3 = comment2.setData(")0{h\"5C'[K");
      Document document0 = new Document("Hrg.eclip<e.jTtty.util.Scanner");
      Element element0 = document0.toggleClass("abs:class");
      element0.childrenSize();
      Pattern pattern0 = Pattern.compile("key=", 0);
      document0.getElementsByAttributeValueMatching("abs:class", pattern0);
      CDataNode cDataNode0 = new CDataNode("Hrg.eclip<e.jTtty.util.Scanner");
      CDataNode cDataNode1 = cDataNode0.clone();
      MockFileWriter mockFileWriter0 = new MockFileWriter("A{_d~|8)V", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      cDataNode1.outerHtmlTail(mockFileWriter0, 0, document_OutputSettings0);
      comment3.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$F1[[g>q^2b", "$F1[[g>q^2b");
      HttpConnection httpConnection0 = new HttpConnection();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Connection connection0 = httpConnection0.followRedirects(true);
      Document document1 = document0.connection(connection0);
      Document document2 = document1.clone();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      document2.absUrl("Content-Type");
      document1.hasText();
      document2.wrap("abs:method");
      document0.quirksMode();
      HttpCookieStore.Empty httpCookieStore_Empty0 = new HttpCookieStore.Empty();
      httpConnection0.cookieStore((CookieStore) httpCookieStore_Empty0);
      document1.removeAttr("abs:");
      Element element0 = document0.empty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        element0.getElementsContainingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse(">\u0006#w_zC<", "");
      document0.cssSelector();
      document0.getElementsByAttributeValue("#root", "#root");
      Pattern pattern0 = Pattern.compile("ddg");
      document0.getElementsMatchingOwnText(pattern0);
      document0.childNodesCopy();
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("<' t{JlOZUS");
      Document document1 = document0.clone();
      HttpConnection httpConnection0 = new HttpConnection();
      document1.doClone(document0);
      int int0 = 2304;
      Connection connection0 = httpConnection0.proxy("<' t{JlOZUS", 2304);
      Document document2 = document1.connection(connection0);
      document2.prependChild(document1);
      document2.unwrap();
      int int1 = 0;
      HttpConnection httpConnection1 = new HttpConnection();
      Stack<Node> stack0 = new Stack<Node>();
      Document document3 = Document.createShell("multipart/form-data");
      document3.selectXpath("multipart/form-data");
      // Undeclared exception!
      try { 
        document3.before((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1oR?pYWYum>\"Kp18;", "1oR?pYWYum>\"Kp18;");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      
      int int0 = document1.elementSiblingIndex();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, int0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      
      Tag tag0 = document1.tag();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(tag0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      
      Tag tag1 = Tag.valueOf("1oR?pYWYum>\"Kp18;");
      assertNotSame(tag1, tag0);
      assertFalse(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag1.formatAsBlock());
      assertEquals("1or?pywyum>\"kp18;", tag1.normalName());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertEquals("1oR?pYWYum>\"Kp18;", tag1.toString());
      
      String string0 = document1.attr("abs:^(");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      
      CDataNode cDataNode0 = new CDataNode("1oR?pYWYum>\"Kp18;");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      String string1 = tag0.getName();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertEquals("#root", string1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "1oR?pYWYum>\"Kp18;", attributes0);
      assertFalse(tag0.equals((Object)tag1));
      assertNotNull(formElement0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      
      String string2 = tag0.getName();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(tag0, tag1);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertEquals("#root", string2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      
      FormElement formElement1 = formElement0.clone();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(tag0, tag1);
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(formElement1.equals((Object)formElement0));
      assertNotNull(formElement1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#root", formElement1.normalName());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      
      FormElement formElement2 = formElement1.addElement(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(tag0, tag1);
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement0, formElement2);
      assertSame(formElement1, formElement2);
      assertNotSame(formElement1, formElement0);
      assertSame(formElement2, formElement1);
      assertNotSame(formElement2, formElement0);
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(formElement0.equals((Object)formElement1));
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement0));
      assertNotNull(formElement2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("1oR?pYWYum>\"Kp18;", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("#root", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("#root", formElement1.normalName());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement2.siblingIndex());
      assertFalse(formElement2.isBlock());
      assertFalse(formElement2.hasParent());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("#root", formElement2.normalName());
      
      // Undeclared exception!
      try { 
        formElement2.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: 1oR?pYWYum>\"Kp18;
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      String string0 = "";
      DataNode dataNode0 = new DataNode("");
      assertNotNull(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      
      String string1 = "s W9(m\"i2(cC`J)t>";
      DataNode dataNode1 = (DataNode)dataNode0.wrap("s W9(m\"i2(cC`J)t>");
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertNotNull(dataNode1);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      
      Node node0 = dataNode1.nextSibling();
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertNull(node0);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      
      dataNode1.setParentNode(dataNode0);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertTrue(dataNode1.hasParent());
      assertEquals("#data", dataNode1.nodeName());
      
      Appendable appendable0 = null;
      int int0 = 1;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("<!LFAOeP!I\"FE5Kc8?");
      document0.getAllElements();
      Element element0 = document0.prepend("<!LFAOeP!I\"FE5Kc8?");
      element0.val();
      Element element1 = element0.appendText("");
      document0.getElementsContainingText("<!LFAOeP!I\"FE5Kc8?");
      element1.hasAttr("");
      document0.wholeOwnText();
      element0.html();
      TextNode.createFromEncoded("8&qE)");
      Parser parser0 = Parser.htmlParser();
      document0.parser(parser0);
      // Undeclared exception!
      try { 
        Charset.forName("8&qE)");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 8&qE)
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "0*?L(YeSu";
      String string1 = "";
      DocumentType documentType0 = new DocumentType("0*?L(YeSu", "", "0*?L(YeSu");
      documentType0.name();
      // Undeclared exception!
      try { 
        documentType0.after("0*?L(YeSu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
