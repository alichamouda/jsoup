/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:09:26 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.UnsupportedEncodingException;
import java.net.URL;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.LinkedTransferQueue;
import java.util.concurrent.SynchronousQueue;
import java.util.function.Function;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.eclipse.jetty.io.ByteBufferPool;
import org.eclipse.jetty.io.LeakTrackingByteBufferPool;
import org.eclipse.jetty.io.MappedByteBufferPool;
import org.eclipse.jetty.util.InetAddressSet;
import org.eclipse.jetty.util.component.AttributeContainerMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.Consumer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("selected {} {} {} ");
      document0.nextElementSiblings();
      Document document1 = document0.shallowClone();
      Element element0 = document1.text("vLX");
      Elements elements0 = element0.getElementsByIndexLessThan(1583);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.forEachNode(consumer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vLX");
      document1.empty();
      element1.addClass("24}s38/IYaq");
      // Undeclared exception!
      try { 
        element1.appendChildren(elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      Element element2 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2097));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element3 = element1.wrap("br");
      element3.getElementsByAttributeValueMatching("", pattern0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = "9,`";
      Element element4 = element1.prependText("9,`");
      element4.getElementsMatchingText(pattern0);
      element4.firstElementSibling();
      // Undeclared exception!
      try { 
        element2.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Tag tag0 = Tag.valueOf("org.eclipse.jetty.util.CompletableCallback");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, (String) null, attributes0);
      FormElement formElement1 = formElement0.clone();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FormElement formElement2 = formElement1.addElement(formElement0);
      formElement2.baseUri();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      formElement2.nodelistChanged();
      Element element0 = formElement2.filter(nodeFilter0);
      element0.children();
      // Undeclared exception!
      try { 
        formElement0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "%0l=R}K~inl3l5";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "Content-Encoding";
      httpConnection0.data(stringArray0);
      document0.hasText();
      Document document1 = (Document)document0.prependText("");
      document1.childElementsList();
      document1.getElementsByAttributeValue("Content-Encoding", "9*c34D|Z:y}");
      Pattern pattern0 = Pattern.compile("application/x-www-form-urlencoded");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document1.closest((Evaluator) evaluator_Matches0);
      document1.select("Content-Type");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.head();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Element element1 = element0.filter(nodeFilter0);
      Element element2 = element1.doClone(element0);
      element2.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = parser0.parseInput("#root", "#root");
      Document document1 = document0.normalise();
      document1.children();
      Element element0 = document1.empty();
      document0.hasClass("class");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      CDataNode cDataNode0 = new CDataNode("class");
      CDataNode cDataNode1 = cDataNode0.clone();
      linkedList0.add((Node) cDataNode1);
      element0.childNodes = (List<Node>) linkedList0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document1.ensureChildNodes();
      Evaluator evaluator0 = null;
      Pattern pattern0 = Pattern.compile("baseuri");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
      element0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      Element element1 = element0.appendTo(document0);
      // Undeclared exception!
      try { 
        element1.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      Element element2 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element3 = element1.wrap("br");
      element3.absUrl("*iL !;xRO");
      Consumer<Element> consumer0 = (Consumer<Element>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element4 = element3.forEach(consumer0);
      element3.getElementsByAttributeValueMatching("", pattern0);
      String string2 = "9,`";
      Element element5 = element1.prependText("9,`");
      element4.html("Starting java.nio file watching with {}");
      element5.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        element2.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_(L#PrU`#[n:p3{a", ":nth-child(%d)");
      Document document1 = document0.shallowClone();
      // Undeclared exception!
      try { 
        document1.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      pattern0.splitAsStream("Unexpected wrap result ");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      element0.prependText("Unexpected wrap result ");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      document0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = Node.EmptyString;
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stored ");
      document0.appendTo(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings3.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element0 = document0.empty();
      document0.shallowClone();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      document0.wholeOwnText();
      document0.normalName();
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      document0.ownText();
      document0.children();
      Element element1 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Document document1 = (Document)element0.wrap("br");
      element1.firstElementSibling();
      document1.getElementsByAttributeValueMatching("", pattern0);
      document1.body();
      Document document2 = (Document)document0.prependText("9,`");
      document2.getElementsMatchingText(pattern0);
      document0.elementSiblingIndex();
      element0.appendText("9,`");
      element1.hasClass("&F)");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document2.filter(nodeFilter0);
      document1.appendTo(document2);
      // Undeclared exception!
      try { 
        document2.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 5, Size: 4
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)124;
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)105;
      byteArray0[2] = (byte) (-22);
      byteArray0[3] = (byte) (-111);
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "am^q6L_?VM(6P";
      Element element0 = new Element("am^q6L_?VM(6P");
      // Undeclared exception!
      try { 
        element0.forEach((Consumer<? super Element>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document(" stormodV");
      HttpConnection httpConnection0 = new HttpConnection();
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stormodV");
      Element element0 = document0.head();
      document0.appendTo(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings3.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element1 = element0.empty();
      // Undeclared exception!
      element1.is("Content-Encoding");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Pattern.compile("BEX64uT}5%5lVQ3");
      Pattern.compile("SELECTING");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-1881078902));
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("o&]@coiu$f.:", "\"G|9KD*X=30.@06CR9");
      document0.selectFirst((Evaluator) evaluator_IsLastChild0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "#root";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "#root");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      Element element2 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.dataNodes();
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element3 = element1.wrap("br");
      element3.getElementsByAttributeValueMatching("", pattern0);
      String string2 = "9,`";
      Element element4 = element1.prependText("9,`");
      element4.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        element2.after((Node) element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      document0.ownText();
      document0.children();
      Element element1 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element2 = element0.wrap("br");
      element1.firstElementSibling();
      element2.getElementsByAttributeValueMatching("", pattern0);
      Element element3 = document0.prependText("br");
      element3.getElementsMatchingText(pattern0);
      document0.elementSiblingIndex();
      element0.appendText("SnrD{_/zFk%|8YAS");
      element1.hasClass("&F)");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_ENTIRELY;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element3.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        element3.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "%0l=R}K~inl3l5";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "Content-Encoding";
      httpConnection0.data(stringArray0);
      document0.hasText();
      Element element0 = document0.prependText("");
      httpConnection0.ignoreContentType(false);
      element0.getElementsByAttributeValue("Content-Encoding", "9*c34D|Z:y}");
      Pattern pattern0 = Pattern.compile("application/x-www-form-urlencoded");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      element0.closest((Evaluator) evaluator_Matches0);
      document0.childrenSize();
      document0.previousElementSiblings();
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      document0.appendText("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      stringArray0[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "%0l=R}K~inl3l5";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "Content-Encoding";
      document0.hasText();
      document0.prependText("");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("%R@F$|qy", parseSettings0);
      Attributes attributes0 = new Attributes();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%R@F$|qy");
      Attributes attributes1 = attributes0.put("eEJ2Ynj+=o", "");
      FormElement formElement0 = new FormElement(tag0, "%R@F$|qy", attributes1);
      FormElement formElement1 = formElement0.clone();
      Tag.valueOf("eEJ2Ynj+=o", parseSettings0);
      attributes1.hasKeyIgnoreCase("%R@F$|qy");
      formElement1.attr("wz$k 'AvpvGU8", false);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("0:", "0:");
      document0.siblingIndex = 1;
      Pattern pattern0 = Pattern.compile("", 0);
      pattern0.split((CharSequence) "");
      document0.getElementsByAttributeValueMatching("", pattern0);
      Comment comment0 = new Comment("");
      document0.appendChild(comment0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("s+");
      CDataNode cDataNode0 = new CDataNode("s+");
      cDataNode0.attributes();
      Document document0 = Document.createShell("RoKjn,!(o{PX{ID3#mn");
      Document document1 = document0.clone();
      Document document2 = document0.clone();
      Element element0 = document0.lastElementSibling();
      element0.childrenSize();
      document1.ownText();
      document2.getElementsByAttributeValueContaining("s+", ";&");
      document1.wholeText();
      document0.getElementsMatchingText(";&");
      document2.getElementsByTag(";&");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String string0 = "org.eclipse.jetty.util.component.DumpableCollection";
      Tag tag0 = Tag.valueOf("org.eclipse.jetty.util.component.DumpableCollection");
      Element element0 = new Element(tag0, "org.eclipse.jetty.util.component.DumpableCollection");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag.valueOf("org.eclipse.jetty.util.component.DumpableCollection", parseSettings0);
      String string1 = "head";
      element0.getElementsMatchingOwnText("head");
      int int0 = 1;
      element0.getElementsByIndexLessThan(1);
      Element element1 = element0.prependText("html");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Element element2 = element1.selectFirst((Evaluator) evaluator_IsRoot0);
      Pattern pattern0 = Pattern.compile("q-9!Eun.");
      String string2 = "";
      parseSettings0.normalizeTag(string2);
      element0.getElementsByAttributeValueMatching(string1, pattern0);
      // Undeclared exception!
      try { 
        element2.before(string0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = ">Cq\"_{|AQm\\32J";
      Element element0 = new Element(">Cq\"_{|AQm\u001AJ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.forEach(consumer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element0.id("i4");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('B');
      int int0 = 1533;
      charArrayWriter0.writeTo(charArrayWriter1);
      Evaluator.ContainsWholeOwnText evaluator_ContainsWholeOwnText0 = new Evaluator.ContainsWholeOwnText("");
      element1.closest((Evaluator) evaluator_ContainsWholeOwnText0);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.mark(499);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = ">EfG&~cp";
      Document document0 = Parser.parseBodyFragment(">EfG&~cp", ">EfG&~cp");
      document0.outerHtml();
      document0.attributes();
      Element element0 = document0.attr("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
      element0.childNodes();
      element0.getElementsByAttributeValueEnding("hk2e\"lrfcg7jj", ">EfG&~cp");
      Element element1 = document0.root();
      element1.getElementsMatchingOwnText("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool((ByteBufferPool) null);
      Class<FormElement> class0 = FormElement.class;
      Collection<FormElement> collection0 = leakTrackingByteBufferPool0.getContainedBeans(class0);
      element1.getElementsByAttribute("FAILED");
      element1.appendChildren(collection0);
      Element element2 = element1.val("STARTED");
      element2.nextElementSiblings();
      element0.children();
      element0.classNames();
      // Undeclared exception!
      try { 
        element1.selectXpath("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [<html>
         //  <head></head>
         //  <body>
         //   &gt;EfG&amp;~cp
         //  </body>
         // </html>]: javax.xml.transform.TransformerException: A location path was expected, but the following token was encountered:  <
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      document0.ownText();
      String string2 = "br";
      document0.children();
      document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      Document document0 = new Document("-)zY`2VVJK<(C_rm5");
      Document document1 = (Document)document0.append("-)zY`2VVJK<(C_rm5");
      Element element0 = document1.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element1 = document1.createElement("br");
      element1.getElementsByAttributeValueMatching("j", pattern0);
      String string1 = "9,`";
      Element element2 = element0.prependText("9,`");
      // Undeclared exception!
      try { 
        element2.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{6n_i'@2Mh", "body");
      Element element0 = document0.tagName("body");
      Pattern pattern0 = Pattern.compile("{6n_i'@2Mh", (-360));
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      CDataNode cDataNode0 = new CDataNode((String) null);
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Document document0 = Document.createShell("`rh");
      document0.cssSelector();
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = Node.EmptyString;
      int int0 = 8240;
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stored ");
      Element element0 = document0.head();
      document0.appendTo(element0);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = Node.EmptyString;
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stored ");
      Element element0 = document0.head();
      document0.appendTo(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      document_OutputSettings3.maxPaddingWidth(11);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element1 = element0.empty();
      document0.shallowClone();
      document0.firstElementSibling();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0:", "Read timeout");
      document0.siblingIndex = 1;
      Pattern pattern0 = Pattern.compile("Read timeout");
      Elements elements0 = document0.getElementsByAttributeValueMatching("", pattern0);
      document0.prependChildren(elements0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      HashSet<String> hashSet0 = new HashSet<String>();
      element0.classNames((Set<String>) hashSet0);
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = Node.EmptyString;
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stored ");
      Element element0 = document0.head();
      document0.appendTo(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " stored ");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Entities.CoreCharset entities_CoreCharset1 = Entities.CoreCharset.utf;
      document_OutputSettings3.coreCharset = entities_CoreCharset1;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element1 = element0.empty();
      document0.shallowClone();
      document0.lastElementSibling();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element2 = element1.wrap("br");
      element2.getElementsByAttributeValueMatching("", pattern0);
      Element element3 = element1.prependText("9,`");
      element3.getElementsMatchingText(pattern0);
      document0.elementSiblingIndex();
      element0.appendText("9,`");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element2.filter(nodeFilter0);
      Element element4 = element3.after((Node) document0);
      // Undeclared exception!
      element4.toString();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEscapedEndTagOpen");
      Element element0 = document0.head();
      element0.attr("AttributeValue_doubleQuoted", "+");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("E", "\n");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(256);
      document_OutputSettings0.indentAmount(256);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(256);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.indentAmount(256);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      document0.getElementsByAttributeValueNot("^a&", "\n");
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      document0.selectFirst((Evaluator) evaluator_IsOnlyChild0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = Node.EmptyString;
      document0.getElementsByIndexEquals(8240);
      Element element0 = document0.prependElement(" stored ");
      element0.is("Content-Type");
      Element element1 = document0.head();
      document0.appendTo(element1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element2 = element1.empty();
      document0.shallowClone();
      element1.appendText("id");
      // Undeclared exception!
      try { 
        element2.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.StructuralEvaluator$Has");
      Tag tag0 = Tag.valueOf("org.jsoup.select.StructuralEvaluator$Has");
      String string0 = "snrd{_/zfk%|8yas";
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("snrd{_/zfk%|8yas", "1fUSs-g)|blEh}g#SV");
      Attribute attribute0 = new Attribute("1fUSs-g)|blEh}g#SV", "org.jsoup.select.StructuralEvaluator$Has");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Attributes attributes2 = attributes1.put(attribute0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "snrd{_/zfk%|8yas");
      FormElement formElement0 = new FormElement(tag0, "snrd{_/zfk%|8yas", attributes2);
      int int0 = 1322;
      formElement0.getElementsByIndexEquals(1322);
      Element element0 = document0.appendTo(formElement0);
      Element element1 = document0.val("org.jsoup.select.StructuralEvaluator$Has");
      element1.attributes();
      Element element2 = element0.removeAttr("1fUSs-g)|blEh}g#SV");
      document0.before("1fUSs-g)|blEh}g#SV");
      document0.parents();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element2;
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1322, '2');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Parser.parse("Unknown bean ", "Unknown bean ");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document1 = document0.shallowClone();
      Element element0 = document1.head();
      Element element1 = element0.before((Node) document0);
      element0.ownText();
      element0.hasAttributes();
      Element element2 = element1.after((Node) document1);
      element2.getAllElements();
      document0.childElementsList();
      // Undeclared exception!
      element1.html("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.children();
      element0.nextElementSiblings();
      String string0 = "Unxected wrap result";
      CDataNode cDataNode0 = new CDataNode("Unxected wrap result");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      cDataNode0.forEachNode(consumer0);
      element0.cssSelector();
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      int int0 = 3097;
      // Undeclared exception!
      try { 
        element0.child(3097);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3097
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      String string0 = ">EfG&~cp";
      Document document0 = Parser.parseBodyFragment(">EfG&~cp", ">EfG&~cp");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.attributes();
      Element element0 = document0.root();
      Document document1 = new Document("hk2e\"lrfcg7jj");
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool((ByteBufferPool) null);
      Class<FormElement> class0 = FormElement.class;
      Collection<FormElement> collection0 = leakTrackingByteBufferPool0.getContainedBeans(class0);
      element0.appendChildren(collection0);
      Element element1 = element0.val("STARTED");
      element1.nextElementSiblings();
      document1.children();
      document1.selectFirst("STARTING");
      Element element2 = document1.toggleClass("G]hTEkb(SN#I");
      // Undeclared exception!
      try { 
        element2.selectFirst("KUZ7uNR\tiWN");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'KUZ7uNR\tiWN': unexpected token at 'UZ7uNR\tiWN'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String string0 = "\\+";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "";
      Document document0 = Parser.parse("+", "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document1 = document0.ownerDocument();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.hasAttr("N$p9'3D^YYHv~YM8```");
      // Undeclared exception!
      try { 
        document1.select((Evaluator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("yC,*{h]<&@<g:tj' pu");
      String string0 = "iot";
      document0.getElementsByAttributeValueNot("iot", "\n");
      document0.isBlock();
      Element element0 = document0.clone();
      int int0 = 700;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      Document document1 = (Document)element0.clearAttributes();
      nodeArray0[1] = (Node) document0;
      document1.childElementsList();
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(700, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Document document1 = (Document)document0.append("-)zY`2VVJK<(C_rm5");
      document0.ownText();
      document0.children();
      Document document2 = (Document)document0.shallowClone();
      String string2 = Node.EmptyString;
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Document document3 = (Document)document1.wrap("br");
      document2.firstElementSibling();
      document3.getElementsByAttributeValueMatching("", pattern0);
      Document document4 = (Document)document0.prependText("9,`");
      document4.getElementsMatchingText(pattern0);
      Element element0 = document1.head();
      document0.elementSiblingIndex();
      document1.appendText("9,`");
      document2.hasClass("&F)");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element0.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        document4.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("s~E<D:czQp!/T-sob6", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "s~E<D:czQp!/T-sob6", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("s~E<D:czQp!/T-sob6", "s~E<D:czQp!/T-sob6");
      FormElement formElement1 = formElement0.addElement(document0);
      FormElement formElement2 = formElement1.clone();
      Class<DataNode> class0 = DataNode.class;
      // Undeclared exception!
      try { 
        formElement2.selectXpath("s~E<D:czQp!/T-sob6", class0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("s~E<D:czQp!/T-sob6", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "s~E<D:czQp!/T-sob6", (Attributes) null);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings(parseSettings0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Invalid character reference: ");
      Document document0 = parser1.parseInput("s~E<D:czQp!/T-sob6", "s~E<D:czQp!/T-sob6");
      FormElement formElement1 = formElement0.addElement(document0);
      FormElement formElement2 = formElement1.clone();
      formElement2.nextElementSibling();
      formElement2.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "x";
      Tag tag0 = Tag.valueOf("x");
      CDataNode cDataNode0 = new CDataNode("-)zy`2vvjk<(c_rm5");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "x", attributes0);
      FormElement formElement1 = formElement0.clone();
      formElement1.dataNodes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FormElement formElement2 = formElement1.addElement(formElement0);
      formElement2.tagName();
      Pattern pattern0 = null;
      formElement0.attributesSize();
      // Undeclared exception!
      try { 
        formElement2.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      document0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      Document document1 = Parser.parse("!Sq{\rA#KR.}", ">1/cAI}[;6*");
      Element element0 = document0.appendTo(document1);
      element0.tagName("Unexpected wrap result ");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "-)zY`2VVJK<(C_rm5");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      Element element2 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element3 = element1.wrap("br");
      element3.getElementsByAttributeValueMatching("", pattern0);
      String string1 = "9,`";
      Element element4 = document0.text("");
      element4.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        element2.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      document0.body();
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A]$/A-z");
      Element element0 = new Element(tag0, ";~al3");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "snrd{_/zfk%|8yas");
      StringBuilder stringBuilder0 = new StringBuilder("snrd{_/zfk%|8yas");
      StringBuilder stringBuilder1 = stringBuilder0.insert(5, (CharSequence) "snrd{_/zfk%|8yas");
      StringBuilder stringBuilder2 = stringBuilder1.append(0.0);
      StringBuilder stringBuilder3 = stringBuilder2.append((float) 5);
      stringBuilder2.insert(5, 1839L);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder3, 5, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Pattern.compile("", 0);
      Document document0 = Parser.parse(":nth-child(%d)", "baseuri");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Pattern.compile("", 0);
      Document document0 = Parser.parse("Read timeout", "baseuri");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      document0.ownText();
      document0.children();
      Element element1 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element2 = element0.wrap("br");
      element1.firstElementSibling();
      element2.getElementsByAttributeValueMatching("", pattern0);
      String string2 = "9,`";
      Element element3 = document0.prependText("9,`");
      element3.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Hk2E\"lRfCg7JJ");
      Tag.valueOf("Hk2E\"lRfCg7JJ");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      attributes0.deduplicate(parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.clone();
      attributes0.dataset();
      formElement1.val();
      Element element0 = formElement0.prependChild(formElement1);
      AttributeContainerMap attributeContainerMap0 = new AttributeContainerMap();
      attributes0.hasDeclaredValueForKeyIgnoreCase("4W#q3_dr.8ZC}<?");
      formElement0.doSetBaseUri("class");
      element0.html();
      attributeContainerMap0.getAttributeNameSet();
      FormElement formElement2 = (FormElement)element0.lastElementSibling();
      element0.val();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        formElement2.shouldIndent((Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Tag tag0 = Tag.valueOf("og[@zx");
      FileSystemHandling.shouldAllThrowIOExceptions();
      CDataNode cDataNode0 = new CDataNode("br");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.add("br", "og[@zx");
      cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      attributes0.deduplicate(parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "og[@zx", attributes1);
      formElement0.getElementsByAttributeValueStarting("br", "-)zy`2vvjk<(c_rm5");
      Element element0 = formElement0.clearAttributes();
      element0.cssSelector();
      element0.textNodes();
      Element element1 = element0.empty();
      element1.id();
      element0.className();
      element1.getElementsByAttributeValueEnding("br", "br");
      // Undeclared exception!
      try { 
        element1.selectFirst("A/`xR08");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'A/`xR08': unexpected token at '/`xR08'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("s~E<D:czQp!/T-sob6", "s~E<D:czQp!/T-sob6");
      document0.getElementById("A%X\"h#/bBfh");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Document.createShell("");
      document0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.attributes();
      Pattern pattern0 = Pattern.compile("");
      Evaluator.MatchesWholeOwnText evaluator_MatchesWholeOwnText0 = new Evaluator.MatchesWholeOwnText(pattern0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEach(consumer0);
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(0);
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "%0l=R}K~inl3l5";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "Content-Encoding";
      httpConnection0.data(stringArray0);
      document0.hasText();
      document0.prependText("");
      MockFileWriter mockFileWriter0 = new MockFileWriter("$O#&h<jP@l4W\"J", false);
      document0.html((OutputStreamWriter) mockFileWriter0);
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String string0 = " stored ";
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string1 = Node.EmptyString;
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stored ");
      Element element0 = document0.head();
      document0.appendTo(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element1 = element0.empty();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Tag tag0 = Tag.valueOf("FPw*&G'L[>#vn");
      Attributes attributes0 = new Attributes();
      String string0 = "P=gTB>J^";
      Attribute attribute0 = new Attribute("P=gTB>J^", "m");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("class", parseSettings0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("FPw*&G'L[>#vn", false);
      attributes2.dataset();
      ParseSettings parseSettings1 = new ParseSettings(false, false);
      Tag.valueOf("N!Kgn-\":uU6**", parseSettings1);
      FormElement formElement0 = new FormElement(tag0, "FPw*&G'L[>#vn", attributes2);
      FormElement formElement1 = formElement0.clone();
      formElement1.childElementsList();
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("l`el}wYJHvOtCs}n");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      element0.forEach(consumer0);
      TextNode textNode0 = TextNode.createFromEncoded("7Ll$t6MX");
      Element element1 = element0.prependChild(textNode0);
      element1.getElementsByAttributeValueMatching("x](s+", "l`el}wYJHvOtCs}n");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String string0 = "Children collection to be inserted must not be null.";
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Children collection to be inserted must not be null.");
      Element element0 = document0.forEach(consumer0);
      element0.hasSameValue("Children collection to be inserted must not be null.");
      element0.getElementsMatchingOwnText("Children collection to be inserted must not be null.");
      Charset charset0 = document0.charset();
      Charset.defaultCharset();
      document0.charset(charset0);
      element0.childrenSize();
      document0.hasText();
      document0.baseUri();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Children collection to be inserted must not be null.");
      Element.preserveWhitespace(element0);
      Element element1 = element0.firstElementSibling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueEnding("Children collection to be inserted must not be null.", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "9)9Padm*!l";
      Document document0 = new Document("9)9Padm*!l");
      document0.html("9)9Padm*!l");
      LinkedBlockingDeque<FormElement> linkedBlockingDeque0 = new LinkedBlockingDeque<FormElement>(8);
      // Undeclared exception!
      try { 
        document0.insertChildren(8, (Collection<? extends Node>) linkedBlockingDeque0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("Rs/}::dNl;\"(", "Wr");
      document0.wholeText();
      document0.attr("Rs/}::dNl;\"(", true);
      document0.normalise();
      document0.updateMetaCharsetElement(false);
      document0.elementSiblingIndex();
      document0.updateMetaCharsetElement(true);
      document0.prependElement("%s[%s]@%x{%s,%d<=%d<=%d,i=%d,r=%d,q=%d}[%s]");
      Pattern pattern0 = Pattern.compile("");
      // Undeclared exception!
      try { 
        pattern0.split((CharSequence) null, 17);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Parser.parseBodyFragment("", "Read timeout");
      document0.wrap("Read timeout");
      document0.wholeText();
      Pattern pattern0 = Pattern.compile("", 0);
      document0.getElementsByAttributeValueMatching("", pattern0);
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[8];
      Document document0 = Parser.parseBodyFragment("%0l=R}K~inl3l5", "%0l=R}K~inl3l5");
      document0.nodeName();
      stringArray0[5] = "%0l=R}K~inl3l5";
      Element element0 = new Element("+");
      element0.prependText(":YyzYM6e$z{$");
      element0.html(":YyzYM6e$z{$");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(.H**^.M,t$F(w=eLM");
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)62;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte) (-107);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      CDataNode cDataNode0 = new CDataNode("egts~>AFA|O7%'FEWy}");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("org.eclipse.jetty.http.PathMap$PathSet", true);
      FormElement formElement0 = new FormElement(tag0, "egts~>AFA|O7%'FEWy}", attributes1);
      FormElement formElement1 = formElement0.clone();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("LSi+z", parseSettings0);
      Element element0 = formElement1.removeClass("hk2e\"lrfcg7jj");
      formElement1.cssSelector();
      element0.firstElementSibling();
      formElement0.html("net flushed={}, ac={}");
      Element element1 = formElement0.prepend("(.H**^.M,t$F(w=eLM");
      element1.text();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element element0 = new Element("$N1#jaGj");
      element0.wholeText();
      Element element1 = element0.prepend("$N1#jaGj");
      element1.textNodes();
      element0.getAllElements();
      element0.parents();
      element1.getElementsByAttributeValueMatching("$N1#jaGj", "");
      element1.elementSiblingIndex();
      Element element2 = element1.clearAttributes();
      element2.baseUri();
      Element element3 = element1.shallowClone();
      element3.siblingIndex = 15;
      element3.html();
      element3.getElementsByAttributeValue("class", "class");
      Element element4 = element3.removeClass("");
      // Undeclared exception!
      try { 
        element4.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RKjn,!(o{PX{ID3#mn");
      String string0 = "\\s+";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("RKjn,!(o{PX{ID3#mn", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("s+");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "RKjn,!(o{PX{ID3#mn", attributes0);
      Document document0 = Document.createShell("RKjn,!(o{PX{ID3#mn");
      Document document1 = document0.clone();
      formElement0.addElement(document1);
      attributes0.getIgnoreCase("RKjn,!(o{PX{ID3#mn");
      document0.addClass("RKjn,!(o{PX{ID3#mn");
      Element element0 = document0.lastElementSibling();
      element0.childrenSize();
      String string1 = "";
      // Undeclared exception!
      try { 
        formElement0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String string0 = ">Cq\"_{|AQm\\32J";
      Element element0 = new Element(">Cq\"_{|AQm\u001AJ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      element0.forEach(consumer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.id("i4");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('B');
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      element0.outerHtml((Appendable) pipedWriter0);
      int int0 = 76;
      // Undeclared exception!
      try { 
        charArrayWriter1.append((CharSequence) ">Cq\"_{|AQm\u001AJ", 1533, 76);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = " stored ";
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      document0.prependElement(" stored ");
      Element element0 = document0.head();
      Element element1 = element0.empty();
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "body";
      Element element0 = new Element("body");
      Element element1 = element0.clearAttributes();
      element1.data();
      element1.data();
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "7r+|vD*hG&.k";
      Document document0 = new Document("7r+|vD*hG&.k");
      Document document1 = document0.clone();
      document1.title("7r+|vD*hG&.k");
      document0.doClone(document1);
      Element element0 = document0.attr("", "7r+|vD*hG&.k");
      element0.clone();
      document1.createElement("M");
      document1.previousElementSiblings();
      element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document1.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{} onFillInterestedFailed {}", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.parser(parser0);
      document0.data();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      Element element0 = document1.removeAttr("");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Parser.parseFragment("", element0, "org.jsoup.nodes.Element$1", parseErrorList0);
      Parser.xmlParser();
      element0.getElementsByIndexEquals((-2302));
      document0.childrenSize();
      document0.textNodes();
      document0.previousElementSibling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)element0.forEachNode(consumer0);
      Document document4 = (Document)document2.prepend("{} onFillInterestedFailed {}");
      Node[] nodeArray0 = new Node[20];
      nodeArray0[0] = (Node) document4;
      nodeArray0[1] = (Node) element0;
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("org.jsoup.nodes.Element$1", "mW V/V=5");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      document3.outerHtml((Appendable) mockFileWriter0);
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document3;
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) document3;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("7@$");
      Document document1 = document0.normalise();
      Document document2 = document1.ownerDocument();
      document2.classNames();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("selected {} {} {} ");
      document0.nextElementSiblings();
      Document document1 = document0.shallowClone();
      Document document2 = (Document)document1.text("vLX");
      Elements elements0 = document2.getElementsByIndexLessThan(1583);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document2.forEachNode(consumer0);
      String string0 = "EzY-S 1XR-vx!qH=R.7";
      Evaluator.AttributeWithValueStarting evaluator_AttributeWithValueStarting0 = new Evaluator.AttributeWithValueStarting("EzY-S 1XR-vx!qH=R.7", "selected {} {} {} ");
      evaluator_AttributeWithValueStarting0.matches(document0, document0);
      document2.clone();
      document2.select((Evaluator) evaluator_AttributeWithValueStarting0);
      document1.dataset();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "vLX");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(43);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      document2.outerHtmlTail(stringBuffer0, 1583, document_OutputSettings4);
      document2.baseUri();
      document3.firstElementSibling();
      // Undeclared exception!
      try { 
        document1.appendChildren(elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("mV#g|c");
      document0.val("runCompleteWrite");
      Elements elements0 = document0.getElementsByAttributeValueNot("runCompleteWrite", "%s@%h::%s");
      document0.parents();
      document0.prependChildren(elements0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.maxPaddingWidth(160);
      // Undeclared exception!
      try { 
        Charset.forName("runCompleteWrite");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // runCompleteWrite
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6$JIXMr.}0SCqz");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      String string0 = ":+>`aKC#SP2kYQ:-9\"";
      Document document0 = parser1.parseInput("Tag name must not be empty.", ":+>`aKC#SP2kYQ:-9\"");
      Document document1 = document0.parser(parser0);
      Element element0 = document1.appendTo(document0);
      // Undeclared exception!
      element0.attr("bu<lx-9hxo%/.", "Y@[A=qJ5ai@*}cGN");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String string0 = "9)9Padm*!l";
      Document document0 = new Document("9)9Padm*!l");
      document0.html("9)9Padm*!l");
      Class<Element> class0 = Element.class;
      // Undeclared exception!
      try { 
        document0.selectXpath("class", class0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "7r+|vD*hG&.k";
      Document document0 = Parser.parseBodyFragment("7r+|vD*hG&.k", "7r+|vD*hG&.k");
      Document document1 = document0.clone();
      document1.title("kE?C");
      Element element0 = document0.attr("", "7r+|vD*hG&.k");
      element0.clone();
      document1.removeClass("");
      // Undeclared exception!
      try { 
        document1.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("9)9Padm*!l");
      document0.html("9)9Padm*!l");
      int int0 = 93;
      LinkedBlockingQueue<Document> linkedBlockingQueue0 = new LinkedBlockingQueue<Document>();
      // Undeclared exception!
      try { 
        document0.closest((Evaluator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$NodeList";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      element0.wrap("org.jsoup.nodes.Element$NodeList");
      element0.getElementsContainingText("&_M_gy&J=(`k8");
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Read timeout");
      Pattern pattern0 = Pattern.compile("", 0);
      pattern0.split((CharSequence) "");
      Pattern.compile("br");
      document0.getElementsByAttributeValueMatching("", pattern0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "br";
      Document document0 = Parser.parse("br", "br");
      Document document1 = document0.normalise();
      int int0 = 1;
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document0;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)60;
      byteArray0[0] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) document0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        document1.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(">FM$1m,6b#3n0a:S", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("body", "T@.G76kwU)dQd");
      FormElement formElement0 = new FormElement(tag0, "baseuri", attributes2);
      attributes2.put("main", false);
      Document document0 = Document.createShell("org.jsoup.nodes.XmlDeclaration");
      URL uRL0 = MockURL.getHttpExample();
      Connection connection0 = HttpConnection.connect(uRL0);
      Document document1 = document0.connection(connection0);
      Document document2 = document1.normalise();
      Element element0 = document2.text("textarea");
      FormElement formElement1 = formElement0.addElement(element0);
      formElement1.removeAttr("org.jsoup.nodes.XmlDeclaration");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      formElement1.forEachNode(consumer0);
      formElement1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parse("hk2e\"lrfcg7jj", "hk2e\"lrfcg7jj");
      document0.addClass("hk2e\"lrfcg7jj");
      Element element0 = document0.firstElementSibling();
      element0.getElementsByAttributeValueStarting("PsiWe~T4", "W4)Hp8\"");
      element0.getElementsByAttributeValueStarting("hk2e\"lrfcg7jj", "hk2e\"lrfcg7jj");
      document0.getElementsByClass("ByteBuffer ");
      document0.wholeOwnText();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Element element0 = new Element("$N1#jaGj");
      element0.wholeText();
      Element element1 = element0.prepend("$N1#jaGj");
      element1.textNodes();
      element0.getAllElements();
      element0.parents();
      element1.getElementsMatchingText("");
      element1.elementSiblingIndex();
      Document document0 = new Document("$N1#jaGj");
      Element element2 = element1.shallowClone();
      element2.html();
      Element element3 = element2.removeClass("");
      // Undeclared exception!
      try { 
        element3.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      Attributes attributes0 = cDataNode1.attributes();
      Tag tag0 = Tag.valueOf("tag name must not be empty.");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tag name must not be empty.", attributes0);
      pseudoTextElement0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s+");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("hP!q|:V;Z>4.*~'P", "");
      Attributes attributes2 = attributes1.put("s+", "");
      Attribute attribute0 = Attribute.createFromEncoded("hP!q|:V;Z>4.*~'P", "");
      Attributes attributes3 = attributes2.put(attribute0);
      Element element0 = new Element(tag0, "s+", attributes3);
      element0.nextElementSiblings();
      element0.cssSelector();
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = Parser.parse("application/x-www-form-urlencoded", "Content-Type");
      document0.siblingElements();
      Element element0 = document0.body();
      Document document1 = document0.shallowClone();
      document0.hasClass("!0q`s");
      element0.normalName();
      Element element1 = element0.append("Content-Encoding");
      document0.data();
      element0.doSetBaseUri("");
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element2 = document0.filter(nodeFilter0);
      element2.hasText();
      element2.is("X");
      element1.elementSiblingIndex();
      document1.attributes();
      document0.empty();
      LinkedTransferQueue<XmlDeclaration> linkedTransferQueue0 = new LinkedTransferQueue<XmlDeclaration>();
      element1.appendChildren(linkedTransferQueue0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("snrd{_/zfk%|8yas", parseSettings0);
      Element element0 = new Element(tag0, "id");
      Stack<DataNode> stack0 = new Stack<DataNode>();
      element0.prependChildren(stack0);
      element0.id("snrd{_/zfk%|8yas");
      element0.root();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("");
      String string0 = "tNHKVA#lRLSb";
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "tNHKVA#lRLSb");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "y");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("y");
      CDataNode cDataNode0 = new CDataNode("Unexpected wrap result ");
      CDataNode cDataNode1 = cDataNode0.clone();
      Attributes attributes0 = cDataNode1.attributes();
      Element element0 = new Element(tag0, (String) null, attributes0);
      element0.children();
      Element element1 = element0.lastElementSibling();
      element1.getElementsMatchingText("UTF-");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String string0 = "4{P#pu";
      Document document0 = Parser.parse("|)EqAQ<T", "4{P#pu");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      Document document1 = document0.parser(parser1);
      document1.hasAttributes();
      String string1 = "/JtZ_W?!>GGFN";
      Parser.parseBodyFragment("/JtZ_W?!>GGFN", "/JtZ_W?!>GGFN");
      document0.getElementsContainingText("/JtZ_W?!>GGFN");
      Element element0 = document0.prepend("g-kG:Y_");
      int int0 = (-1213);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1213), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String string0 = ">Cq\"_{|AQm\\32J";
      Element element0 = new Element(">Cq\"_{|AQm\u001AJ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      element0.forEach(consumer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.id("i4");
      charArrayWriter0.append('B');
      int int0 = 1533;
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.mark(499);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("wIfV>");
      document0.head();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.clone();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = true;
      boolean boolean1 = true;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      boolean boolean0 = true;
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parser1.settings(parseSettings0);
      String string0 = null;
      Document document0 = new Document((String) null);
      Element element0 = document0.head();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      element0.forEachNode(consumer0);
      String string1 = "";
      // Undeclared exception!
      try { 
        parser1.parseFragmentInput((String) null, element0, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = new Document(":nth-child(%d)");
      Document document1 = document0.clone();
      document1.nextElementSiblings();
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      document0.select((Evaluator) evaluator_IndexLessThan0);
      Document document2 = document1.shallowClone();
      Element element0 = document2.appendTo(document0);
      document1.parent();
      String string1 = "";
      document1.createElement(":nth-child(%d)");
      element0.getElementsByAttributeStarting(":nth-child(%d)");
      // Undeclared exception!
      try { 
        element0.selectXpath("r[+P#=Rs}/");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String string0 = "header";
      Tag tag0 = Tag.valueOf("header");
      Element element0 = new Element(tag0, (String) null);
      Class<Document> class0 = Document.class;
      element0.selectXpath("header", class0);
      element0.getElementsByAttributeValueEnding("%c>B}kq$36[D(?t%", "header");
      Element element1 = element0.selectFirst("header");
      element1.firstElementSibling();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "header");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // header
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("$@_@(T0NM.BV,gx", "Zq;{[");
      Element element0 = document0.text("$@_@(T0NM.BV,gx");
      element0.tag();
      String string0 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "$@_@(T0NM.BV,gx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("");
      Parser parser0 = Parser.htmlParser();
      document0.parser(parser0);
      document0.isBlock();
      document0.removeClass("");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("HvKJJ.");
      Element element1 = element0.toggleClass("XblMfn,?F<S<");
      element0.getElementsByAttributeValue("org.jsoup.nodes.Element", "HvKJJ.");
      element1.parents();
      Element element2 = element1.tagName("XblMfn,?F<S<");
      element0.siblingElements();
      element1.append("");
      element2.getElementsByAttributeValueContaining("AMGTgR}N1uog|16@3", "!");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "Q2@C5\\M+#1|f_[GJ,,";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Q2@C5M+#1|f_[GJ,,", parseSettings0);
      Element element0 = new Element(tag0, "Q2@C5M+#1|f_[GJ,,", (Attributes) null);
      element0.siblingElements();
      int int0 = (-827);
      element0.getElementsByIndexGreaterThan((-827));
      Tag.valueOf("hgroup");
      char[] charArray0 = new char[3];
      charArray0[0] = '*';
      charArray0[1] = 'd';
      charArray0[2] = 'r';
      // Undeclared exception!
      try { 
        CharBuffer.wrap(charArray0, (-827), (-827));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      int int0 = 0;
      Parser parser1 = parser0.setTrackErrors(0);
      StringReader stringReader0 = new StringReader("D?xx");
      String string0 = ":TD2f^% !I2c";
      parser0.parseInput((Reader) stringReader0, ":TD2f^% !I2c");
      Parser parser2 = parser1.newInstance();
      String string1 = "Ne\"0+UG/7mR>:4";
      Document document0 = parser2.parseInput("Ne\"0+UG/7mR>:4", "Ne\"0+UG/7mR>:4");
      String string2 = "es]vqzM*0B|Nn=";
      parser0.parseFragmentInput("es]vqzM*0B|Nn=", document0, "a?WW8");
      Parser.htmlParser();
      String string3 = "gxpdl)q|Zk,";
      Document document1 = Parser.parse(")E", "gxpdl)q|Zk,");
      document0.hasChildNodes();
      document0.childElementsList();
      document0.getAllElements();
      document0.ownText();
      // Undeclared exception!
      try { 
        document1.is("gxpdl)q|Zk,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'gxpdl)q|Zk,': unexpected token at ')q|Zk,'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String string0 = "'V?UYE6wR";
      Element element0 = new Element("'V?UYE6wR");
      element0.dataNodes();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.traverse(nodeVisitor0);
      int int0 = 160;
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        element1.insertChildren(160, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String string0 = ";Xy'D^-#_\"HgD@Q[]";
      Document document0 = Document.createShell(";Xy'D^-#_\"HgD@Q[]");
      Element element0 = document0.append(";Xy'D^-#_\"HgD@Q[]");
      // Undeclared exception!
      try { 
        element0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("selected {} {} {} ");
      document0.nextElementSiblings();
      Document document1 = document0.shallowClone();
      String string0 = "vLX";
      Element element0 = document1.text("vLX");
      int int0 = 1583;
      Elements elements0 = element0.getElementsByIndexLessThan(1583);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.forEachNode(consumer0);
      String string1 = "EzY-S 1XR-vx!qH=R.7";
      String string2 = "";
      // Undeclared exception!
      try { 
        element1.appendChildren(elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser.htmlParser();
      ParseSettings parseSettings0 = null;
      String string0 = "";
      String string1 = null;
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.newRequest();
      Document document1 = document0.connection(connection0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document1.closest("application/x-www-form-urlencoded");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'application/x-www-form-urlencoded': unexpected token at '/x-www-form-urlencoded'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("f,");
      document0.hasText();
      Element element0 = document0.createElement("f,");
      element0.hasAttr("jiGJC;&en,\u0001d6_>");
      // Undeclared exception!
      try { 
        element0.selectXpath("f,");
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8,/tyR", "8,/tyR");
      Document document1 = document0.shallowClone();
      document1.prependChild(document0);
      String string0 = "(Pfe";
      document0.title("(Pfe");
      Node[] nodeArray0 = new Node[0];
      document0.addChildren(nodeArray0);
      String string1 = "";
      Evaluator.Class evaluator_Class0 = new Evaluator.Class((String) null);
      // Undeclared exception!
      try { 
        document0.select((Evaluator) evaluator_Class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = " />";
      Element element0 = new Element(" />");
      String string1 = "E~UkB3,\\Fw|Z";
      element0.getElementsContainingText(" />");
      String string2 = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("E~UkB3,Fw|Z", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Element element0 = new Element("org0fI2W7Ud");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("|3F7KN(4-J?J,to-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: |3F7KN(4-J?J,to-
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("", "");
      document0.ownerDocument();
      document0.hasText();
      Charset.defaultCharset();
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      String string0 = "";
      Attributes attributes0 = new Attributes();
      String string1 = "'fRo0]K*yv~x<";
      attributes0.get("'fRo0]K*yv~x<");
      Attribute attribute0 = new Attribute("#root", "#root");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("", "#root");
      Attributes attributes3 = attributes2.put("#root", true);
      attributes3.hasDeclaredValueForKeyIgnoreCase("#root");
      Element element0 = new Element(tag0, "", attributes3);
      element0.lastElementSibling();
      int int0 = (-4982);
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((-4982));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("?<iLR");
      document0.text();
      document0.id();
      document0.getElementsContainingText("?<iLR");
      document0.hasAttributes();
      Element element0 = document0.appendText("?<iLR");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NI!'o }<o~Mj5?[X", "NI!'o }<o~Mj5?[X");
      Document document1 = document0.normalise();
      document1.hasChildNodes();
      document1.getElementsByAttributeValueMatching("", (Pattern) null);
      document0.children();
      document1.elementSiblingIndex();
      Element element0 = document1.root();
      InetAddressSet inetAddressSet0 = new InetAddressSet();
      Element element1 = document1.classNames((Set<String>) inetAddressSet0);
      inetAddressSet0.parallelStream();
      String string0 = "?$r\"z1X9E1hXd)%yB";
      Element element2 = element1.appendText("?$r\"z1X9E1hXd)%yB");
      Pattern pattern0 = Pattern.compile("", (-829));
      element1.attr("", "");
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching("NI!'o }<o~Mj5?[X", pattern0);
      evaluator_AttributeWithValueMatching0.toString();
      element2.closest((Evaluator) evaluator_AttributeWithValueMatching0);
      element2.appendTo(element0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "NI!'o }<o~Mj5?[X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("(c/z`MN#U0N");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      String string0 = "\\UYdaO(N!w<X9nJT";
      document1.getElementsByAttributeValueContaining("(c/z`MN#U0N", "UYdaO(N!w<X9nJT");
      document1.getElementsByAttributeValueContaining("V3n~aM", "UYdaO(N!w<X9nJT");
      int int0 = 3696;
      document1.getElementsByIndexLessThan(3696);
      document1.id();
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot((String) null, "UYdaO(N!w<X9nJT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      String string1 = "9o=uXC?";
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document1.nextElementSibling();
      document1.forEach(consumer0);
      document1.previousElementSibling();
      // Undeclared exception!
      try { 
        document1.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("class", "");
      Attributes attributes2 = attributes1.add("", "");
      FormElement formElement0 = new FormElement(tag0, "class", attributes2);
      attributes0.removeIgnoreCase("");
      FormElement formElement1 = formElement0.clone();
      formElement1.val();
      formElement0.baseUri();
      Element element0 = formElement0.clearAttributes();
      element0.wholeText();
      String string0 = "compact";
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      String string0 = "\\.";
      Document document0 = Parser.parseBodyFragment(".", ".");
      Element element0 = document0.appendElement("r!;]1L^rW'e.#:cd");
      document0.documentType();
      element0.childNodes();
      Class<DocumentType> class0 = DocumentType.class;
      // Undeclared exception!
      try { 
        element0.selectXpath("", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("");
      document0.textNodes();
      document0.previousElementSiblings();
      document0.getElementsMatchingOwnText("");
      document0.connection();
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = new Document("N@8U/3o");
      Document document1 = document0.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.getElementsByIndexLessThan(1380);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$NodeList";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "&DLU^Sr}Lep$R$");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.selectXpath("&DLU^Sr}Lep$R$");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [&DLU^Sr}Lep$R$]: javax.xml.transform.TransformerException: A location path was expected, but the following token was encountered:  &DLU
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("Host name verification failed for host: ");
      String string0 = "";
      document0.val("");
      String string1 = "]d,rG+sK";
      document0.getElementsContainingOwnText("]d,rG+sK");
      // Undeclared exception!
      try { 
        document0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      // Undeclared exception!
      try { 
        document1.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("LSN6`X%", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("LSN6`X%");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      Tag.valueOf("LSN6`X%", parseSettings1);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "LSN6`X%", attributes0);
      pseudoTextElement0.className();
      // Undeclared exception!
      try { 
        pseudoTextElement0.after("LSN6`X%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      String string0 = "</";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("</", parseSettings0);
      parseSettings0.normalizeAttribute("</");
      FormElement formElement0 = new FormElement(tag0, "</", (Attributes) null);
      FormElement formElement1 = formElement0.clone();
      formElement1.addElement(formElement0);
      Tag.valueOf("Fatal select() failure");
      formElement0.children();
      StringBuilder stringBuilder0 = new StringBuilder("</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        formElement1.outerHtmlHead(stringBuilder0, (-3831), document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be >= 0
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Tag tag0 = Tag.valueOf("2KAQdqq]");
      CDataNode cDataNode0 = new CDataNode("multiple");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "multiple", attributes1);
      Document document0 = Document.createShell("1[-|~kvu ");
      Document document1 = document0.clone();
      FormElement formElement1 = formElement0.addElement(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.maxPaddingWidth(1333);
      formElement1.shouldIndent(document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Hk2E\"lRfCg7JJ");
      Tag.valueOf("Hk2E\"lRfCg7JJ");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes0.deduplicate(parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      FormElement formElement1 = formElement0.clone();
      attributes0.dataset();
      formElement1.val();
      Element element0 = formElement0.prependChild(formElement1);
      AttributeContainerMap attributeContainerMap0 = new AttributeContainerMap();
      attributes0.hasDeclaredValueForKeyIgnoreCase("4W#q3_dr.8ZC}<?");
      formElement0.doSetBaseUri("class");
      element0.html();
      Set<String> set0 = attributeContainerMap0.getAttributeNameSet();
      element0.lastElementSibling();
      element0.val();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      formElement1.traverse(nodeVisitor0);
      element0.classNames(set0);
      // Undeclared exception!
      try { 
        element0.before((Node) formElement1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("pWyngLbT8Dq8W@xT", parseSettings0);
      Tag.valueOf("text/");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("CJ?TeaTRG)ovE", true);
      Attribute attribute0 = Attribute.createFromEncoded("tUz{2#1gJlz,o+]l0J/", "CJ?TeaTRG)ovE");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.clone();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tUz{2#1gJlz,o+]l0J/", attributes3);
      LinkedTransferQueue<Element> linkedTransferQueue0 = new LinkedTransferQueue<Element>();
      Element element0 = pseudoTextElement0.appendChildren(linkedTransferQueue0);
      element0.wholeOwnText();
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)element0.clone();
      pseudoTextElement1.parent();
      parseSettings0.normalizeTag("9BVw-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Attribute.shouldCollapseAttribute("tUz{2#1gJlz,o+]l0J/", "org.jsoup.nodes.Element$1", document_OutputSettings2);
      pseudoTextElement1.hasChildNodes();
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("org.eclipse.jetty.http.PathMap$PathSet", "org.eclipse.jetty.http.PathMap$PathSet");
      Element element0 = document0.createElement("org.eclipse.jetty.http.PathMap$PathSet");
      SynchronousQueue<DataNode> synchronousQueue0 = new SynchronousQueue<DataNode>();
      element0.prependChildren(synchronousQueue0);
      Element element1 = document0.appendTo(element0);
      element0.nextElementSibling();
      document0.getElementsContainingText("org.eclipse.jetty.http.PathMap$PathSet");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      element1.selectFirst((Evaluator) evaluator_IsOnlyOfType0);
      MockFile mockFile0 = new MockFile("rqO&Ko7?Cc");
      File file0 = MockFile.createTempFile("Av:", "6ni.D6bS 0a", (File) mockFile0);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("hP!q|:V;Z>4.*~'P", "");
      Attribute.createFromEncoded("hP!q|:V;Z>4.*~'P", "");
      Document document0 = Parser.parseBodyFragment("hP!q|:V;Z>4.*~'P", "$n1#jagj");
      Element element0 = document0.head();
      element0.hasChildNodes();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("Fatal select() failure", "Fatal select() failure");
      document0.getElementsByClass(";X:LaP'cK{Gz9\"/}T");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{} onFillInterestedFailed {}", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.parser(parser0);
      document0.data();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      Element element0 = document1.removeAttr("");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Parser.parseFragment("", element0, "org.jsoup.nodes.Element$1", parseErrorList0);
      Parser.xmlParser();
      element0.getElementsByIndexEquals((-2302));
      document0.childrenSize();
      document0.textNodes();
      document0.previousElementSibling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.forEachNode(consumer0);
      Element element2 = document2.prepend("{} onFillInterestedFailed {}");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element2;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) element1;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "x'}cR8";
      Document document0 = new Document("x'}cR8");
      Document document1 = document0.normalise();
      document1.shallowClone();
      Class<FormElement> class0 = FormElement.class;
      // Undeclared exception!
      try { 
        document0.selectXpath("x'}cR8", class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [x'}cR8]: javax.xml.transform.TransformerException: misquoted literal... expected single quote!
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("yC,*{h]<&@<g:tj' pu");
      String string0 = "iot";
      document0.getAllElements();
      document0.getElementsByAttributeValueNot("iot", "\n");
      document0.isBlock();
      Element element0 = document0.clone();
      int int0 = 700;
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      Document document1 = (Document)element0.clearAttributes();
      nodeArray0[1] = (Node) document0;
      document1.childElementsList();
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(700, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("ok+RI^#Ffs<rJ,", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("fill {}");
      CDataNode cDataNode1 = cDataNode0.clone();
      Attributes attributes0 = cDataNode1.attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.getAllElements();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      formElement0.filter(nodeFilter0);
      formElement0.getElementsByAttributeValue("f+\" q{F]:lKX6Iu33z", "fill {}");
      // Undeclared exception!
      try { 
        formElement0.before("h1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Element element0 = new Element("org.eclipse.jetty.io.IdleTimeout");
      Class<DocumentType> class0 = DocumentType.class;
      // Undeclared exception!
      try { 
        element0.selectXpath("", class0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "&;L3~L?h)~Ue-j@";
      Element element0 = new Element("&;L3~L?h)~Ue-j@");
      int int0 = 62;
      element0.getElementsByAttributeValueNot("&;L3~L?h)~Ue-j@", "_K)][0s>sr;JX");
      Pattern.compile("_K)][0s>sr;JX", 62);
      // Undeclared exception!
      try { 
        Pattern.matches("_K)][0s>sr;JX", "&;L3~L?h)~Ue-j@");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unmatched closing ')' near index 1
         // _K)][0s>sr;JX
         //  ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "RESERVED";
      Document document0 = Parser.parse("RESERVED", "RESERVED");
      Parser parser0 = Parser.htmlParser();
      document0.parser(parser0);
      Function<Integer, ByteBufferPool.Bucket> function0 = (Function<Integer, ByteBufferPool.Bucket>) mock(Function.class, new ViolatedAssumptionAnswer());
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool((-1698), (-1873), function0);
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(mappedByteBufferPool0);
      Class<DocumentType> class0 = DocumentType.class;
      Collection<DocumentType> collection0 = leakTrackingByteBufferPool0.getContainedBeans(class0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1662), collection0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Tag tag0 = Tag.valueOf("qF(u/fFy'<d");
      Element element0 = new Element(tag0, " 8>|7");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "head");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)112;
      byteArray0[1] = (byte) (-40);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      AttributeContainerMap attributeContainerMap0 = new AttributeContainerMap();
      Set<String> set0 = attributeContainerMap0.getAttributeNameSet();
      Element element1 = element0.classNames(set0);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag1 = Tag.valueOf("%g[YWK(&up-7", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag1, "'@LO,A3(", attributes1);
      element1.appendTo(formElement0);
      Elements elements0 = element0.getElementsByAttributeValueNot(")mVPR? mb|5nQ", "RUNNING");
      element1.getElementsByClass("T}HKiKCW1&B-QB");
      element0.normalName();
      element0.ensureChildNodes();
      // Undeclared exception!
      try { 
        formElement0.insertChildren((-1771), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("{<yWN.(", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("{<yWN.(");
      Attributes attributes0 = cDataNode0.attributes();
      parseSettings0.normalizeAttribute("*.");
      Attributes attributes1 = new Attributes();
      attributes0.addAll(attributes1);
      Element element0 = new Element(tag0, "{<yWN.(", attributes0);
      Element element1 = element0.appendElement("{<yWN.(");
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueNot("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("3.o8!}QV@ PQ>c", "3.o8!}QV@ PQ>c");
      Document document1 = document0.normalise();
      document1.getElementsByIndexEquals((-1253));
      Elements elements0 = document0.getElementsByTag("3.o8!}QV@ PQ>c");
      Element element0 = document0.appendChildren(elements0);
      Element element1 = element0.val("3.o8!}QV@ PQ>c");
      element1.getElementsByAttributeValueMatching("class", "3.o8!}QV@ PQ>c");
      element0.parents();
      element0.appendChild(element1);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("net filled={}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("m$<y;`Fb&*& 2L/9q", "m$<y;`Fb&*& 2L/9q");
      HttpConnection httpConnection0 = new HttpConnection();
      PriorityQueue<Connection.KeyVal> priorityQueue0 = new PriorityQueue<Connection.KeyVal>();
      Connection connection0 = httpConnection0.data((Collection<Connection.KeyVal>) priorityQueue0);
      Document document1 = document0.connection(connection0);
      document1.previousElementSiblings();
      document1.append("</");
      Element element0 = document1.html("");
      Connection.Method connection_Method0 = Connection.Method.HEAD;
      httpConnection0.method(connection_Method0);
      Element element1 = element0.appendElement("Content-Type");
      document1.nodelistChanged();
      element1.prepend("");
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element";
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.is("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "Failure while notifying listener ";
      Document document0 = parser0.parseInput("uX!X4`AE>", "Failure while notifying listener ");
      DataNode dataNode0 = new DataNode("Failure while notifying listener ");
      dataNode0.setBaseUri("G]+}b?|8B3]m=");
      DataNode dataNode1 = dataNode0.clone();
      Element element0 = document0.doClone(dataNode1);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      element0.selectFirst((Evaluator) evaluator_AllElements0);
      Document document1 = document0.parser(parser0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      int int0 = 2138;
      Document document3 = document2.clone();
      parser0.setTrackErrors((-677));
      Element element1 = document3.body();
      element1.id("org.eclipse.jetty.io.ManagedSelector$Connect");
      document3.hasAttr("sBn6!Ba?G+_kn\"8N2");
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValueMatching("uX!X4`AE>", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      document0.hasSameValue((Object) null);
      document0.normalName();
      Document document1 = (Document)document0.prependText("#root");
      document1.id("Insert position out of bounds.");
      Document document2 = (Document)document1.clearAttributes();
      document2.reparentChild(document0);
      document1.getElementsByAttributeValueMatching("#root", "org.jsoup.nodes.PseudoTextElement");
      document0.isBlock();
      document0.isBlock();
      document1.childElementsList();
      Document document3 = (Document)document1.prependText("");
      Document document4 = (Document)document1.prependChild(document3);
      // Undeclared exception!
      try { 
        document4.getElementsByAttributeValue("VvN)d\"W[i?`+dy@%", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "PathWatcher@";
      Document document0 = new Document("PathWatcher@");
      // Undeclared exception!
      try { 
        document0.prependChildren((Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      String string0 = "2q%t~aecik9<";
      Document document0 = Document.createShell("2q%t~aecik9<");
      int int0 = (-468);
      // Undeclared exception!
      try { 
        document0.child((-468));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      String string0 = "'UTQ#za\\U$r4mpp'ZQv";
      Element element0 = new Element("'UTQ#zaU$r4mpp'ZQv");
      element0.getElementsByAttributeStarting("'UTQ#zaU$r4mpp'ZQv");
      CDataNode cDataNode0 = new CDataNode("'UTQ#zaU$r4mpp'ZQv");
      CDataNode cDataNode1 = cDataNode0.clone();
      cDataNode1.coreValue();
      element0.ensureChildNodes();
      cDataNode1.clearAttributes();
      cDataNode1.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        element0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("#H(z ?dv{TR _4-(3", "#H(z ?dv{TR _4-(3");
      document0.prependText("#H(z ?dv{TR _4-(3");
      Element element0 = document0.tagName("#H(z ?dv{TR _4-(3");
      document0.normalise();
      String string0 = "j4Z2oYo96=d[{EnNi";
      element0.getElementsByAttribute("j4Z2oYo96=d[{EnNi");
      String string1 = "hTZBRM0UJ`2#FEJ;Rty";
      element0.getElementsByAttributeStarting("hTZBRM0UJ`2#FEJ;Rty");
      element0.getElementsByAttributeStarting("j4Z2oYo96=d[{EnNi");
      String string2 = "Vq+R-5-Y/s ~aDzx";
      // Undeclared exception!
      try { 
        element0.select("Vq+R-5-Y/s ~aDzx");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'R-5-Y/s': unexpected token at '/s'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      String string0 = "BEX64uT}5%5lVQ3";
      Element element0 = new Element("BEX64uT}5%5lVQ3");
      Element element1 = element0.clearAttributes();
      element1.data();
      element1.data();
      // Undeclared exception!
      try { 
        element1.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("9)9Padm*!l");
      document0.html("9)9Padm*!l");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("9)9Padm*!l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 9)9Padm*!l
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RKjn,!(o{PX{ID3#mn");
      String string0 = "\\s+";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("RKjn,!(o{PX{ID3#mn", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("s+");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "RKjn,!(o{PX{ID3#mn", attributes0);
      Document document0 = Document.createShell("RKjn,!(o{PX{ID3#mn");
      Document document1 = document0.clone();
      FormElement formElement1 = formElement0.addElement(document1);
      attributes0.getIgnoreCase("RKjn,!(o{PX{ID3#mn");
      FormElement formElement2 = formElement1.clone();
      document0.addClass("RKjn,!(o{PX{ID3#mn");
      Element element0 = document0.lastElementSibling();
      element0.childrenSize();
      String string1 = "";
      // Undeclared exception!
      try { 
        formElement2.getElementsByAttributeValueStarting("", "RKjn,!(o{PX{ID3#mn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      String string0 = "C+e$B94u@";
      String string1 = "org.eclipse.jetty.util.Callback";
      Document document0 = Parser.parse("C+e$B94u@", "org.eclipse.jetty.util.Callback");
      document0.childrenSize();
      document0.getElementsByAttribute("C+e$B94u@");
      Document document1 = document0.clone();
      document1.setSiblingIndex(124);
      String string2 = "baseUri";
      Element element0 = document1.toggleClass("baseUri");
      element0.getElementsByAttributeValueEnding("baseUri", "org.eclipse.jetty.util.Callback");
      // Undeclared exception!
      try { 
        element0.child(470);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 470, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      Element element2 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element3 = element1.wrap("br");
      element3.getElementsByAttributeValueMatching("", pattern0);
      String string2 = "9,`";
      Element element4 = element1.prependText("9,`");
      element4.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        element2.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("!");
      Element element0 = document0.body();
      document0.wholeText();
      Document document1 = element0.ownerDocument();
      document1.getElementsByClass("!");
      Document document2 = document1.shallowClone();
      Element element1 = document2.append("!");
      element1.prependText("");
      element0.isBlock();
      document1.getElementsByIndexEquals((-3182));
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Charset.defaultCharset();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document0.getElementsByIndexGreaterThan(60);
      document0.previousElementSiblings();
      document0.getAllElements();
      document0.data();
      document0.childElementsList();
      document1.ensureChildNodes();
      // Undeclared exception!
      try { 
        document1.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      String string0 = "1$TRnX";
      Document document0 = Parser.parse("KSTsruGjvyJxwg+U2", "1$TRnX");
      document0.toggleClass("KSTsruGjvyJxwg+U2");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.quirksMode(document_QuirksMode0);
      Element element0 = document0.empty();
      Element element1 = document0.body();
      element1.ownText();
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("", "textarea");
      Document document1 = document0.clone();
      document1.className();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.clone();
      document1.val("");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Document document1 = document0.clone();
      document1.className();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("*M");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Document document1 = document0.shallowClone();
      Node[] nodeArray0 = new Node[5];
      Comment comment0 = new Comment(".@2qY{<f");
      Comment comment1 = comment0.clone();
      Comment comment2 = comment1.setData("s+");
      nodeArray0[0] = (Node) comment2;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      // Undeclared exception!
      try { 
        document1.insertChildren((-839), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("");
      HttpConnection httpConnection0 = new HttpConnection();
      Map<String, String> map0 = document0.dataset();
      Connection connection0 = httpConnection0.headers(map0);
      Document document1 = document0.connection(connection0);
      document1.appendTo(document0);
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Connector-Scheduler-%x");
      Element element0 = new Element(tag0, "");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.forEachNode(consumer0);
      String string0 = "uuY`Qy@AL3rnk_}";
      element1.getElementsByAttributeValueMatching("Connector-Scheduler-%x", "uuY`Qy@AL3rnk_}");
      String string1 = "{} addIfAbsent added {}";
      // Undeclared exception!
      try { 
        element0.select("{} addIfAbsent added {}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{} addIfAbsent added {}': unexpected token at '{} addIfAbsent added {}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
      String string0 = "Pattern syntax error: ";
      String string1 = null;
      // Undeclared exception!
      try { 
        Parser.parse("Pattern syntax error: ", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      DataNode dataNode0 = new DataNode("unwrap net_filled={} {} encryptedBuffer={} unwrapBuffer={} appBuffer={}");
      dataNode0.childNodesAsArray();
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      String string0 = "7r+|vD*hG&.k";
      Document document0 = new Document("7r+|vD*hG&.k");
      Document document1 = document0.clone();
      document1.title("kE?C");
      Element element0 = document0.attr("", "7r+|vD*hG&.k");
      element0.clone();
      document1.removeClass("");
      // Undeclared exception!
      try { 
        document1.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Tag tag0 = Tag.valueOf("n;AE_1T!&HqW]?kivAK");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("kY^XU/{HN&MYXIoui", false);
      Attributes attributes2 = attributes1.add("n;AE_1T!&HqW]?kivAK", "kY^XU/{HN&MYXIoui");
      Element element0 = new Element(tag0, "n;AE_1T!&HqW]?kivAK", attributes2);
      element0.getElementsByAttributeValueStarting("n;AE_1T!&HqW]?kivAK", "!");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parse("KgUckJA-`<", "");
      Element element0 = document0.body();
      int int0 = 1003;
      Function<Integer, ByteBufferPool.Bucket> function0 = (Function<Integer, ByteBufferPool.Bucket>) mock(Function.class, new ViolatedAssumptionAnswer());
      document0.wholeOwnText();
      MappedByteBufferPool mappedByteBufferPool0 = new MappedByteBufferPool(1275, 1003, function0, 1275, 5L);
      mappedByteBufferPool0.getDirectByteBufferCount();
      element0.removeClass("");
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool(mappedByteBufferPool0);
      // Undeclared exception!
      try { 
        ByteBuffer.wrap((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Tag tag0 = Tag.valueOf("iuE");
      Element element0 = new Element(tag0, "2a5gxabOp2");
      element0.nodelistChanged();
      element0.wholeOwnText();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      String string0 = "]";
      Document document0 = Parser.parse("]", "]");
      String string1 = "f";
      document0.getElementsByAttributeValueContaining("]", "option[selected]");
      Element element0 = document0.html("f");
      element0.getElementsContainingOwnText("f");
      // Undeclared exception!
      try { 
        document0.select("]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ']': unexpected token at ']'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("Read timeout", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching("", pattern0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Unexpected token type: ", "Unexpected token type: ");
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      document1.siblingElements();
      Evaluator.ContainsWholeOwnText evaluator_ContainsWholeOwnText0 = new Evaluator.ContainsWholeOwnText("Unexpected token type: ");
      document0.select((Evaluator) evaluator_ContainsWholeOwnText0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("jv/lP", parseSettings0);
      Element element0 = new Element(tag0, "");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      String string0 = "z?>f@JCi-3gFm)&9'a";
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "z?>f@JCi-3gFm)&9'a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Tag tag0 = Tag.valueOf("CONTINUE");
      Attributes attributes0 = new Attributes();
      Tag.valueOf("CONTINUE");
      FormElement formElement0 = new FormElement(tag0, "CONTINUE", attributes0);
      FormElement formElement1 = formElement0.clone();
      FormElement formElement2 = formElement1.addElement(formElement0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "CONTINUE";
      stringArray0[1] = "CONTINUE";
      stringArray0[2] = "CONTINUE";
      stringArray0[3] = "CONTINUE";
      stringArray0[4] = "CONTINUE";
      attributes0.vals = stringArray0;
      FormElement formElement3 = (FormElement)formElement2.text("  B'{U=Oi(");
      formElement0.textNodes();
      formElement2.ensureChildNodes();
      formElement3.hasChildNodes();
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.html();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document1.forEachNode(consumer0);
      // Undeclared exception!
      try { 
        document1.selectXpath("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("d$]Id].R]", ":nth-child(%d)");
      Elements elements0 = document0.children();
      Document document1 = document0.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.normalise();
      Pattern pattern0 = Pattern.compile("", (-3736));
      document3.getElementsMatchingOwnText(pattern0);
      document3.children();
      document0.children();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":nth-child(%d)");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) document3;
      objectArray0[1] = (Object) elements0;
      objectArray0[2] = (Object) pattern0;
      objectArray0[3] = (Object) document3;
      objectArray0[4] = (Object) document3;
      objectArray0[5] = (Object) parser0;
      objectArray0[6] = (Object) pattern0;
      objectArray0[7] = (Object) parser0;
      objectArray0[8] = (Object) parser0;
      mockPrintWriter0.printf("N!I)xV^!U", objectArray0);
      int int0 = (-285);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Charset.forName("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("5v2]vRR-Z:PGH^}", "on");
      document0.isBlock();
      Element element0 = document0.tagName("5v2]vRR-Z:PGH^}");
      element0.text("on");
      document0.getElementsMatchingOwnText("7Sdyv");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      String string0 = "C";
      Document document0 = Parser.parseBodyFragment("C", "C");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Document document2 = document1.normalise();
      // Undeclared exception!
      try { 
        document2.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document("chf`-C99`&s-YoL");
      Attributes attributes0 = new Attributes();
      document0.title("");
      Attributes attributes1 = attributes0.put("", "_)kl`eye5!olv{9zm");
      document0.attributes = attributes1;
      document0.hasAttributes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "+- ";
      Document document0 = Parser.parseBodyFragment("+- ", "+- ");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Tag tag0 = Tag.valueOf("o9H<@!");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("o9H<@!", "m");
      Attributes attributes2 = attributes1.put("o9H<@!", "m");
      Attributes attributes3 = attributes2.clone();
      FormElement formElement0 = new FormElement(tag0, "o9H<@!", attributes3);
      formElement0.childElementsList();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S", "S");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser.xmlParser();
      Parser.xmlParser();
      Document document0 = Parser.parse("#root", "2XZJba");
      ArrayList<DataNode> arrayList0 = new ArrayList<DataNode>();
      document0.prependChildren(arrayList0);
      document0.text("v=ce:]*");
      document0.val();
      document0.siblingNodes();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("chf`-C99`&s-YoL");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      document0.closest((Evaluator) evaluator_IsLastChild0);
      document0.outerHtml();
      Attributes attributes0 = new Attributes();
      document0.title("");
      attributes0.put("", "_)kl`eye5!olv{9zm");
      document0.hasAttributes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      String[] stringArray0 = new String[8];
      httpConnection0.cookie(".", "a&");
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      Evaluator.AttributeStarting evaluator_AttributeStarting0 = new Evaluator.AttributeStarting("}.^Q");
      document0.selectFirst((Evaluator) evaluator_AttributeStarting0);
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "%0l=R}K~inl3l5";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "Content-Encoding";
      httpConnection0.data(stringArray0);
      document0.hasText();
      document0.prependText("%0l=R}K~inl3l5");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("{} onFillInterestedFailed {}", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.parser(parser0);
      document0.data();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      Element element0 = document1.removeAttr("");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Parser.parseFragment("", element0, "org.jsoup.nodes.Element$1", parseErrorList0);
      Parser.xmlParser();
      element0.getElementsByIndexEquals((-2302));
      document0.childrenSize();
      document0.textNodes();
      document0.previousElementSibling();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)element0.forEachNode(consumer0);
      Document document4 = (Document)document2.prepend("{} onFillInterestedFailed {}");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document4;
      nodeArray0[1] = (Node) element0;
      MockFile mockFile0 = (MockFile)MockFile.createTempFile("org.jsoup.nodes.Element$1", "mW V/V=5");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      document3.outerHtml((Appendable) mockFileWriter0);
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document3;
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) document3;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Unexpected token type: ", "Unexpected token type: ");
      Element element0 = document0.head();
      document0.hasText();
      Document document1 = element0.ownerDocument();
      document1.siblingElements();
      Evaluator.ContainsWholeOwnText evaluator_ContainsWholeOwnText0 = new Evaluator.ContainsWholeOwnText("Unexpected token type: ");
      document0.select((Evaluator) evaluator_ContainsWholeOwnText0);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      String string0 = ">EfG&~cp";
      Document document0 = Parser.parseBodyFragment(">EfG&~cp", ">EfG&~cp");
      document0.outerHtml();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.attributes();
      Element element0 = document0.attr("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
      element0.childNodes();
      element0.getElementsByAttributeValueEnding("hk2e\"lrfcg7jj", ">EfG&~cp");
      Element element1 = document0.root();
      element1.getElementsMatchingOwnText("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool((ByteBufferPool) null);
      Class<FormElement> class0 = FormElement.class;
      Collection<FormElement> collection0 = leakTrackingByteBufferPool0.getContainedBeans(class0);
      element1.getElementsByAttribute("FAILED");
      element1.appendChildren(collection0);
      element1.nextElementSiblings();
      element0.children();
      element0.classNames();
      // Undeclared exception!
      try { 
        element1.selectXpath("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [<html>
         //  <head></head>
         //  <body>
         //   &gt;EfG&amp;~cp
         //  </body>
         // </html>]: javax.xml.transform.TransformerException: A location path was expected, but the following token was encountered:  <
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = ">EfG&~cp";
      Document document0 = Parser.parseBodyFragment(">EfG&~cp", ">EfG&~cp");
      document0.outerHtml();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.attributes();
      Element element0 = document0.attr("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>", "<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
      element0.childNodes();
      element0.getElementsByAttributeValueEnding("hk2e\"lrfcg7jj", ">EfG&~cp");
      Element element1 = document0.root();
      element1.getElementsMatchingOwnText("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
      LeakTrackingByteBufferPool leakTrackingByteBufferPool0 = new LeakTrackingByteBufferPool((ByteBufferPool) null);
      Class<FormElement> class0 = FormElement.class;
      Collection<FormElement> collection0 = leakTrackingByteBufferPool0.getContainedBeans(class0);
      element1.getElementsByAttribute("FAILED");
      element1.appendChildren(collection0);
      Element element2 = element1.val("STARTED");
      element2.nextElementSiblings();
      element0.children();
      element0.classNames();
      // Undeclared exception!
      try { 
        element1.selectXpath("<html>\n <head></head>\n <body>\n  &gt;EfG&amp;~cp\n </body>\n</html>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [<html>
         //  <head></head>
         //  <body>
         //   &gt;EfG&amp;~cp
         //  </body>
         // </html>]: javax.xml.transform.TransformerException: A location path was expected, but the following token was encountered:  <
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Element element0 = new Element("$N1#jaGj");
      element0.wholeText();
      Element element1 = element0.prepend("$N1#jaGj");
      element1.textNodes();
      element0.getAllElements();
      element0.parents();
      element1.getElementsByAttributeValueMatching("$N1#jaGj", "");
      element1.elementSiblingIndex();
      element1.clearAttributes();
      Element element2 = element1.shallowClone();
      element2.html();
      Element element3 = element2.removeClass("");
      // Undeclared exception!
      try { 
        element3.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = new Document("Content-Type");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Content-Type";
      stringArray0[1] = "Content-Type";
      stringArray0[2] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[3] = "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36";
      stringArray0[4] = "Content-Type";
      stringArray0[5] = "%0l=R}K~inl3l5";
      stringArray0[6] = "multipart/form-data";
      stringArray0[7] = "Content-Encoding";
      httpConnection0.data(stringArray0);
      document0.hasText();
      Element element0 = document0.prependText("");
      element0.getElementsByAttributeValue("Content-Encoding", "9*c34D|Z:y}");
      Pattern pattern0 = Pattern.compile("application/x-www-form-urlencoded");
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      element0.closest((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document(" stored ");
      HttpConnection httpConnection0 = new HttpConnection();
      String string0 = Node.EmptyString;
      document0.getElementsByIndexEquals(8240);
      document0.prependElement(" stored ");
      Element element0 = document0.head();
      document0.appendTo(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(2284);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings2.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings3.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.shouldIndent(document_OutputSettings4);
      Element element1 = element0.empty();
      // Undeclared exception!
      try { 
        element1.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RKjn,!(o{PX{ID3#mn");
      String string0 = "\\s+";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeTag("$n1#jaagj");
      Tag.valueOf("RKjn,!(o{PX{ID3#mn", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("s+");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "RKjn,!(o{PX{ID3#mn", attributes0);
      Document document0 = Document.createShell("RKjn,!(o{PX{ID3#mn");
      Document document1 = document0.clone();
      FormElement formElement1 = formElement0.addElement(document1);
      attributes0.getIgnoreCase("RKjn,!(o{PX{ID3#mn");
      FormElement formElement2 = formElement1.clone();
      document0.addClass("RKjn,!(o{PX{ID3#mn");
      Element element0 = document0.lastElementSibling();
      element0.childrenSize();
      String string1 = "";
      // Undeclared exception!
      try { 
        formElement2.getElementsByAttributeValueStarting("", "RKjn,!(o{PX{ID3#mn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      Element element1 = element0.appendElement("SnrD{_/zFk%|8YAS");
      document0.ownText();
      document0.getElementsByAttributeValueStarting("br", "br");
      document0.children();
      Element element2 = document0.shallowClone();
      document0.data();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element3 = element1.wrap("br");
      element3.toggleClass("br");
      element3.getElementsByAttributeValueMatching("", pattern0);
      String string2 = "9,`";
      Element element4 = element1.prependText("9,`");
      element4.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        element2.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "-)zY`2VVJK<(C_rm5";
      String string1 = "d4,";
      Document document0 = Parser.parseBodyFragment("-)zY`2VVJK<(C_rm5", "d4,");
      Element element0 = document0.append("-)zY`2VVJK<(C_rm5");
      document0.ownText();
      document0.children();
      Element element1 = document0.shallowClone();
      document0.data();
      Pattern pattern0 = Pattern.compile("br", (-2098));
      pattern0.split((CharSequence) "-)zY`2VVJK<(C_rm5");
      document0.className();
      pattern0.splitAsStream("-)zY`2VVJK<(C_rm5");
      document0.getElementsMatchingOwnText(pattern0);
      Element element2 = element0.wrap("br");
      element1.firstElementSibling();
      element2.getElementsByAttributeValueMatching("", pattern0);
      Element element3 = document0.prependText("9,`");
      element3.getElementsMatchingText(pattern0);
      document0.elementSiblingIndex();
      element0.appendText("9,`");
      element1.hasClass("&F)");
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.REMOVE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element3.filter(nodeFilter0);
      element3.toggleClass("class");
      // Undeclared exception!
      try { 
        element3.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("selected {} {} {} ");
      document0.nextElementSiblings();
      Document document1 = document0.shallowClone();
      Element element0 = document1.text("vLX");
      Elements elements0 = element0.getElementsByIndexLessThan(1583);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Element element1 = element0.forEachNode(consumer0);
      // Undeclared exception!
      try { 
        element1.appendChildren(elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = ">Cq\"_{|AQm\\32J";
      Element element0 = new Element(">Cq\"_{|AQm\u001AJ");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      element0.forEach(consumer0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.id("i4");
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('B');
      int int0 = 1533;
      charArrayWriter0.writeTo(charArrayWriter1);
      PipedReader pipedReader0 = new PipedReader();
      try { 
        pipedReader0.mark(499);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // mark() not supported
         //
         verifyException("java.io.Reader", e);
      }
  }
}
