/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:34:56 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Node;
import org.jsoup.parser.Parser;
import org.jsoup.select.Collector;
import org.jsoup.select.CombiningEvaluator;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeTraversor;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class NodeTraversor_ESTest extends NodeTraversor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NSBZ>x$%0U`9A%%u", "NSBZ>x$%0U`9A%%u");
      Elements elements0 = document0.getElementsContainingOwnText("NSBZ>x$%0U`9A%%u");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_IsLastOfType0);
      Elements elements1 = elements0.filter(collector_FirstFinder0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = Document.createShell("vgr");
      CombiningEvaluator.Or combiningEvaluator_Or0 = new CombiningEvaluator.Or();
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(combiningEvaluator_Or0);
      Elements elements0 = document0.getElementsMatchingOwnText("");
      NodeTraversor.filter((NodeFilter) collector_FirstFinder0, elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeTraversor.filter((NodeFilter) null, (Node) null);
      assertEquals(NodeFilter.FilterResult.CONTINUE, nodeFilter_FilterResult0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NSBZ>x$%0U`9A%%u", "NSBZ>x$%0U`9A%%u");
      Elements elements0 = document0.getElementsContainingOwnText("NSBZ>x$%0U`9A%%u");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      NodeTraversor.traverse(nodeVisitor0, elements0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      NodeTraversor nodeTraversor0 = new NodeTraversor();
  }
}
