/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 18:53:57 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.helper.Consumer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("8x");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.shouldIndent(document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]L", "]L");
      document0.appendElement("]L");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("KVnNX7(ggeF<", "KVnNX7(ggeF<");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEach(consumer0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("FPos9#S*$X");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "-J']0 0", attributes0);
      PseudoTextElement pseudoTextElement1 = (PseudoTextElement)pseudoTextElement0.clearAttributes();
      pseudoTextElement1.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("input");
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(true);
      Element element1 = element0.text("<br>");
      MockFileWriter mockFileWriter0 = new MockFileWriter("br", true);
      element1.outerHtmlTail(mockFileWriter0, 803, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("2jBvIF'");
      document0.title("2jBvIF'");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("br");
      File file0 = MockFile.createTempFile("<br>", "Children collection to be inserted must not be null.");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(mockPrintStream0, (-1436010313), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, (-407), document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("23d}3Vu{yHl_m{[", "org.jsoup.select.evaluator$indexevaluator");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("type");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "1(nCoH~:4S}|Z~", attributes0);
      pseudoTextElement0.val("qR#VRYK#%2)b>k");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("x", "x");
      document0.val("x");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("br");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("systemId", "systemId");
      document0.addClass("systemId");
      document0.toggleClass("systemId");
      document0.toggleClass("systemId");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("Gzmg~k>'-PSiyy7K", "Gzmg~k>'-PSiyy7K");
      document0.toggleClass("|YdY&O[H");
      document0.toggleClass("|YdY&O[H");
      document0.hasClass("|YdY&O[H");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("systemId", "systemId");
      Element element0 = document0.addClass("systemId");
      element0.toggleClass("rRN");
      element0.hasClass("org.jsoup.parser.ParseError");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("2 j]vdF'", "2 j]vdF'");
      document0.addClass("$ht+HN\"");
      document0.toggleClass("baseUri");
      document0.toggleClass("2 j]vdF'");
      document0.hasClass("baseUri");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("2 j]vdF'");
      Element element0 = document0.toggleClass(" />");
      document0.toggleClass(" />");
      element0.hasClass(" />");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.addClass("");
      Element element0 = document0.toggleClass("");
      element0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("User agent must not be null", "User agent must not be null");
      Element element0 = document0.toggleClass("b");
      element0.hasClass("User agent must not be null");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("AA^X,{_M-EV", "AA^X,{_M-EV");
      Element element0 = document0.toggleClass("AA^X,{_M-EV");
      element0.hasClass("Input stream already read and parsed, cannot re-read.");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("2jBvF'", "2jBvF'");
      CDataNode cDataNode0 = new CDataNode("2jBvF'");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("AA^X,{_M-EV", "AA^X,{_M-EV");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      Comment comment0 = new Comment("Input stream already read and parsed, cannot re-read.");
      nodeArray0[6] = (Node) comment0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.data();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g:Uh=>AsH>b!CYp==F", "g:Uh=>AsH>b!CYp==F");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("g:uh=>ash>b!cyp==f");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("(W3(1$A1PA6L,j5", "(W3(1$A1PA6L,j5");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head></head>\n <body>\n  X\n </body>\n</html>", "X");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2jBvF'", "2jBvF'");
      Element element0 = document0.appendElement("br");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("]wgav?2;_8w");
      document0.wholeOwnText();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("sup", true);
      document0.appendChild(xmlDeclaration0);
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("\"k<$8+mo|`1PO");
      Node[] nodeArray0 = new Node[2];
      CDataNode cDataNode0 = new CDataNode("#root");
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("article", "article");
      Element element0 = document0.appendElement("article");
      element0.before("article");
      document0.getElementsMatchingText("article");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("                 ", "                 ");
      document0.title("                 ");
      Elements elements0 = document0.getElementsMatchingText("                 ");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m!&u", "br");
      document0.appendElement("br");
      document0.getElementsMatchingText("summary");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g:Uh=>AsH>b!CYp==F", "g:Uh=>AsH>b!CYp==F");
      Node[] nodeArray0 = new Node[1];
      DataNode dataNode0 = new DataNode("g:uh=>ash>b!cyp==f");
      nodeArray0[0] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingText("2 j]vdF'");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("article", "article");
      document0.id("article");
      Element element0 = document0.getElementById("article");
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`%]xM.,", "`%]xM.,");
      Element element0 = document0.getElementById("`%]xM.,");
      assertNull(element0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2 j]vdF'", "2 j]vdF'");
      document0.parentNode = (Node) document0;
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2 j]vdF'", "2 j]vdF'");
      document0.parentNode = (Node) document0;
      document0.lastElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("meta", "meta");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.lastElementSibling();
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      Element element1 = element0.firstElementSibling();
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]L", "]L");
      Element element0 = document0.appendElement("]L");
      Element element1 = element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("AA^X,{_M-EV", "AA^X,{_M-EV");
      Document document1 = (Document)document0.firstElementSibling();
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("/kSD9lZDpVtoTs");
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2 j]vdF'", "2 j]vdF'");
      Element element0 = document0.body();
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("ae)r5v-&te?<\"a(y@qp");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c,", "c,");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      Tag tag0 = Tag.valueOf("c,");
      CDataNode cDataNode0 = new CDataNode("c,");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "c,", attributes0);
      nodeArray0[3] = (Node) pseudoTextElement0;
      document0.addChildren(nodeArray0);
      document0.nextElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator", "org.jsoup.select.StructuralEvaluator");
      Element element0 = document0.head();
      element0.after("org.jsoup.select.StructuralEvaluator");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zitn{m1d", "zitn{m1d");
      Element element0 = document0.toggleClass("zitn{m1d");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("valUue", "valUue");
      document0.id("org.jsoup.parser.parseerror");
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("article", "article");
      Element element0 = document0.id("article");
      String string0 = element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("#article", string0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("#]k9}[U[G");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("ba w 3gr`");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-131), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gzm`g~k}>'-PSiyy7K", "Gzm`g~k}>'-PSiyy7K");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(1991, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("]wgav?2;_yw");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>(5148, 5148);
      // Undeclared exception!
      try { 
        element0.insertChildren(5148, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("2 ?]va,iF]", "2 ?]va,iF]");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-480), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IndexEvaluator", "org.jsoup.select.Evaluator$IndexEvaluator");
      Element element0 = document0.appendElement("dX");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      element0.closest((Evaluator) evaluator_IsFirstChild0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Element element0 = new Element("baseuri");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Element element1 = element0.closest((Evaluator) evaluator_IsRoot0);
      assertEquals("baseuri", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("ZcO;o", "ZcO;o");
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("m", ">C");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("ZcO;o", "ZcO;o");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)63;
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte) (-80);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "raKp }B?o2t0[J;@");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.appendChild(document0);
      HttpConnection httpConnection0 = new HttpConnection();
      element0.previousSibling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      httpConnection0.cookie("br", "org.jsoup.nodes.Element");
      document1.getElementsByIndexEquals((byte) (-80));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = new Document("2j]vdF'");
      Element element0 = document0.head();
      element0.parents();
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("x", "x");
      Element element0 = document0.body();
      element0.before((Node) document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("Referer", "Referer");
      Element element0 = document0.body();
      element0.shallowClone();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("%Ug|jZuHAkrO<?M1");
      Attributes attributes0 = new Attributes();
      document0.attributes = attributes0;
      document0.appendElement("%Ug|jZuHAkrO<?M1");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Elements elements0 = document0.getElementsByAttributeValueNot("textarea", "textarea");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "</", attributes0);
      FormElement formElement1 = formElement0.clone();
      boolean boolean0 = formElement1.hasChildNodes();
      assertEquals(1, attributes0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`qE");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`qE", attributes0);
      boolean boolean0 = formElement0.hasChildNodes();
      assertFalse(attributes0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("}p`Q*Q", "}p`Q*Q");
      // Undeclared exception!
      try { 
        document0.forEachNode((Consumer<? super Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element element0 = new Element("value");
      Elements elements0 = element0.getElementsByIndexGreaterThan((-2485));
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("E83-+(+5/");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Element element0 = new Element("b?");
      Elements elements0 = element0.getElementsByTag("b?");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      Element element0 = document0.removeAttr("");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("title", "title");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gzm`g~k}>'-PSiyy7K", "Gzm`g~k}>'-PSiyy7K");
      Element element0 = document0.removeClass("Gzm`g~k}>'-PSiyy7K");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("baseUri");
      // Undeclared exception!
      try { 
        element0.appendChildren((Collection<? extends Node>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element("bh");
      String string0 = element0.outerHtml();
      assertEquals("<bh></bh>", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("zitn{m1d", "zitn{m1d");
      document0.getElementsByAttribute("zitn{m1d");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Element element0 = new Element("vae");
      Class<DocumentType> class0 = DocumentType.class;
      List<DocumentType> list0 = element0.selectXpath("vae", class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("b");
      Element element1 = element0.appendTo(element0);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("KVnNX7(ggeF<", "KVnNX7(ggeF<");
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("2 ?]va,iF]");
      Elements elements0 = document0.getElementsByAttributeValueContaining("2 ?]va,iF]", "2 ?]va,iF]");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]L", "]L");
      // Undeclared exception!
      try { 
        document0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsContainingText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`%]xM.,", "`%]xM.,");
      Elements elements0 = document0.getElementsByClass("`%]xM.,");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{J3h&v}={!^9`(p@", "{J3h&v}={!^9`(p@");
      document0.getElementsByAttributeValueEnding("{J3h&v}={!^9`(p@", "{J3h&v}={!^9`(p@");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bAase9rx", "bAase9rx");
      document0.is("bAase9rx");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueMatching("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("Gzm`g~k}>'-PSiyy7K", "Gzm`g~k}>'-PSiyy7K");
      Element element0 = document0.wrap("Gzm`g~k}>'-PSiyy7K");
      assertSame(document0, element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("b");
      Element element1 = element0.id("b");
      String string0 = element1.cssSelector();
      assertEquals("#b", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("A{ep|no((zu~5ggJ!");
      // Undeclared exception!
      try { 
        document0.select((Evaluator) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("KVnNX7(ggeF<");
      Elements elements0 = element0.getElementsByAttributeStarting("KVnNX7(ggeF<");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("2j]vdF'");
      Elements elements0 = document0.parents();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("(W3(1$A1PA6L,j5", "(W3(1$A1PA6L,j5");
      document0.getElementsByIndexLessThan(3196);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IndexEvaluator", "org.jsoup.select.Evaluator$IndexEvaluator");
      document0.getElementsMatchingOwnText("dX");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("]L");
      document0.prepend("]L");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      LinkedList<PseudoTextElement> linkedList0 = new LinkedList<PseudoTextElement>();
      Element element0 = document0.prependChildren(linkedList0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator", "org.jsoup.select.StructuralEvaluator");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      document0.getElementsByAttributeValueStarting("value", "value");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("K<PZlV23eU|hj+y}US");
      document0.getElementsByAttributeValue("K<PZlV23eU|hj+y}US", "K<PZlV23eU|hj+y}US");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("KVnNX7(ggeF<");
      Document document1 = (Document)document0.attr("pUta=?8", true);
      assertEquals("KVnNX7(ggeF<", document1.location());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I/+@dp", "I/+@dp");
      document0.html("I/+@dp");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("2 j]vdF'");
      Elements elements0 = document0.getElementsContainingOwnText("GW%r hM*&Hag(e_2:rt");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse(";3$gKA&mM]*", ";3$gKA&mM]*");
      Map<String, String> map0 = document0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("article", "article");
      Element element0 = document0.tagName("article");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("AA^X,{_M-EV", "AA^X,{_M-EV");
      // Undeclared exception!
      try { 
        document0.closest("AA^X,{_M-EV");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'AA^X,{_M-EV': unexpected token at '^X,{_M-EV'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gzm`g~k}>'-PSiyy7K", "Gzm`g~k}>'-PSiyy7K");
      document0.prependText("Gzm`g~k}>'-PSiyy7K");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("head");
      // Undeclared exception!
      try { 
        document0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("Gzm`g~k}>'-PSiyy7K", "Gzm`g~k}>'-PSiyy7K");
      int int0 = document0.childrenSize();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.selectXpath("br");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0
         //
         verifyException("java.util.Collections$EmptyList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("23d}3Vu{yHl_m{[", "org.jsoup.select.evaluator$indexevaluator");
      document0.title("kw?Y7");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2 j]vdF'", "2 j]vdF'");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Element element0 = new Element("bh");
      DataNode dataNode0 = new DataNode("html");
      element0.prependChild(dataNode0);
      element0.dataNodes();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Element element0 = new Element("]wgav?2;_yw");
      element0.appendText("]wgav?2;_yw");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("Gzm`g~k}>'-PSiyy7K");
      Elements elements0 = document0.children();
      assertTrue(elements0.isEmpty());
  }
}
