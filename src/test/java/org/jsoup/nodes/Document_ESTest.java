/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:16:27 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.net.CookieStore;
import java.net.Proxy;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.PriorityQueue;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.Connection;
import org.jsoup.helper.Consumer;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = new Document("Dd-.4n}y+:)*y(Iop");
      Document document1 = document0.shallowClone();
      document0.connection();
      Document document2 = document1.normalise();
      document2.setParentNode(document0);
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.nodeName();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document document0 = Parser.parse("6J", "6J");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.SKIP_CHILDREN;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Element element0 = document0.filter(nodeFilter0);
      element0.html("6J");
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document1 = document0.ownerDocument();
      // Undeclared exception!
      try { 
        document1.selectXpath("6J");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("6J", "6J");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.STOP;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document1 = (Document)document0.filter(nodeFilter0);
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte) (-119);
      byteArray0[2] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document1.ensureChildNodes();
      Document document2 = document0.ownerDocument();
      document1.getElementsByTag("6J");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document2.toggleClass("1'F.TcW8Ovp");
      document2.id("YWG|54=");
      document3.documentType();
      document0.appendText("");
      // Undeclared exception!
      try { 
        document3.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.prependText("");
      Document document1 = document0.normalise();
      document1.wholeOwnText();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("limitedQuirks");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // limitedQuirks
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.encoder();
      document_OutputSettings2.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = Document.createShell("");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.maxPaddingWidth(30);
      document0.previousSibling();
      document0.charset(charset0);
      document0.nodeName();
      document0.clearAttributes();
      document_OutputSettings2.prettyPrint();
      document0.attributesSize();
      document_OutputSettings1.escapeMode();
      document0.title("");
      Document document1 = (Document)document0.text("");
      document0.title();
      document0.clone();
      document1.title("A@3@?C@.PN=xwOc'`");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.outline(true);
      document_OutputSettings1.encoder();
      document_OutputSettings0.maxPaddingWidth();
      document_OutputSettings3.prepareEncoder();
      Document document0 = new Document("");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings3.coreCharset = entities_CoreCharset0;
      document_OutputSettings3.maxPaddingWidth(30);
      document0.previousSibling();
      document0.charset(charset0);
      document0.nodeName();
      Document document1 = (Document)document0.clearAttributes();
      document_OutputSettings2.prettyPrint();
      document0.attributesSize();
      document_OutputSettings3.escapeMode();
      document0.title("");
      document0.title();
      document0.clone();
      document1.title("A@3@?C@.PN=xwOc'`");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = Document.createShell("9");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.maxPaddingWidth(30);
      document0.previousSibling();
      document0.charset(charset0);
      document0.nodeName();
      Document document1 = (Document)document0.clearAttributes();
      document_OutputSettings2.prettyPrint();
      document0.attributesSize();
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.xhtml;
      document0.title("9");
      document0.text("9");
      document0.title();
      document0.clone();
      document1.connection();
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.9
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document("#root");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.dataNodes();
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      document1.getElementsByAttributeValueMatching("#root", "#root");
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = Parser.parseBodyFragment("%", "referer");
      HttpConnection httpConnection0 = new HttpConnection();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Content-Type";
      httpConnection0.cookie("%", "%");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(3);
      httpConnection0.parser(parser1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u>w[FbFiMkdz.blP");
      stringArray0[1] = "Content-Encoding";
      Connection connection0 = httpConnection0.data(stringArray0);
      Document document1 = document0.connection(connection0);
      Document document2 = document1.clone();
      document2.outputSettings();
      CookieStore cookieStore0 = httpConnection0.cookieStore();
      httpConnection0.cookieStore(cookieStore0);
      document0.text("multipart/form-data");
      httpConnection0.ignoreContentType(true);
      document0.connection();
      document1.updateMetaCharsetElement(true);
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("referer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.referer
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.encoder();
      document_OutputSettings2.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = new Document("");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.maxPaddingWidth(30);
      document0.previousSibling();
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document0.charset(charset0);
      document0.nodeName();
      document0.clearAttributes();
      document_OutputSettings2.prettyPrint();
      document0.attributesSize();
      document_OutputSettings1.escapeMode();
      document0.title("");
      Document document1 = (Document)document0.text("");
      document0.title();
      document0.clone();
      document1.outputSettings();
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.newInstance();
      document0.parser(parser2);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.encoder();
      document_OutputSettings2.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = Document.createShell("");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.maxPaddingWidth(30);
      document0.previousSibling();
      document0.charset(charset0);
      document0.nodeName();
      Document document1 = (Document)document0.clearAttributes();
      document_OutputSettings2.prettyPrint();
      document0.attributesSize();
      document_OutputSettings1.escapeMode();
      document0.title("");
      document0.text("");
      document0.title();
      document0.clone();
      document1.normalise();
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = new Document("Dd-.4n}y+:)*y(Iop");
      Document document1 = document0.shallowClone();
      Document document2 = document1.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.nodeName();
      document0.head();
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings3.prepareEncoder();
      String string0 = null;
      Document document0 = Parser.parse("test({}) -> [Hidden]", "Selector loop ignoring invalid key for channel {}");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.ignoreContentType(false);
      Document document1 = document0.connection(connection0);
      Parser parser0 = Parser.htmlParser();
      Document document2 = document1.parser(parser0);
      document2.connection((Connection) httpConnection0);
      document_OutputSettings2.clone();
      Document document3 = Parser.parseBodyFragment(",SsGew*a{cq", ",SsGew*a{cq");
      Document document4 = document3.clone();
      Document document5 = document4.ownerDocument();
      // Undeclared exception!
      try { 
        document5.title((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.clone();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.encoder();
      document_OutputSettings2.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = Document.createShell("");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.maxPaddingWidth(30);
      document0.previousSibling();
      document0.charset(charset0);
      document0.nodeName();
      Document document1 = (Document)document0.clearAttributes();
      document_OutputSettings2.prettyPrint();
      document0.attributesSize();
      document_OutputSettings1.escapeMode();
      document0.title("");
      document0.text("");
      document0.title();
      document0.clone();
      document1.updateMetaCharsetElement();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "?0mk5w+ .[2RY]G!dY");
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?0mk5w+ .[2RY]G!dY");
      Document document1 = document0.normalise();
      document1.setParentNode(document0);
      // Undeclared exception!
      document1.text("body");
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Document document0 = new Document("Dd-.4n}y+:)*y(Iop");
      Document document1 = document0.shallowClone();
      Document document2 = document1.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.nodeName();
      document3.title("#document");
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = new Document((String) null);
      HttpConnection httpConnection0 = new HttpConnection();
      Proxy proxy0 = Proxy.NO_PROXY;
      Connection connection0 = httpConnection0.proxy(proxy0);
      Document document1 = document0.connection(connection0);
      Document document2 = document1.normalise();
      Document document3 = document2.shallowClone();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      document3.parser(parser1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = new Document((String) null);
      Document document1 = document0.shallowClone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.connection();
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Referer", "Referer");
      document0.prependElement("body");
      document0.prependElement("Referer");
      document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth();
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = new Document("");
      HttpConnection httpConnection0 = new HttpConnection();
      document0.connection((Connection) httpConnection0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = new Document("'F0RKcX8G'9");
      document0.outerHtml();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.title();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      document_OutputSettings1.prepareEncoder();
      Document document1 = document0.parser((Parser) null);
      document1.appendChild(document0);
      PriorityQueue<CDataNode> priorityQueue0 = new PriorityQueue<CDataNode>();
      CDataNode cDataNode0 = new CDataNode("");
      priorityQueue0.add(cDataNode0);
      document1.appendChildren(priorityQueue0);
      document_OutputSettings2.clone();
      document_OutputSettings1.clone();
      Document document2 = document0.outputSettings(document_OutputSettings2);
      document2.ensureChildNodes();
      document_OutputSettings1.escapeMode();
      document_OutputSettings2.syntax();
      Document.QuirksMode.values();
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("r,9<h1%");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // r,9<h1%
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.toggleClass("#root");
      document0.body();
      // Undeclared exception!
      try { 
        document0.charset((Charset) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Document$QuirksMode", "");
      document0.body();
      Document document1 = document0.clone();
      Charset charset0 = Charset.defaultCharset();
      charset0.aliases();
      document0.ensureChildNodes();
      document1.charset(charset0);
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("org.jsoup.nodes.Document$QuirksMode");
      document1.is((Evaluator) evaluator_ContainsOwnText0);
      document0.attr("GdF", "#document");
      document1.body();
      document1.clone();
      document0.toString();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings1.prettyPrint(false);
      document1.outputSettings(document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Document.createShell("BJdN.i4RWhJGrkTg.");
      document0.setSiblingIndex(1);
      Consumer<Element> consumer0 = (Consumer<Element>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEach(consumer0);
      document0.doSetBaseUri("BJdN.i4RWhJGrkTg.");
      document0.title("");
      document0.head();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      document_OutputSettings4.outline(false);
      document_OutputSettings4.prettyPrint();
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(1789);
      Parser.parseFragment("", (Element) null, "d6de");
      Parser parser2 = parser1.newInstance();
      Document document0 = parser2.parseInput("qDRU;=5{QU5 ", "qDRU;=5{QU5 ");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.shallowClone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document2.children();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.outline(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(1789);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Entities.EscapeMode entities_EscapeMode1 = Entities.EscapeMode.base;
      document_OutputSettings4.escapeMode(entities_EscapeMode1);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.prettyPrint(true);
      document_OutputSettings5.outline();
      document2.outerHtml();
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = new Document("'F0RKcX8G'9");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.connection((Connection) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      document_OutputSettings4.outline(true);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.escapeMode(entities_EscapeMode0);
      document_OutputSettings5.prettyPrint();
      Document document0 = Parser.parse("o.1u;AT=&eyTmL", "-5*!5g");
      HttpConnection httpConnection0 = new HttpConnection();
      Connection connection0 = httpConnection0.maxBodySize(1406);
      Document document1 = document0.connection(connection0);
      document1.title();
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.setSiblingIndex(2982);
      document0.text("Bug: no template insertion mode on stack!");
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String string0 = null;
      Document document0 = new Document((String) null);
      document0.location();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth((-1));
      int int0 = (-1762);
      Document document0 = Parser.parse("Accept-Encoding", "Accept-Encoding");
      document0.shallowClone();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.url("Accept-Encoding");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: Accept-Encoding
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser2 = parser1.settings(parseSettings0);
      Parser parser3 = parser2.setTrackErrors(0);
      StringReader stringReader0 = new StringReader("f?<F<zb)jN7|O@iRl");
      Document document0 = parser3.parseInput((Reader) stringReader0, "f?<F<zb)jN7|O@iRl");
      document0.title();
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = Document.createShell("T>6{mK");
      document0.body();
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Document document0 = new Document("0VIb9w1:>)");
      document0.firstElementSibling();
      document0.outputSettings();
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Document document0 = new Document("SelectorManager@%s");
      document0.parser();
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Parser.parse("", "^MS");
      Document document1 = document0.shallowClone();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEach(consumer0);
      document1.documentType();
      document1.connection();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.eclipse.jetty.util.PathWatcher");
      Document document0 = Document.createShell("frameset");
      Document document1 = document0.shallowClone();
      document1.documentType();
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings1.outline(false);
      document_OutputSettings0.outline(false);
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      document_OutputSettings2.clone();
      document_OutputSettings0.clone();
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      document_OutputSettings1.prepareEncoder();
      document_OutputSettings3.prepareEncoder();
      document_OutputSettings1.escapeMode();
      Document document0 = Parser.parseBodyFragment("nQUp|woz&n.,Ds'", "(pOqmT|XJ=;M@WrT#HJ");
      document0.documentType();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.clone();
      document_OutputSettings1.encoder();
      document1.createElement("SYSTEM");
      document1.updateMetaCharsetElement();
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document1.body();
      Document document2 = Document.createShell("m0MX?");
      document0.connection();
      document2.normalise();
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Document.createShell("*7hw9:o6wcOWu,C");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      Parser parser2 = parser1.setTrackErrors(3581);
      Document document1 = document0.parser(parser2);
      document1.head();
      document1.head();
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      document_OutputSettings3.prepareEncoder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "M3zn\"$X");
      Document document1 = document0.clone();
      document1.createElement("M3zn\"$X");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      boolean boolean0 = false;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document_OutputSettings1.indentAmount(0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.fallback;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.syntax();
      document_OutputSettings0.indentAmount(689);
      Document document0 = new Document("");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.location();
      document1.outputSettings(document_OutputSettings0);
      document1.append("");
      // Undeclared exception!
      try { 
        document0.createElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Document document0 = Document.createShell("|Ea`&Oxy");
      document0.text("|Ea`&Oxy");
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Document.createShell("iTm|Dmsl@");
      document0.createElement("frameset");
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.parser((Parser) null);
      document1.hasText();
      document1.outerHtml();
      document1.parser();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        Charset.forName("j/|1D");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // j/|1D
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prepareEncoder();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document_OutputSettings1.encoder();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.prettyPrint(true);
      document_OutputSettings0.maxPaddingWidth();
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings3.prettyPrint();
      document_OutputSettings3.outline();
      Document.OutputSettings document_OutputSettings4 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth();
      Document document0 = new Document(">rv");
      Document document1 = document0.outputSettings(document_OutputSettings2);
      document1.outputSettings(document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline();
      HttpConnection httpConnection0 = new HttpConnection();
      // Undeclared exception!
      try { 
        httpConnection0.get();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL not set. Make sure to call #url(...) before executing the request.
         //
         verifyException("org.jsoup.helper.HttpConnection$Base", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings2.prepareEncoder();
      // Undeclared exception!
      try { 
        Document.createShell((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = new Document("");
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Parser.parseFragment("scan accepted dir {} mod={}", (Element) document0, "");
      Document document1 = document0.parser(parser1);
      ParseErrorList parseErrorList0 = parser1.getErrors();
      Parser.parseFragment("", (Element) document0, "", parseErrorList0);
      document0.outerHtml();
      document_OutputSettings0.prettyPrint(false);
      document1.quirksMode();
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("766o", "Od&hzlT (u~u.$W");
      document0.quirksMode();
      Document.QuirksMode.values();
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("a", "(6<$f@w1+;");
      Document document1 = document0.shallowClone();
      Document document2 = document1.clone();
      Document.OutputSettings document_OutputSettings0 = document2.outputSettings();
      document2.shallowClone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("INITIAL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.INITIAL
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.outerHtml();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      document0.forEachNode(consumer0);
      document0.updateMetaCharsetElement(true);
      Document document1 = document0.normalise();
      document1.parents();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document1.quirksMode(document_QuirksMode0);
      document1.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document_OutputSettings2.charset("\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.html;
      document_OutputSettings3.syntax(document_OutputSettings_Syntax1);
      document_OutputSettings3.indentAmount();
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = Parser.parseBodyFragment(";gZLCt}`[x([dTHDQ", "");
      Document document1 = document0.ownerDocument();
      document0.dataset();
      Charset charset0 = document1.charset();
      Charset.defaultCharset();
      document1.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.encoder();
      String string0 = null;
      // Undeclared exception!
      try { 
        document_OutputSettings0.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      document_OutputSettings1.charset();
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings1.encoder();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.maxPaddingWidth();
      String string0 = "";
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings1.encoder();
      document_OutputSettings1.prettyPrint();
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document.OutputSettings.Syntax.values();
      Document document0 = Document.createShell("version");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      document2.quirksMode(document_QuirksMode1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Document document0 = new Document("/YD;D");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.location();
      document0.outerHtml();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.prettyPrint(false);
      document_OutputSettings5.prettyPrint(false);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.maxPaddingWidth(3);
      // Undeclared exception!
      try { 
        document_OutputSettings4.indentAmount((-2309));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document_OutputSettings1.prettyPrint();
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      int int0 = (-63);
      // Undeclared exception!
      try { 
        document_OutputSettings2.maxPaddingWidth((-63));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Document document0 = Document.createShell(")g|LAL");
      document0.documentType();
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax.values();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Document document0 = Document.createShell("meta[charset]");
      document0.html("Q1mihPNav@^1n>W(myi");
      document0.setBaseUri("meta[charset]");
      document0.title();
      document0.childNodes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        Document.QuirksMode.valueOf("head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jsoup.nodes.Document.QuirksMode.head
         //
         verifyException("java.lang.Enum", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.clone();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("", "org.jsoup.nodes.Attribute");
      Document document1 = document0.ownerDocument();
      document1.outputSettings(document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Document document0 = Parser.parse("6J", "6J");
      byte[] byteArray0 = new byte[3];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      byteArray0[0] = (byte) (-119);
      byteArray0[1] = (byte)20;
      byteArray0[2] = (byte) (-24);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document1 = document0.ownerDocument();
      // Undeclared exception!
      try { 
        document1.selectXpath("6J");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not evaluate XPath query [6J]: javax.xml.transform.TransformerException: 6J could not be formatted to a number!
         //
         verifyException("org.jsoup.helper.W3CDom", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parse("", "Z=R'0:Pm*'");
      document0.nextElementSiblings();
      document0.head();
      document0.getElementsByIndexEquals(1512);
      document_OutputSettings0.encoder();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(1512);
      Document document1 = document0.shallowClone();
      document0.updateMetaCharsetElement();
      Parser parser0 = Parser.xmlParser();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document1.childNodesAsArray();
      document0.getElementsByAttributeValueMatching("", (Pattern) null);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      document1.attributesSize();
      Parser parser1 = parser0.settings(parseSettings0);
      ParseErrorList parseErrorList0 = parser1.getErrors();
      Parser.parseFragment("Z=R'0:Pm*'", (Element) document1, "org.jsoup.helper.HttpConnection", parseErrorList0);
      parseSettings0.normalizeAttribute("");
      Parser parser2 = parser1.newInstance();
      document0.parser(parser2);
      document1.body();
      document_OutputSettings1.encoder();
      Document document2 = (Document)document1.text("");
      document2.normalise();
      document_OutputSettings0.outline();
      document_OutputSettings2.indentAmount();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      document_OutputSettings2.encoder();
      document_OutputSettings0.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = Document.createShell("DoctypePublicIdentifier_singleQuoted");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      document_OutputSettings0.maxPaddingWidth(30);
      document0.charset(charset0);
      document0.nodeName();
      document0.clearAttributes();
      document_OutputSettings0.prettyPrint();
      document0.attributesSize();
      document0.title("DoctypePublicIdentifier_singleQuoted");
      Parser.parseBodyFragment("#document", "DoctypePublicIdentifier_singleQuoted");
      document0.title();
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("frameset", "frameset");
      document0.childNodesAsArray();
      document0.prependElement("body");
      document0.prependElement("frameset");
      document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth();
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document_OutputSettings3.encoder();
      document_OutputSettings3.maxPaddingWidth();
      document_OutputSettings1.prepareEncoder();
      Document document0 = Document.createShell("DR<");
      Charset charset0 = Charset.defaultCharset();
      Charset.defaultCharset();
      document_OutputSettings0.maxPaddingWidth(30);
      document0.previousSibling();
      document0.charset(charset0);
      document0.nodeName();
      document0.clearAttributes();
      document_OutputSettings3.prettyPrint();
      document0.attributesSize();
      document_OutputSettings2.escapeMode();
      document0.title("DR<");
      document0.text("DR<");
      document0.title();
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("I=", "I=");
      document0.prependText("I=");
      document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth();
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("p6@(JMQUTkv ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // p6@(JMQUTkv 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      HttpConnection httpConnection0 = new HttpConnection();
      Document document0 = Parser.parse("application/x-www-form-urlencoded", "application/x-www-form-urlencoded");
      document0.connection((Connection) httpConnection0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-1468));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Document document0 = new Document("Dd-.4n}y+:)*y(Iop");
      Document document1 = document0.shallowClone();
      document0.connection();
      Document document2 = document1.normalise();
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.nodeName();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings1.outline(false);
      document_OutputSettings0.outline(false);
      document_OutputSettings1.coreCharset = entities_CoreCharset0;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      document_OutputSettings2.clone();
      document_OutputSettings0.clone();
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.maxPaddingWidth(0);
      document_OutputSettings2.maxPaddingWidth(0);
      document_OutputSettings1.prepareEncoder();
      document_OutputSettings3.prepareEncoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document document0 = Parser.parseBodyFragment("nQUp|woz&n.,Ds'", "(pOqmT|XJ=;M@WrT#HJ");
      document0.documentType();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.clone();
      document_OutputSettings1.encoder();
      document1.createElement("SYSTEM");
      document1.updateMetaCharsetElement();
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings0.prettyPrint());
      
      document1.body();
      Document document2 = Document.createShell("m0MX?");
      document0.connection();
      Document document3 = document2.normalise();
      document1.documentType();
      document0.title();
      String string0 = document3.outerHtml();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
  }
}
