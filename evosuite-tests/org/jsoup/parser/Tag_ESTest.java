/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:28:53 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Tag;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Tag_ESTest extends Tag_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?v#xN28b^");
      tag0.hashCode();
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bgsound");
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      tag0.hashCode();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      tag0.hashCode();
      assertFalse(tag0.isKnownTag());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Tag tag0 = Tag.valueOf("del");
      Tag tag1 = tag0.clone();
      Tag tag2 = tag1.setSelfClosing();
      boolean boolean0 = tag2.equals(tag0);
      assertTrue(tag1.isSelfClosing());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G\":q9/:ZLzB: %");
      Tag tag1 = Tag.valueOf("Q");
      boolean boolean0 = tag1.equals(tag0);
      assertFalse(boolean0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag1.formatAsBlock());
      assertEquals("G\":q9/:ZLzB: %", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      boolean boolean0 = tag0.equals("Q");
      assertFalse(boolean0);
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bdo");
      boolean boolean0 = tag0.equals(tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      boolean boolean0 = Tag.isKnownTag("td");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      boolean boolean0 = Tag.isKnownTag("'PS 5#Ur@");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Tag tag0 = Tag.valueOf("code");
      boolean boolean0 = tag0.isKnownTag();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      boolean boolean0 = tag0.isKnownTag();
      assertFalse(tag0.formatAsBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Tag tag0 = Tag.valueOf("$VHHAG6 ");
      boolean boolean0 = tag0.isSelfClosing();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(boolean0);
      assertEquals("$VHHAG6", tag0.toString());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      boolean boolean0 = tag0.isSelfClosing();
      assertFalse(tag0.formatAsBlock());
      assertFalse(boolean0);
      assertEquals("Q", tag0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Tag tag0 = Tag.valueOf("command");
      boolean boolean0 = tag0.isSelfClosing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Tag tag0 = Tag.valueOf("t:2 h;R0");
      boolean boolean0 = tag0.isInline();
      assertTrue(tag0.formatAsBlock());
      assertTrue(boolean0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("t:2 h;R0", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ul");
      boolean boolean0 = tag0.isInline();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Tag tag0 = Tag.valueOf("s ");
      assertFalse(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Q", parseSettings0);
      assertEquals("q", tag0.toString());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Tag tag0 = Tag.valueOf("J");
      boolean boolean0 = tag0.isFormSubmittable();
      assertFalse(boolean0);
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("J", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">B|");
      boolean boolean0 = tag0.isBlock();
      assertFalse(boolean0);
      assertTrue(tag0.formatAsBlock());
      assertEquals(">B|", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      tag0.isFormListed();
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Tag tag0 = Tag.valueOf("U");
      String string0 = tag0.toString();
      assertFalse(tag0.formatAsBlock());
      assertEquals("U", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      boolean boolean0 = tag0.formatAsBlock();
      assertFalse(boolean0);
      assertEquals("Q", tag0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      tag0.preserveWhitespace();
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">B|");
      boolean boolean0 = tag0.isEmpty();
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">B|", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Tag tag0 = Tag.valueOf("applet");
      String string0 = tag0.normalName();
      assertEquals("applet", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Q");
      assertNotNull(tag0);
      
      String string0 = tag0.getName();
      assertFalse(tag0.formatAsBlock());
      assertEquals("Q", string0);
  }
}
