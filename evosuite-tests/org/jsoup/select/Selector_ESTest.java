/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:30:22 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.jsoup.select.Elements;
import org.jsoup.select.Selector;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Selector_ESTest extends Selector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Vector<Element> vector0 = new Vector<Element>();
      Document document0 = new Document("input");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = Selector.filterOut(elements0, vector0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = Selector.filterOut(elements0, elements0);
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Document document0 = Parser.parse("D9", "D9");
      document0.appendElement("D9");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = Selector.select("D9", (Iterable<Element>) elements0);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Selector.SelectorParseException selector_SelectorParseException0 = new Selector.SelectorParseException("org.jsoup.select.Selector$SelectorParseException");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("Split offset must not be greater than current text length");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.select.Selector");
      // Undeclared exception!
      try { 
        Selector.selectFirst("", document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Document document0 = Parser.parse("281@^)~|W([", "281@^)~|W([");
      // Undeclared exception!
      try { 
        Selector.select("281@^)~|W([", (Element) document0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '281@^)~|W([': unexpected token at '@^)~|W(['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
