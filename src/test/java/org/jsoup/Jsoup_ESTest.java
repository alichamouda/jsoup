/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:25:25 GMT 2022
 */

package org.jsoup;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Safelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Jsoup_ESTest extends Jsoup_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "LEX~; 6$";
      // Undeclared exception!
      try { 
        Jsoup.parse("LEX~; 6$", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      File file0 = null;
      String string0 = "idleJobPoll";
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      parser1.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "idleJobPoll", "idleJobPoll", parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      Parser parser2 = parser1.newInstance();
      Jsoup.parse((InputStream) null, "", "u/s]93l^rql'a?w{9R", parser2);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = "scanned ";
      Safelist safelist0 = Safelist.none();
      Safelist safelist1 = new Safelist(safelist0);
      safelist1.removeEnforcedAttribute("scanned ", "scanned ");
      Jsoup.isValid("scanned ", safelist1);
      String string1 = null;
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Jsoup.clean("*PbvaQI}fv", safelist0);
      File file0 = MockFile.createTempFile("*PbvaQI}fv", "*PbvaQI}fv");
      try { 
        Jsoup.parse(file0, "*PbvaQI}fv", "*PbvaQI}fv");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "d<n*J'G4&y6O2s";
      String string1 = "Must supply an even number of key value pairs";
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        Jsoup.clean("d<n*J'G4&y6O2s", "Must supply an even number of key value pairs", (Safelist) null, document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "%s@%x{c=%d,m=%d,t=%d}";
      Jsoup.parse("%s@%x{c=%d,m=%d,t=%d}");
      String string1 = "msW0rGlFRI1?5zA0A'D";
      File file0 = MockFile.createTempFile("%s@%x{c=%d,m=%d,t=%d}", "msW0rGlFRI1?5zA0A'D");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(1);
      parser1.newInstance();
      Parser.parseXmlFragment("", "");
      Parser.xmlParser();
      Parser.unescapeEntities("msW0rGlFRI1?5zA0A'D", true);
      Parser.xmlParser();
      try { 
        Jsoup.parse(file0, "msW0rGlFRI1?5zA0A'D", "msW0rGlFRI1?5zA0A'D", parser1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Jsoup.parse("q[", ";+bgT~y5_+i3");
      MockFile mockFile0 = new MockFile("q[", "");
      File file0 = MockFile.createTempFile("Dropped duplicate attribute(s) in tag [%s]", ";+bgT~y5_+i3", (File) mockFile0);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      try { 
        Jsoup.parse(file0, "z\"=", "z\"=", parser1);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Safelist safelist1 = new Safelist(safelist0);
      Safelist.simpleText();
      Jsoup.clean("[\"']", safelist1);
      safelist1.addEnforcedAttribute("[\"']", "[\"']", "[\"']");
      File file0 = MockFile.createTempFile("[\"']", "[\"']");
      Jsoup.parse(file0);
      // Undeclared exception!
      try { 
        Jsoup.parse(file0, "", "[\"']");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = "";
      Safelist safelist0 = null;
      // Undeclared exception!
      try { 
        Jsoup.isValid("", (Safelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<?\"bWnnf-{SA\"-";
      stringArray0[1] = "<?\"bWnnf-{SA\"-";
      stringArray0[2] = "<?\"bWnnf-{SA\"-";
      stringArray0[3] = "<?\"bWnnf-{SA\"-";
      stringArray0[4] = "<?\"bWnnf-{SA\"-";
      stringArray0[5] = "<?\"bWnnf-{SA\"-";
      stringArray0[6] = "<?\"bWnnf-{SA\"-";
      stringArray0[7] = "<?\"bWnnf-{SA\"-";
      safelist0.removeAttributes("<?\"bWnnf-{SA\"-", stringArray0);
      Safelist safelist1 = new Safelist(safelist0);
      Jsoup.isValid("<?\"bWnnf-{SA\"-", safelist1);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-118);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      try { 
        Jsoup.parse((InputStream) pushbackInputStream0, "<?\"bWnnf-{SA\"-", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.maxPaddingWidth(9);
      Jsoup.clean("", "^iJL_OukQ`gw2", safelist0, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist.none();
      safelist0.removeEnforcedAttribute("org.jsoup.Jsoup", "V");
      Safelist.basic();
      Safelist.basic();
      Safelist safelist1 = Safelist.relaxed();
      Safelist.relaxed();
      Safelist.none();
      Jsoup.clean(";%J-M-=,A98G'Q", safelist0);
      Jsoup.newSession();
      Jsoup.parseBodyFragment("org.jsoup.Jsoup");
      Jsoup.parseBodyFragment("5p,gT~");
      // Undeclared exception!
      try { 
        Jsoup.isValid((String) null, safelist1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = ".V>T!>L3AZmn]4z";
      // Undeclared exception!
      try { 
        Jsoup.parse(".V>T!>L3AZmn]4z", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      URL uRL0 = MockURL.getHttpExample();
      int int0 = 632;
      try { 
        Jsoup.parse(uRL0, 632);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // HTTP error fetching URL. Status=404, URL=[http://www.someFakeButWellFormedURL.org/fooExample]
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      File file0 = null;
      String string0 = "threads";
      String string1 = "";
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "threads", "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      String string0 = "pA";
      Parser parser0 = Parser.xmlParser();
      try { 
        Jsoup.parse((InputStream) pipedInputStream0, "pA", "pA", parser0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String string0 = "zEu8,zmfv";
      Parser parser0 = Parser.htmlParser();
      Parser.htmlParser();
      Jsoup.parse("zEu8,zmfv", parser0);
      String string1 = null;
      String string2 = "";
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "l|sHjmW}9wT4";
      stringArray0[2] = null;
      stringArray0[3] = "zEu8,zmfv";
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("l|sHjmW}9wT4", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      String string0 = "action";
      MockFile mockFile0 = new MockFile("action", "action");
      String string1 = "    ";
      MockFile mockFile1 = new MockFile(mockFile0, "    ");
      mockFile0.delete();
      try { 
        Jsoup.parse((File) mockFile1, "    ", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Jsoup.parse((InputStream) null, "org.jsoup.Jsoup", "org.jsoup.Jsoup", (Parser) null);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      try { 
        Jsoup.parse((File) mockFile0, "", ">c@i4s`No*VW_[b3TN");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Jsoup.parse("");
      String string0 = "";
      Safelist safelist0 = Safelist.none();
      safelist0.preserveRelativeLinks(false);
      Safelist.basic();
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        Jsoup.clean((String) null, "", safelist0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      int int0 = 1096;
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 1096);
      sequenceInputStream0.skip(650L);
      String string0 = "o0@^;=Sll";
      try { 
        Jsoup.parse((InputStream) bufferedInputStream0, "o0@^;=Sll", "o0@^;=Sll");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String string0 = null;
      Safelist safelist0 = new Safelist();
      safelist0.preserveRelativeLinks(true);
      // Undeclared exception!
      try { 
        Jsoup.clean("!)E<`=W", (String) null, safelist0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        Jsoup.parse((URL) null, 602);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URL must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = null;
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[0];
      safelist0.removeTags(stringArray0);
      Safelist.none();
      // Undeclared exception!
      try { 
        Jsoup.clean((String) null, safelist0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Jsoup.parseBodyFragment("", ",t:");
      Safelist safelist0 = Safelist.simpleText();
      Jsoup.clean(",t:", ",t:", safelist0);
      // Undeclared exception!
      try { 
        Jsoup.parseBodyFragment((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Jsoup.parseBodyFragment("_q@;8%_TZ#g");
      String string0 = "";
      File file0 = MockFile.createTempFile("_q@;8%_TZ#g", "", (File) null);
      try { 
        Jsoup.parse(file0, "_q@;8%_TZ#g");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Jsoup.parse("=049I}CM3)h(DSSq", "42'QOBOn._\"K R@8");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.newInstance();
      Jsoup.parse("42'QOBOn._\"K R@8", "", parser1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = "Exception while notifying listener ";
      MockFile mockFile0 = new MockFile((File) null, "Exception while notifying listener ");
      mockFile0.getAbsolutePath();
      mockFile0.toPath();
      try { 
        Jsoup.parse((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "";
      Parser parser0 = Parser.xmlParser();
      Parser.htmlParser();
      Jsoup.parse("", parser0);
      String string1 = "";
      // Undeclared exception!
      try { 
        MockFile.createTempFile("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Prefix string too short
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      URL uRL0 = MockURL.getFtpExample();
      try { 
        Jsoup.parse(uRL0, 24576);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // Only http & https protocols supported
         //
         verifyException("org.jsoup.helper.HttpConnection$Response", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Jsoup.parse("6~]E9");
      String string0 = "=";
      String string1 = "_E4n?";
      // Undeclared exception!
      try { 
        Jsoup.parse("=", "_E4n?", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Jsoup.clean("", "", safelist0);
      Jsoup.isValid("", safelist0);
      File file0 = MockFile.createTempFile(" ='P>lf}Ih'4", " ='P>lf}Ih'4");
      MockFile mockFile0 = new MockFile(file0, "");
      mockFile0.setWritable(true);
      mockFile0.getAbsolutePath();
      // Undeclared exception!
      try { 
        Jsoup.parse((File) mockFile0, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must set charset arg to character set of file to parse. Set to null to attempt to detect from HTML
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Jsoup.isValid("5mCM:Ej)Cm~H2k", safelist0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "8\\)Z!ib[FCM2CE";
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("8)Z!ib[FCM2CE", false);
      FileDescriptor fileDescriptor0 = mockFileOutputStream0.getFD();
      mockFileOutputStream0.flush();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      String string1 = null;
      try { 
        Jsoup.parse((InputStream) mockFileInputStream0, "8)Z!ib[FCM2CE", (String) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.NativeMockedIO", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Jsoup.newSession();
      Jsoup.newSession();
      File file0 = null;
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      String string0 = ")ObaT)p0";
      Jsoup.parseBodyFragment(")ObaT)p0", ")ObaT)p0");
      // Undeclared exception!
      try { 
        Jsoup.connect(")ObaT)p0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: )ObaT)p0
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = "";
      Safelist safelist0 = null;
      // Undeclared exception!
      try { 
        Jsoup.clean("", (Safelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-28);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        Jsoup.parse((InputStream) byteArrayInputStream0, "sB4 T=w=", "P@t|)x5N(");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockFile mockFile0 = new MockFile("4]", "'pSN=?\"`/J)~<");
      try { 
        Jsoup.parse((File) mockFile0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Jsoup.parse("", "'emmkK");
      MockFile mockFile0 = new MockFile("text/", "text/");
      try { 
        Jsoup.parse((File) mockFile0, "org.jsoup.Jsoup");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        Jsoup.parse((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "i{]GQ|n\\ \\yYA";
      Jsoup.parse("i{]GQ|n yYA", "i{]GQ|n yYA");
      Jsoup.newSession();
      Safelist safelist0 = Safelist.none();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "org.jsoup.Jsoup";
      safelist0.addAttributes("i{]GQ|n yYA", stringArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Jsoup.clean("i{]GQ|n yYA", "PTgg`4/ f\u0006/", safelist0, document_OutputSettings0);
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      String string0 = "";
      String string1 = "";
      URI uRI0 = MockURI.URI("");
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI is not absolute
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String string0 = "";
      Jsoup.parseBodyFragment("", "");
      Safelist safelist0 = new Safelist();
      Jsoup.clean("", safelist0);
      // Undeclared exception!
      try { 
        Jsoup.connect("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String string0 = "";
      Jsoup.parseBodyFragment("");
      Jsoup.newSession();
      String string1 = "6k1j~)$D,\"U:xJ";
      Safelist safelist0 = Safelist.relaxed();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "6k1j~)$D,\"U:xJ";
      stringArray0[2] = "6k1j~)$D,\"U:xJ";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Jsoup.newSession();
      String string0 = "org.jsoup.select.Evaluator$ContainsOwnText";
      // Undeclared exception!
      try { 
        Jsoup.connect("org.jsoup.select.Evaluator$ContainsOwnText");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: org.jsoup.select.Evaluator$ContainsOwnText
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Safelist safelist1 = new Safelist(safelist0);
      Jsoup.clean("b", safelist1);
      Jsoup.newSession();
      Safelist safelist2 = Safelist.none();
      Jsoup.clean("b", "org.eclipse.jetty.util.PathWatcher$Config", safelist2);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Jsoup.newSession();
      String string0 = "zWz\\va2e(";
      String string1 = "nR#-_1NAPomZ";
      Parser parser0 = Parser.htmlParser();
      String string2 = "PathWatchEvent[%8s|%s]";
      Document document0 = Parser.parseBodyFragment("PathWatchEvent[%8s|%s]", "zWzva2e(");
      Parser.unescapeEntities("zWzva2e(", false);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.newInstance();
      parseSettings0.normalizeAttribute("zWzva2e(");
      parser1.parseInput("zWzva2e(", "zWzva2e(");
      parser2.getErrors();
      String string3 = null;
      // Undeclared exception!
      try { 
        Parser.parseFragment("zWzva2e(", (Element) document0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Jsoup.parse("org.jsoup.SerializationException", "org.jsoup.SerializationException");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      Parser parser2 = parser1.setTrackErrors(0);
      Jsoup.parse("", "org.jsoup.Jsoup", parser2);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Jsoup.clean("org.jsoup.select.Evaluator$ContainsText", "U", safelist0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      File file0 = null;
      String string0 = "~3GZA\".vw,)J(F";
      // Undeclared exception!
      try { 
        Jsoup.parse((File) null, "~3GZA\".vw,)J(F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.Jsoup", e);
      }
  }
}
