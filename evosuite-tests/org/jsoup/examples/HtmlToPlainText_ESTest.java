/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:39:34 GMT 2022
 */

package org.jsoup.examples;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.examples.HtmlToPlainText;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlToPlainText_ESTest extends HtmlToPlainText_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.prepend("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.130 Safari/537.36");
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      String string0 = htmlToPlainText0.getPlainText(document0);
      assertEquals("Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like \nGecko) Chrome/79.0.3945.130 Safari/537.36", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Document document0 = Parser.parse("&nbsp;", "TRACE");
      document0.prepend("TRACE");
      Document document1 = document0.normalise();
      String string0 = htmlToPlainText0.getPlainText(document1);
      assertEquals("TRACE ", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Element element0 = new Element("a");
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals(" <>", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Element element0 = new Element("tr");
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("\n", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Element element0 = new Element("dt");
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("  \n", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Element element0 = new Element("li");
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      String string0 = htmlToPlainText0.getPlainText(element0);
      assertEquals("\n * ", string0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // usage: java -cp jsoup.jar org.jsoup.examples.HtmlToPlainText url [selector]
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        HtmlToPlainText.main(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must supply a valid URL
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      HtmlToPlainText htmlToPlainText0 = new HtmlToPlainText();
      Document document0 = Parser.parse("&nbsp;", "TRACE");
      htmlToPlainText0.getPlainText(document0);
  }
}
