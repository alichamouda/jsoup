/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:17:49 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.LinkedHashSet;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FormElement_ESTest extends FormElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("W~]L^Ay?c", parseSettings0);
      assertNotNull(tag0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("W~]L^Ay?c", tag0.toString());
      assertEquals("W~]L^Ay?c", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      
      FormElement formElement0 = new FormElement(tag0, "W~]L^Ay?c", (Attributes) null);
      assertNotNull(formElement0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("W~]L^Ay?c", tag0.toString());
      assertEquals("W~]L^Ay?c", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(formElement0.isBlock());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("W~]L^Ay?c", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("W~]L^Ay?c", formElement0.tagName());
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(formElement0));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean0 = linkedHashSet0.add(formElement0);
      assertTrue(boolean0);
      assertTrue(linkedHashSet0.contains(formElement0));
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("W~]L^Ay?c", tag0.toString());
      assertEquals("W~]L^Ay?c", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(formElement0.isBlock());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("W~]L^Ay?c", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("W~]L^Ay?c", formElement0.tagName());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Element element0 = formElement0.prependChildren(linkedHashSet0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertNotNull(element0);
      assertTrue(linkedHashSet0.contains(formElement0));
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("W~]L^Ay?c", tag0.toString());
      assertEquals("W~]L^Ay?c", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(formElement0.isBlock());
      assertTrue(formElement0.hasParent());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("W~]L^Ay?c", formElement0.nodeName());
      assertEquals("W~]L^Ay?c", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("W~]L^Ay?c", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("W~]L^Ay?c", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("w~]l^ay?c", element0.normalName());
      
      formElement0.removeChild(formElement0);
      assertSame(formElement0, element0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("W~]L^Ay?c", tag0.toString());
      assertEquals("W~]L^Ay?c", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(formElement0.isBlock());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("W~]L^Ay?c", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("W~]L^Ay?c", formElement0.tagName());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("zDg0jpBB0]o6", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "zDg0jpBB0]o6", attributes0);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement1.nodeName());
      assertEquals("zdg0jpbb0]o6", formElement1.normalName());
      assertEquals("zdg0jpbb0]o6", formElement1.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      
      Elements elements0 = formElement1.elements();
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(elements0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement1.nodeName());
      assertEquals("zdg0jpbb0]o6", formElement1.normalName());
      assertEquals("zdg0jpbb0]o6", formElement1.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Tag tag0 = Tag.valueOf("footer");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertEquals("footer", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertEquals("footer", tag0.normalName());
      assertEquals("footer", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      
      FormElement formElement0 = new FormElement(tag0, "footer", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertEquals("footer", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertEquals("footer", tag0.normalName());
      assertEquals("footer", tag0.getName());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals("footer", formElement0.tagName());
      assertEquals("footer", formElement0.normalName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("footer", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      FormElement formElement1 = formElement0.clone();
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertEquals("footer", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertEquals("footer", tag0.normalName());
      assertEquals("footer", tag0.getName());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertEquals("footer", formElement0.tagName());
      assertEquals("footer", formElement0.normalName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("footer", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("footer", formElement1.normalName());
      assertTrue(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.hasParent());
      assertEquals("footer", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("footer", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~'felFnT");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertEquals("~'felFnT", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("~'felfnt", tag0.normalName());
      assertEquals("~'felFnT", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "~'felFnT", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertEquals("~'felFnT", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("~'felfnt", tag0.normalName());
      assertEquals("~'felFnT", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("~'felfnt", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("~'felFnT", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("~'felFnT", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("3m#V,,J*", "3m#V,,J*");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("3m#V,,J*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = formElement0.appendTo(document0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertEquals("~'felFnT", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("~'felfnt", tag0.normalName());
      assertEquals("~'felFnT", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("~'felfnt", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("~'felFnT", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals("~'felFnT", formElement0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("3m#V,,J*", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("~'felFnT", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("~'felfnt", element0.normalName());
      assertFalse(element0.isBlock());
      assertEquals("~'felFnT", element0.nodeName());
      
      FormElement formElement1 = formElement0.clone();
      assertSame(formElement0, element0);
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, element0);
      assertNotSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(formElement1.equals((Object)element0));
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(tag0.isFormSubmittable());
      assertEquals("~'felFnT", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("~'felfnt", tag0.normalName());
      assertEquals("~'felFnT", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals("~'felfnt", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("~'felFnT", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals("~'felFnT", formElement0.tagName());
      assertEquals("~'felFnT", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("~'felFnT", formElement1.nodeName());
      assertTrue(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("~'felfnt", formElement1.normalName());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("W~]L^Ay?c", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      
      FormElement formElement0 = new FormElement(tag0, "4^}Md9ZK|", (Attributes) null);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("w~]l^ay?c", formElement0.tagName());
      assertEquals("w~]l^ay?c", formElement0.nodeName());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertFalse(formElement0.hasParent());
      
      Element element0 = new Element(tag0, "4^}Md9ZK|", (Attributes) null);
      assertNotNull(element0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("w~]l^ay?c", element0.nodeName());
      assertEquals("w~]l^ay?c", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("w~]l^ay?c", element0.normalName());
      
      Element element1 = element0.appendTo(formElement0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotNull(element1);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("w~]l^ay?c", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("w~]l^ay?c", formElement0.nodeName());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertFalse(formElement0.hasParent());
      assertEquals("w~]l^ay?c", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("w~]l^ay?c", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("w~]l^ay?c", element0.normalName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w~]l^ay?c", element1.tagName());
      assertEquals("w~]l^ay?c", element1.normalName());
      assertEquals("w~]l^ay?c", element1.nodeName());
      
      FormElement formElement1 = formElement0.clone();
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("w~]l^ay?c", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("w~]l^ay?c", formElement0.nodeName());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement1.hasParent());
      assertEquals("w~]l^ay?c", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("w~]l^ay?c", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("w~]l^ay?c", formElement1.normalName());
      assertEquals(1, formElement1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      
      Tag tag0 = Tag.valueOf("POST", parseSettings0);
      assertNotNull(tag0);
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("POST", tag0.toString());
      assertEquals("post", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("POST", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      
      FormElement formElement0 = new FormElement(tag0, "radio", attributes0);
      assertNotNull(formElement0);
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("POST", tag0.toString());
      assertEquals("post", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("POST", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("POST", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("post", formElement0.normalName());
      assertEquals("POST", formElement0.tagName());
      
      FormElement formElement1 = formElement0.clone();
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(formElement1.equals((Object)formElement0));
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("POST", tag0.toString());
      assertEquals("post", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("POST", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("POST", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("post", formElement0.normalName());
      assertEquals("POST", formElement0.tagName());
      assertEquals("POST", formElement1.tagName());
      assertEquals("post", formElement1.normalName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("POST", formElement1.nodeName());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      
      formElement1.siblingIndex = 35;
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("POST", tag0.toString());
      assertEquals("post", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("POST", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("POST", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("post", formElement0.normalName());
      assertEquals("POST", formElement0.tagName());
      assertEquals("POST", formElement1.tagName());
      assertEquals("post", formElement1.normalName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("POST", formElement1.nodeName());
      assertEquals(35, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertNotSame(formElement0, formElement2);
      assertNotSame(formElement0, formElement1);
      assertSame(formElement1, formElement2);
      assertNotSame(formElement1, formElement0);
      assertSame(formElement2, formElement1);
      assertNotSame(formElement2, formElement0);
      assertNotNull(formElement2);
      assertFalse(formElement0.equals((Object)formElement1));
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement0));
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("POST", tag0.toString());
      assertEquals("post", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("POST", tag0.getName());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("POST", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("post", formElement0.normalName());
      assertEquals("POST", formElement0.tagName());
      assertEquals("POST", formElement1.tagName());
      assertEquals("post", formElement1.normalName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("POST", formElement1.nodeName());
      assertEquals(35, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals("post", formElement2.normalName());
      assertFalse(formElement2.hasParent());
      assertFalse(formElement2.isBlock());
      assertEquals("POST", formElement2.nodeName());
      assertEquals("POST", formElement2.tagName());
      assertEquals(35, formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Tag tag0 = Tag.valueOf("name");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("name", tag0.toString());
      assertEquals("name", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("name", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      
      FormElement formElement0 = new FormElement(tag0, "post", (Attributes) null);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("name", tag0.toString());
      assertEquals("name", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("name", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("name", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("name", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("name", formElement0.nodeName());
      
      FormElement formElement1 = formElement0.clone();
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("name", tag0.toString());
      assertEquals("name", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("name", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("name", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("name", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("name", formElement0.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("name", formElement1.tagName());
      assertEquals("name", formElement1.normalName());
      assertEquals("name", formElement1.nodeName());
      
      formElement1.siblingIndex = (-1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("name", tag0.toString());
      assertEquals("name", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("name", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("name", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("name", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("name", formElement0.nodeName());
      assertEquals((-1), formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("name", formElement1.tagName());
      assertEquals("name", formElement1.normalName());
      assertEquals("name", formElement1.nodeName());
      
      FormElement formElement2 = formElement1.addElement(formElement0);
      assertNotSame(formElement0, formElement2);
      assertNotSame(formElement0, formElement1);
      assertSame(formElement1, formElement2);
      assertNotSame(formElement1, formElement0);
      assertNotSame(formElement2, formElement0);
      assertSame(formElement2, formElement1);
      assertNotNull(formElement2);
      assertFalse(formElement0.equals((Object)formElement1));
      assertFalse(formElement1.equals((Object)formElement0));
      assertFalse(formElement2.equals((Object)formElement0));
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("name", tag0.toString());
      assertEquals("name", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("name", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("name", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("name", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("name", formElement0.nodeName());
      assertEquals((-1), formElement1.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("name", formElement1.tagName());
      assertEquals("name", formElement1.normalName());
      assertEquals("name", formElement1.nodeName());
      assertEquals("name", formElement2.normalName());
      assertEquals((-1), formElement2.siblingIndex());
      assertEquals(0, formElement2.childNodeSize());
      assertEquals("name", formElement2.tagName());
      assertFalse(formElement2.hasParent());
      assertEquals("name", formElement2.nodeName());
      assertFalse(formElement2.isBlock());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Tag tag0 = Tag.valueOf("footer");
      assertNotNull(tag0);
      assertFalse(tag0.isFormListed());
      assertEquals("footer", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("footer", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertEquals("footer", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "footer", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormListed());
      assertEquals("footer", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("footer", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertEquals("footer", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("footer", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("footer", formElement0.normalName());
      assertTrue(formElement0.isBlock());
      assertEquals("footer", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      Document document0 = Parser.parseBodyFragment("", "checkbox");
      assertNotNull(document0);
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("checkbox", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(tag0.isFormListed());
      assertEquals("footer", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("footer", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertEquals("footer", tag0.normalName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("footer", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("footer", formElement0.normalName());
      assertTrue(formElement0.isBlock());
      assertEquals("footer", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("checkbox", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("footer", formElement1.normalName());
      assertTrue(formElement1.isBlock());
      assertEquals("footer", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("footer", formElement1.tagName());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("W~]L^Ay?c", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      
      FormElement formElement0 = new FormElement(tag0, "4^}Md9ZK|", (Attributes) null);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("w~]l^ay?c", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("w~]l^ay?c", formElement0.nodeName());
      
      Element element0 = formElement0.appendTo(formElement0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertNotNull(element0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("w~]l^ay?c", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("w~]l^ay?c", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("w~]l^ay?c", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("w~]l^ay?c", element0.tagName());
      assertEquals("w~]l^ay?c", element0.normalName());
      
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement0, element0);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("w~]l^ay?c", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("w~]l^ay?c", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("w~]l^ay?c", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("w~]l^ay?c", formElement0.normalName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("w~]l^ay?c", formElement0.tagName());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("w~]l^ay?c", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertEquals("w~]l^ay?c", formElement1.normalName());
      assertEquals("w~]l^ay?c", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals("w~]l^ay?c", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(parseSettings0.preserveAttributeCase());
      
      Tag tag0 = Tag.valueOf("zDg0jpBB0]o6", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "zDg0jpBB0]o6", attributes0);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      
      formElement0.reparentChild(formElement0);
      assertFalse(parseSettings0.preserveTagCase());
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      
      // Undeclared exception!
      formElement0.submit();
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      
      Tag tag0 = Tag.valueOf("ZOu=pc;KU^t;n1", parseSettings0);
      assertNotNull(tag0);
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("zou=pc;ku^t;n1", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ZOu=pc;KU^t;n1", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ZOu=pc;KU^t;n1", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ZOu=pc;KU^t;n1", attributes0);
      assertNotNull(formElement0);
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(parseSettings0.preserveAttributeCase());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertEquals("zou=pc;ku^t;n1", tag0.normalName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ZOu=pc;KU^t;n1", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertEquals("ZOu=pc;KU^t;n1", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ZOu=pc;KU^t;n1", formElement0.tagName());
      assertEquals("ZOu=pc;KU^t;n1", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("zou=pc;ku^t;n1", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      
      // Undeclared exception!
      try { 
        formElement0.removeChild((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("h,]4/Ug9;sf*gm*,", parseSettings0);
      assertNotNull(tag0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("h,]4/Ug9;sf*gm*,", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h,]4/ug9;sf*gm*,", tag0.normalName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("h,]4/Ug9;sf*gm*,", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, (String) null, attributes0);
      assertNotNull(formElement0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("h,]4/Ug9;sf*gm*,", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h,]4/ug9;sf*gm*,", tag0.normalName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("h,]4/Ug9;sf*gm*,", tag0.getName());
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals("h,]4/Ug9;sf*gm*,", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("h,]4/Ug9;sf*gm*,", formElement0.tagName());
      assertEquals("h,]4/ug9;sf*gm*,", formElement0.normalName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      
      FormElement formElement1 = formElement0.addElement((Element) null);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("h,]4/Ug9;sf*gm*,", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h,]4/ug9;sf*gm*,", tag0.normalName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("h,]4/Ug9;sf*gm*,", tag0.getName());
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals("h,]4/Ug9;sf*gm*,", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("h,]4/Ug9;sf*gm*,", formElement0.tagName());
      assertEquals("h,]4/ug9;sf*gm*,", formElement0.normalName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("h,]4/Ug9;sf*gm*,", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("h,]4/ug9;sf*gm*,", formElement1.normalName());
      assertFalse(formElement1.hasParent());
      assertEquals("h,]4/Ug9;sf*gm*,", formElement1.tagName());
      
      // Undeclared exception!
      try { 
        formElement1.formData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.FormElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~felnT");
      assertNotNull(tag0);
      assertEquals("~felnT", tag0.toString());
      assertEquals("~felnT", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~felnt", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "~felnT", attributes0);
      assertNotNull(formElement0);
      assertEquals("~felnT", tag0.toString());
      assertEquals("~felnT", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~felnt", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("~felnT", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("~felnT", formElement0.nodeName());
      assertEquals("~felnt", formElement0.normalName());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("~felnT", "~felnT");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.normalName());
      assertEquals("~felnT", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) formElement0;
      nodeArray0[6] = (Node) formElement0;
      nodeArray0[7] = (Node) formElement0;
      nodeArray0[8] = (Node) document0;
      formElement0.addChildren(nodeArray0);
      assertEquals(9, nodeArray0.length);
      assertEquals("~felnT", tag0.toString());
      assertEquals("~felnT", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("~felnt", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals("~felnT", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(2, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("~felnT", formElement0.nodeName());
      assertTrue(formElement0.hasParent());
      assertEquals("~felnt", formElement0.normalName());
      
      // Undeclared exception!
      formElement0.clone();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("{'", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{'", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{'", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("{'", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      FormElement formElement0 = new FormElement(tag0, " :-,~\"g|\"X'", (Attributes) null);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{'", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{'", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("{'", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("{'", formElement0.tagName());
      assertEquals("{'", formElement0.normalName());
      assertEquals("{'", formElement0.nodeName());
      
      DataNode dataNode0 = new DataNode("{'");
      assertNotNull(dataNode0);
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      formElement0.setParentNode(dataNode0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("{'", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("{'", tag0.normalName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("{'", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("{'", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals("{'", formElement0.normalName());
      assertEquals("{'", formElement0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      // Undeclared exception!
      try { 
        formElement0.clone();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      attributes0.keys = null;
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      
      Tag tag0 = Tag.valueOf("post", parseSettings0);
      assertNotNull(tag0);
      assertTrue(parseSettings0.preserveAttributeCase());
      assertTrue(parseSettings0.preserveTagCase());
      assertEquals("post", tag0.normalName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("post", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("post", tag0.toString());
      
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement(tag0, "*2HG`Ck.SgP", attributes0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "trXe%M_PkP_!_", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      
      Tag tag0 = Tag.valueOf("zDg0jpBB0]o6", parseSettings0);
      assertNotNull(tag0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      
      FormElement formElement0 = new FormElement(tag0, "zDg0jpBB0]o6", attributes0);
      assertNotNull(formElement0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      assertEquals(0, formElement0.childNodeSize());
      
      FormElement formElement1 = formElement0.addElement(formElement0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(formElement1);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("zdg0jpbb0]o6", formElement1.nodeName());
      assertEquals("zdg0jpbb0]o6", formElement1.normalName());
      assertEquals("zdg0jpbb0]o6", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      
      List<Connection.KeyVal> list0 = formElement1.formData();
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotNull(list0);
      assertFalse(parseSettings0.preserveAttributeCase());
      assertFalse(parseSettings0.preserveTagCase());
      assertEquals("zdg0jpbb0]o6", tag0.toString());
      assertEquals("zdg0jpbb0]o6", tag0.normalName());
      assertEquals("zdg0jpbb0]o6", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(attributes0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("zdg0jpbb0]o6", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("zdg0jpbb0]o6", formElement0.tagName());
      assertEquals("zdg0jpbb0]o6", formElement0.normalName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("zdg0jpbb0]o6", formElement1.nodeName());
      assertEquals("zdg0jpbb0]o6", formElement1.normalName());
      assertEquals("zdg0jpbb0]o6", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("type", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "LMz;O4", attributes0);
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "=sViid,~");
      formElement0.setParentNode(document0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: LMz;O4
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("$nW}~---J)O/Eb", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("option[selected]");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("action", "/");
      FormElement formElement0 = new FormElement(tag0, "$nW}~---J)O/Eb", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Could not determine a form action URL for submit. Ensure you set a base URI when parsing.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("zDg0jpBB0]o6", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zDg0jpBB0]o6", attributes0);
      // Undeclared exception!
      try { 
        formElement0.submit();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Malformed URL: zDg0jpBB0]o6
         //
         verifyException("org.jsoup.helper.HttpConnection", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("zDg0jpBB0]o6", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "zDg0jpBB0]o6", attributes0);
      Elements elements0 = formElement0.elements();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(">y-oug8\"j,qp", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Multiple threads were detected trying to execute the same request concurrently. Make sure to use Connection#newRequest() and do not share an executing request between threads.", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeChild(formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
