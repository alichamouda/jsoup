/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:22:04 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.XmlDeclaration;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlDeclaration_ESTest extends XmlDeclaration_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Comment comment0 = new Comment("#declaration");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      xmlDeclaration0.outerHtmlTail((Appendable) null, 603, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("", true);
      xmlDeclaration0.name();
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Comment comment0 = new Comment("Failure while notifying listener ");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.getWholeDeclaration();
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("$(QB+@`", false);
      Document document0 = new Document("$(QB+@`");
      xmlDeclaration0.parentNode = (Node) document0;
      xmlDeclaration0.clone();
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Wakeup on submit {}", true);
      xmlDeclaration0.siblingIndex = 0;
      xmlDeclaration0.wrap("Wakeup on submit {}");
      xmlDeclaration0.siblingIndex = (-2882);
      // Undeclared exception!
      try { 
        xmlDeclaration0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("s18q1hKS0EbD6\"\u0000", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<?s18q1hKS0EbD6\"\u0000?>");
      assertEquals(0, charBuffer0.position());
      assertEquals("<?s18q1hKS0EbD6\"\u0000?>", charBuffer0.toString());
      assertEquals(19, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.remaining());
      assertEquals(19, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(19, charBuffer0.limit());
      assertTrue(charBuffer0.isReadOnly());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        xmlDeclaration0.outerHtmlHead(charBuffer0, 486, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":PmhRnG28", false);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        xmlDeclaration0.outerHtmlHead((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.XmlDeclaration", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("&jg", false);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Document document0 = Document.createShell("&jg");
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("&jg", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prependChild(document0);
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("&jg", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("&jg", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      xmlDeclaration0.parentNode = (Node) document1;
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.normalName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("&jg", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("&jg", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertTrue(xmlDeclaration0.parentNode.hasParent());
      assertEquals(0, xmlDeclaration0.parentNode.siblingIndex());
      
      // Undeclared exception!
      xmlDeclaration0.clone();
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = null;
      try {
        xmlDeclaration0 = new XmlDeclaration((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#declaration", true);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      String string0 = xmlDeclaration0.nodeName();
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Comment comment0 = new Comment("Failure while notifying listener ");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      xmlDeclaration0.outerHtmlHead(charArrayWriter0, 4, document_OutputSettings0);
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("<?ailure while notifying listener?>", charArrayWriter0.toString());
      assertEquals(35, charArrayWriter0.size());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#declaration", true);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      String string0 = xmlDeclaration0.getWholeDeclaration();
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#declaration", true);
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      XmlDeclaration xmlDeclaration1 = xmlDeclaration0.clone();
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration1.nodeName());
      assertFalse(xmlDeclaration1.hasParent());
      assertEquals(0, xmlDeclaration1.siblingIndex());
      assertNotNull(xmlDeclaration1);
      assertFalse(xmlDeclaration1.equals((Object)xmlDeclaration0));
      assertNotSame(xmlDeclaration0, xmlDeclaration1);
      assertNotSame(xmlDeclaration1, xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#declaration", true);
      xmlDeclaration0.toString();
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#declaration", true);
      String string0 = xmlDeclaration0.name();
      assertEquals("#declaration", string0);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
  }
}
