/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:29:42 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Collector;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.prepend("fkMh5");
      List<TextNode> list0 = elements0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals(3, list0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("f!GMyx+o{,", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.getElementsByIndexEquals(0);
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.contains(formElement0));
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jd7", "BP#ic(Al8QYp");
      Elements elements0 = document0.getElementsContainingText("BP#ic(Al8QYp");
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Element element0 = elements0.last();
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("5gl;Q<@", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "BP#ic(Al8QYp", attributes0);
      Elements elements0 = formElement0.parents();
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.parents();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Element element0 = new Element("F");
      Elements elements0 = element0.getElementsContainingText("SelfClosingStartTag");
      elements0.add(element0);
      boolean boolean0 = elements0.is("F");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jd7", "BP#ic(Al8QYp");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.is("Jd7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValue("Be,4wRu", "deflate");
      // Undeclared exception!
      try { 
        elements0.eq((-158));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.eq(3213227);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.remove();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      elements0.empty();
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.unwrap();
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.wrap("O");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]F(jJ^.]k^Y<&", "org.jsoup.nodes.Node");
      Elements elements0 = document0.getElementsContainingText("SelfClosingStartTag");
      elements0.add((Element) document0);
      // Undeclared exception!
      try { 
        elements0.after("org.jsoup.nodes.Node");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]F(jJ^.]k^Y<&", "org.jsoup.nodes.Node");
      Elements elements0 = document0.getElementsContainingText("SelfClosingStartTag");
      Elements elements1 = elements0.after("org.jsoup.nodes.Node");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.before("O");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.nextElementSiblings();
      Elements elements1 = elements0.before("org.jsoup.select.Elements");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      elements0.append("O");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.html("");
      assertEquals(0, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.tagName("fkMh5");
      Elements elements1 = elements0.nextAll("fkMh5");
      assertEquals("fkmh5", document0.tagName());
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prepend("fkMh5");
      List<String> list0 = elements1.eachText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachText();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.prepend("fkMh5");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.text();
      assertEquals("O O  O", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.val("SkMha");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("f!GMyx+o{,", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Elements elements0 = formElement0.getElementsByIndexEquals(0);
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Elements elements0 = new Elements();
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]F(jJ^.]k^Y<&", "org.jsoup.nodes.Node");
      Elements elements0 = document0.getElementsContainingText("SelfClosingStartTag");
      elements0.add((Element) document0);
      elements0.toggleClass("]F(jJ^.]k^Y<&");
      Elements elements1 = elements0.toggleClass("org.jsoup.nodes.Node");
      boolean boolean0 = elements1.hasClass("org.jsoup.nodes.Node");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      boolean boolean0 = elements0.hasClass("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeClass("O");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.addClass("");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.removeAttr("O");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.attr("", (String) null);
      List<String> list0 = elements0.eachAttr("");
      assertTrue(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      List<String> list0 = elements0.eachAttr("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.attr("", (String) null);
      boolean boolean0 = elements0.hasAttr("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jd7", "BP#ic(Al8QYp");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      boolean boolean0 = elements0.hasAttr("Jd7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.attr("", "");
      String string0 = elements0.attr("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.attr("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      List<Comment> list0 = elements0.comments();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getAllElements();
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prev("O");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.not("fkMh5");
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Element[] elementArray0 = new Element[0];
      Elements elements0 = new Elements(elementArray0);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.select("O");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.nextAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getAllElements();
      List<DataNode> list0 = elements0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.clone();
      assertEquals(4, elements1.size());
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("O");
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_Id0);
      Elements elements1 = elements0.filter(collector_FirstFinder0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Document document0 = Document.createShell("O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.prevAll("O");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "O");
      Elements elements0 = document0.getAllElements();
      Elements elements1 = elements0.next("O");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      elements0.prevAll();
  }
}
