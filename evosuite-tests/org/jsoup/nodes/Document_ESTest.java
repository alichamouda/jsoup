/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 18:57:15 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.Connection;
import org.jsoup.helper.HttpConnection;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Document_ESTest extends Document_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.maxPaddingWidth(1182);
      assertEquals(1182, document_OutputSettings0.maxPaddingWidth());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.maxPaddingWidth((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1196);
      assertEquals(1196, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document_OutputSettings0.indentAmount((-9));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.encoder();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(charsetEncoder0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("c9+pu0]7s", "c9+pu0]7s");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Request has already been read", true);
      document0.prependChild(xmlDeclaration0);
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Document document0 = Parser.parse("8&c", "8&c");
      Charset charset0 = document0.charset();
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.charset(charset0);
      document0.normalise();
      assertTrue(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Document document0 = new Document((String) null);
      Document document1 = document0.shallowClone();
      assertNotSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6tml", "6tml");
      Document document1 = Parser.parse("=sb^f=f'-i/bl", "=sb^f=f'-i/bl");
      document0.prependChild(document1);
      document0.normalise();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("          ", "          ");
      document0.normalise();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ou2n-,!{Uluo", "ou2n-,!{Uluo");
      document0.title("ou2n-,!{Uluo");
      document0.title("ou2n-,!{Uluo");
      assertEquals("ou2n-,!{Uluo", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmJ})", "EmJ})");
      document0.title("PUBLIC");
      String string0 = document0.title();
      assertEquals("PUBLIC", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("EmJ})", document0.location());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      document0.title();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", document0.location());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Document document0 = new Document("noembed");
      document0.body();
      document0.normalise();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Document document0 = new Document("#root");
      DocumentType documentType0 = new DocumentType("#root", "d-A`SfgOMWk_:", "#root");
      document0.prependChild(documentType0);
      DocumentType documentType1 = document0.documentType();
      assertNotNull(documentType1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#roZt", "#roZt");
      document0.documentType();
      assertEquals("#roZt", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Connection connection0 = document0.connection();
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(connection0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ou2n-,!{Uluo", "ou2n-,!{Uluo");
      HttpConnection httpConnection0 = new HttpConnection();
      document0.connection((Connection) httpConnection0);
      Connection connection0 = document0.connection();
      assertSame(connection0, httpConnection0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ou2n-,!{Uluo", document0.location());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Document document0 = Parser.parse("8?*0cv", "8?*0cv");
      String string0 = document0.nodeName();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8?*0cv", document0.location());
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Document document0 = Parser.parse("Jc", "Jc");
      document0.selectXpath("Jc");
      assertEquals("Jc", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Document document0 = Parser.parse("(,s", "(,s");
      boolean boolean0 = document0.updateMetaCharsetElement();
      assertEquals("(,s", document0.location());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Document document0 = Parser.parse("html", "html");
      Document document1 = (Document)document0.text("html");
      assertEquals(1, document1.childNodeSize());
      assertEquals("html", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Document document0 = new Document(",|H!&^UvDz w");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(",|H!&^UvDz w", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(30, document_OutputSettings0.maxPaddingWidth());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Document document0 = Parser.parse("frameset", "frameset");
      Document document1 = document0.clone();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("frameset", document1.location());
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Document document0 = Parser.parse("Jc", "Jc");
      String string0 = document0.outerHtml();
      assertEquals("Jc", document0.location());
      assertEquals("<html>\n <head></head>\n <body>\n  Jc\n </body>\n</html>", string0);
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r&fr*2-vyahv5cyh", "r&fr*2-vyahv5cyh");
      document0.createElement("r&fr*2-vyahv5cyh");
      assertEquals(1, document0.childNodeSize());
      assertEquals("r&fr*2-vyahv5cyh", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("c9+pu0]7s", "c9+pu0]7s");
      Document document1 = document0.normalise();
      assertEquals(1, document1.childNodeSize());
      assertEquals("c9+pu0]7s", document1.location());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v", "v");
      document0.append("v");
      document0.html();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(30, document_OutputSettings1.maxPaddingWidth());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("c9+pu0]7s", "c9+pu0]7s");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.normalise();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6tml", "6tml");
      document0.shallowClone();
  }
}
