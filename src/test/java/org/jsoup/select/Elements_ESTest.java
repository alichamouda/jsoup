/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:12:14 GMT 2022
 */

package org.jsoup.select;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Collector;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.jsoup.select.StructuralEvaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Elements_ESTest extends Elements_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.eq(50);
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UTF-8");
      Element element0 = new Element(tag0, "ugs}");
      Elements elements0 = element0.children();
      Elements elements1 = elements0.wrap("aR2f!=o7-=");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#5@/L>'3u{IeC>av?", "");
      Elements elements0 = document0.previousElementSiblings();
      Elements elements1 = elements0.val("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      elements0.val("j0");
      String string0 = elements0.val();
      assertEquals("j0", string0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("h6%Wv68&\"3", "h6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.prev();
      Elements elements2 = elements1.unwrap();
      assertEquals(1, elements2.size());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("LT", "z|eDfV");
      Pattern pattern0 = Pattern.compile("R-h?b");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = elements0.toggleClass("2E HHwA`k<r|C");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      String string0 = elements0.toString();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta'dFU", "Ta'dFU");
      Elements elements0 = document0.getElementsByAttributeValueEnding("Cg,f;nR]|,0/_#^", "Cg,f;nR]|,0/_#^");
      Elements elements1 = elements0.tagName("TLw]9U+48#`$9");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/{\nIzyX<_@", "0f(9yAfbO?A%Q");
      Elements elements0 = document0.previousElementSiblings();
      elements0.add((Element) document0);
      Elements elements1 = elements0.select("*");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.removeClass((String) null);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      elements0.clear();
      Elements elements1 = elements0.removeAttr("jsoupContextSource");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.remove();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.prevAll((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("Q(Cb@$#Us");
      document0.normalise();
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.prevAll();
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.select.Elements", "");
      String string0 = elements0.outerHtml();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.not("ScriptDataEscapedLessthanSign");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.nextAll("jsoupContextSource");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("Q(Cb@$#Us");
      Elements elements0 = document0.getElementsByAttributeValueEnding("~DY6%?-+eN=1", "~DY6%?-+eN=1");
      Elements elements1 = elements0.nextAll();
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.next("menuitem");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.next();
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      Element element0 = elements0.last();
      assertSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("Br3q~sz&w+7>QB.3N", "}]lcl#Z{Z");
      Elements elements0 = document0.parents();
      Elements elements1 = elements0.html("ByteBuffer ");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      Element element1 = elements0.first();
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("S4xw[29", "j3QSl5Eag.");
      Elements elements0 = document0.previousElementSiblings();
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has(evaluator_IsRoot0);
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      Elements elements1 = elements0.filter(collector_FirstFinder0);
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.select.Elements", "");
      Elements elements1 = elements0.empty();
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.select.Elements", "");
      Elements elements1 = elements0.before("org.jsoup.select.Elements");
      assertTrue(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.attr("yJr{g", "</");
      assertEquals(0, elements1.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("LT", "z|eDfV");
      Pattern pattern0 = Pattern.compile("R-h?b");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      Elements elements1 = elements0.append("");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("h6%Wv68&\"3", "h6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      Elements elements1 = elements0.prev();
      Elements elements2 = new Elements((List<Element>) elements1);
      Elements elements3 = elements2.after("h6%Wv68&\"3");
      assertFalse(elements3.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.empty();
      // Undeclared exception!
      try { 
        elements1.wrap("missing semicolon on [&%s]");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3E52?H)=r`c#+K");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      Elements elements0 = formElement0.select((Evaluator) evaluator_IsRoot0);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.traverse((NodeVisitor) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      // Undeclared exception!
      try { 
        elements0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Elements elements0 = document0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        elements0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#5@/L>'3u{IeC>av?", "");
      Elements elements0 = document0.previousElementSiblings();
      // Undeclared exception!
      try { 
        elements0.select("t?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 't?': unexpected token at '?'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Elements elements0 = new Elements(1);
      // Undeclared exception!
      try { 
        elements0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        elements0.removeAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("LT", "z|eDfV");
      Pattern pattern0 = Pattern.compile("R-h?b");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        elements0.prevAll("JH057Fb(7KRyuvwNey");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'JH057Fb(7KRyuvwNey': unexpected token at '(7KRyuvwNey'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Element element0 = new Element("f-FC;&4WBdPm");
      Elements elements0 = element0.getElementsByAttributeValue("!daA", "EJ");
      // Undeclared exception!
      try { 
        elements0.prev("test({}) -> {}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'test({}) -> {}': unexpected token at '({}) -> {}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.outerHtml();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValueContaining", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      Elements elements0 = element0.getElementsByAttributeValueEnding("A{zQ]N9[<<NZ-Tm", "org.jsoup.select.Evaluator$AttributeWithValueContaining");
      // Undeclared exception!
      try { 
        elements0.not("A{zQ]N9[<<NZ-Tm");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'A{zQ]N9[<<NZ-Tm': unexpected token at '{zQ]N9[<<NZ-Tm'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ArrayList<Element> arrayList0 = new ArrayList<Element>();
      Elements elements0 = new Elements((Collection<Element>) arrayList0);
      // Undeclared exception!
      try { 
        elements0.not((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.next("]}w\"kPmZE- ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ']}w\"kPmZE-': unexpected token at ']}w\"kPmZE-'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("xml");
      Elements elements0 = document0.getElementsContainingOwnText("xml");
      // Undeclared exception!
      try { 
        elements0.is("_Wz8`");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '_Wz8`': unexpected token at '_Wz8`'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("Ignoring deprecated socket close linger time", "Ignoring deprecated socket close linger time");
      Elements elements0 = document0.getElementsByAttributeValueNot("Ignoring deprecated socket close linger time", "*ot;p/x");
      document0.prependChild(document0);
      // Undeclared exception!
      elements0.html(";8TXk2P;g");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("obqv<ky(au3)iCx&}", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "nI$SuT", attributes0);
      FormElement formElement1 = formElement0.addElement((Element) null);
      Elements elements0 = formElement1.elements();
      // Undeclared exception!
      try { 
        elements0.hasAttr("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        elements0.hasAttr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getAllElements();
      StructuralEvaluator.Has structuralEvaluator_Has0 = new StructuralEvaluator.Has((Evaluator) null);
      Collector.FirstFinder collector_FirstFinder0 = structuralEvaluator_Has0.finder;
      // Undeclared exception!
      try { 
        elements0.filter(collector_FirstFinder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Collector$FirstFinder", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Elements elements0 = new Elements();
      // Undeclared exception!
      try { 
        elements0.filter((NodeFilter) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("TVHb-Zw$g9IwlyD", "");
      Elements elements0 = document0.parents();
      // Undeclared exception!
      try { 
        elements0.eq((-3956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("vU", "vU");
      Pattern pattern0 = Pattern.compile("", 80);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        elements0.before("vU");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      // Undeclared exception!
      try { 
        elements0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        elements0.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#2K&SuTV;^V=GJ#j", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#2K&SuTV;^V=GJ#j", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsByTag("#2K&SuTV;^V=GJ#j");
      // Undeclared exception!
      try { 
        elements0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      // Undeclared exception!
      try { 
        elements0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Element[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((List<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((Collection<Element>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Elements elements0 = null;
      try {
        elements0 = new Elements((-395));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -395
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Element element0 = elements0.first();
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Element[] elementArray0 = new Element[1];
      Elements elements0 = new Elements(elementArray0);
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      List<TextNode> list0 = elements0.textNodes();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ew");
      Element element0 = new Element(tag0, "ew");
      Elements elements0 = element0.getAllElements();
      List<FormElement> list0 = elements0.forms();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      Element element0 = elements0.last();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Element element0 = elements0.last();
      assertEquals("body", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Element element0 = elements0.first();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsByIndexGreaterThan(0);
      Elements elements1 = elements0.parents();
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.parents();
      assertTrue(elements1.equals((Object)elements0));
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      boolean boolean0 = elements0.is("jsoupContextSource");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ew");
      Element element0 = new Element(tag0, "ew");
      Elements elements0 = element0.getAllElements();
      // Undeclared exception!
      try { 
        elements0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Elements elements1 = elements0.remove();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Elements elements0 = new Elements();
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.unwrap();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.unwrap();
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.wrap("_:kxQL~POo");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      Element element0 = new Element(tag0, "");
      elements0.add(element0);
      // Undeclared exception!
      try { 
        elements0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.after("+`7}qLG/[yA");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      elements0.before("b|9z,u0[VY");
      assertEquals(3, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      elements0.append("org.jsoup.telect.Elemens");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Elements elements1 = elements0.prepend("org.jsoup.telect.Elemens");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      Elements elements1 = elements0.prepend((String) null);
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Elements elements1 = elements0.html("b|9z,u0[VY");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      elements0.tagName("org.jsoup.telect.Elemens");
      assertEquals("org.jsoup.telect.elemens", document0.normalName());
      assertEquals("org.jsoup.telect.elemens", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      String string0 = elements0.outerHtml();
      assertEquals("<html>\n <head></head>\n <body>\n  ]q`Hq%a,lH*SU\n </body>\n</html>\n<html>\n <head></head>\n <body>\n  ]q`Hq%a,lH*SU\n </body>\n</html>\n<body>\n ]q`Hq%a,lH*SU\n</body>", string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      String string0 = elements0.html();
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>\n<head></head>\n<body></body>\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ew");
      Element element0 = new Element(tag0, "ew");
      Elements elements0 = element0.getAllElements();
      String string0 = elements0.html();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      List<String> list0 = elements0.eachText();
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      List<String> list0 = elements0.eachText();
      assertTrue(list0.contains("]q`Hq%a,lH*SU"));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Elements elements0 = new Elements(0);
      Tag tag0 = Tag.valueOf("org.jsoup.select.Elements");
      Element element0 = new Element(tag0, "");
      elements0.add(element0);
      boolean boolean0 = elements0.hasText();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      boolean boolean0 = elements0.hasText();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Element element0 = document0.text("]q`Hq%a,lH*SU");
      Elements elements0 = element0.getElementsContainingText("]q`Hq%a,lH*SU");
      String string0 = elements0.text();
      assertEquals("]q`Hq%a,lH*SU ]q`Hq%a,lH*SU ]q`Hq%a,lH*SU ]q`Hq%a,lH*SU", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      String string0 = elements0.text();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("ifynwF>tjS>',srCQ");
      Elements elements0 = document0.getElementsContainingOwnText("ifynwF>tjS>',srCQ");
      String string0 = elements0.val();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("]q`Hq%a,lH*SU", "]q`Hq%a,lH*SU");
      Elements elements0 = document0.getElementsContainingText("]q`Hq%a,lH*SU");
      elements0.toggleClass("]q`Hq%a,lH*SU");
      Elements elements1 = elements0.addClass("]q`Hq%a,lH*SU");
      boolean boolean0 = elements1.hasClass("]q`Hq%a,lH*SU");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      boolean boolean0 = elements0.hasClass("org.jsoup.telect.Elemens");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.removeClass("Vrg.jsokp#U!supportedMimeTypeException");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      Elements elements1 = elements0.addClass(";i+mzLe6");
      assertSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.removeAttr("org.jsoup.UnsupportedMimeTypeException");
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ew");
      Element element0 = new Element(tag0, "ew");
      Elements elements0 = element0.getAllElements();
      Elements elements1 = elements0.attr("", "");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      List<String> list0 = elements0.eachAttr("");
      assertFalse(list0.contains(""));
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Elements elements0 = new Elements(0);
      elements0.add((Element) null);
      // Undeclared exception!
      try { 
        elements0.eachAttr("org.jsoup.select.Elements");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Elements", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsMatchingText("");
      boolean boolean0 = elements0.hasAttr("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("C?^FN^-");
      Element element0 = new Element(tag0, "C?^FN^-");
      Elements elements0 = element0.getElementsByAttributeValueNot("C?^FN^-", "C?^FN^-");
      String string0 = elements0.attr("org.jsoup.select.Elements");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("l$qh6%Wv68&\"3");
      List<TextNode> list0 = elements0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("fFO");
      Elements elements0 = document0.getElementsMatchingText("fFO");
      Elements elements1 = elements0.next();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      List<Comment> list0 = elements0.comments();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      String string0 = elements0.toString();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.prev("org.jsoup.UnsupportedMimeTypeException");
      Elements elements2 = elements1.eq(0);
      assertEquals(0, elements2.size());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.not("org.jsoup.UnsupportedMimeTypeException");
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("", "j0");
      Elements elements0 = document0.getElementsMatchingText("");
      Elements elements1 = elements0.eq(0);
      assertFalse(elements1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("l$qh6%Wv68&\"3");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements1 = elements0.traverse(nodeVisitor0);
      assertSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      Elements elements1 = elements0.select("org.jsoup.nodes.TextNode");
      assertNotSame(elements0, elements1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("X|", "X|");
      Elements elements0 = document0.getElementsContainingOwnText("");
      Elements elements1 = elements0.nextAll();
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Pattern pattern0 = Pattern.compile("", 734);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      List<DataNode> list0 = elements0.dataNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.clone();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Elements elements0 = document0.getElementsContainingText("");
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(1, 0);
      Collector.FirstFinder collector_FirstFinder0 = new Collector.FirstFinder(evaluator_IsNthChild0);
      Elements elements1 = elements0.filter(collector_FirstFinder0);
      assertEquals(4, elements1.size());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell(":^5d,P");
      Elements elements0 = document0.getElementsMatchingOwnText("\n");
      Elements elements1 = elements0.prevAll("org.jsoup.nodes.TextNode");
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("l$qh6%Wv68&\"3");
      Elements elements1 = elements0.prev();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Elements elements0 = document0.getElementsContainingText("");
      Elements elements1 = elements0.next((String) null);
      assertEquals(1, elements1.size());
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Elements elements0 = new Elements();
      Elements elements1 = elements0.prevAll();
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("l$qh6%Wv68&\"3", "l$qh6%Wv68&\"3");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      // Undeclared exception!
      try { 
        elements0.nextAll("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }
}
