/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:12:29 GMT 2022
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Entities;
import org.jsoup.parser.ParseSettings;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Attributes_ESTest extends Attributes_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("data-", "data-");
      Attributes attributes2 = attributes1.put("data-", "zZ}E*");
      Attribute attribute0 = new Attribute("zZ}E*", "|9]", (Attributes) null);
      Attribute attribute1 = attribute0.clone();
      Attributes attributes3 = attributes2.put(attribute1);
      Attributes attributes4 = attributes3.clone();
      Attributes attributes5 = attributes4.put("data-", false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "|9]";
      stringArray0[1] = "zZ}E*";
      stringArray0[2] = "zZ}E*";
      stringArray0[3] = "RD";
      stringArray0[4] = "data-";
      stringArray0[5] = "zZ}E*";
      stringArray0[6] = "zZ}E*";
      stringArray0[7] = "|9]";
      stringArray0[8] = "|9]";
      attributes5.keys = stringArray0;
      attributes5.size();
      attributes5.get("x!#AHszNCn@CzB^6");
      // Undeclared exception!
      try { 
        attributes5.addAll(attributes1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "t2DZiWP,o:'f>";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "t2DZiWP,o:'f>");
      attributes0.vals = null;
      boolean boolean0 = false;
      Attributes.internalKey("t2DZiWP,o:'f>");
      Attributes attributes1 = attributes0.put("t2DZiWP,o:'f>", false);
      // Undeclared exception!
      try { 
        attributes1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Arrays", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("hd", "hd", attributes0);
      Map.Entry.comparingByValue();
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.add("hd", "-jlj3>y");
      attributes2.spliterator();
      Map.Entry.comparingByKey();
      Attributes attributes4 = attributes3.put("", "V}D4^Z|FE5/");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes3.removeIgnoreCase("W1f?tp[|Kku%e;O");
      attributes4.deduplicate(parseSettings0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      attributes3.hasDeclaredValueForKey("vW&efcun!}<X$i");
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Attribute.shouldCollapseAttribute("W1f?tp[|Kku%e;O", "vW&efcun!}<X$i", document_OutputSettings3);
      Attributes.checkNotNull("V}D4^Z|FE5/");
      attributes3.put(attribute0);
      Attributes.internalKey("");
      attributes2.put(attribute0);
      attributes4.removeIgnoreCase("3BdDcK)x");
      attributes0.asList();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        attributes1.html((Appendable) pipedWriter0, document_OutputSettings3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("c[>pPPKh8", "c[>pPPKh8");
      Attributes attributes2 = attributes1.put("j3o'IYw{+4[u'mgFI", false);
      String[] stringArray0 = new String[0];
      attributes2.vals = stringArray0;
      // Undeclared exception!
      try { 
        attributes2.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("G]VAQ/x>", "G]VAQ/x>");
      Attributes attributes2 = attributes1.clone();
      attributes1.equals(attributes2);
      attributes2.spliterator();
      attributes2.hasKey("G]VAQ/x>");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Attributes attributes3 = attributes0.put("G]VAQ/x>", true);
      attributes3.hasKey("G]VAQ/x>");
      attributes3.hasKey("G]VAQ/x>");
      attributes2.getIgnoreCase("G]VAQ/x>");
      attributes1.hasKey("r p2\"ff/y?kP73#'4");
      attributes1.asList();
      attributes0.normalize();
      attributes2.getIgnoreCase("");
      attributes2.getIgnoreCase("Q:[-r(0Tlq6pwNs]<");
      attributes1.equals("");
      attributes0.addAll(attributes2);
      attributes0.add("RD", "Q:[-r(0Tlq6pwNs]<");
      attributes2.size();
      attributes1.html();
      attributes0.get("G]VAQ/x>");
      attributes1.putIgnoreCase("G]VAQ/x>", "Jk0V~2c}fK");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string0 = "{i\\q<R8eY3&02oYoH";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attributes attributes2 = attributes1.put("{iq<R8eY3&02oYoH", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      String string1 = "IDLE";
      Attributes attributes3 = attributes2.add("tN+{u-]_", "IDLE");
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes$Dataset$EntrySet", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Attributes attributes4 = attributes2.put(attribute0);
      attributes4.removeIgnoreCase("IDLE");
      Attributes attributes5 = attributes3.put("{iq<R8eY3&02oYoH", true);
      attributes3.hasKeyIgnoreCase("data-");
      attributes5.put("IDLE", true);
      attributes3.hasDeclaredValueForKeyIgnoreCase("IDLE");
      String string2 = "WRITING";
      attributes4.hasDeclaredValueForKey("{iq<R8eY3&02oYoH");
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "hd";
      attributes0.asList();
      attributes0.removeIgnoreCase("hd");
      Attributes attributes1 = attributes0.put("hd", true);
      Attributes attributes2 = attributes0.put(",X<<#-.eAh.rmSYQ", ",X<<#-.eAh.rmSYQ");
      attributes2.getIgnoreCase("7GF5^S_h2j.vlY");
      attributes2.hasDeclaredValueForKey("hd");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "7GF5^S_h2j.vlY";
      stringArray0[1] = ",X<<#-.eAh.rmSYQ";
      stringArray0[2] = "7GF5^S_h2j.vlY";
      stringArray0[3] = "dveh+";
      stringArray0[4] = "dveh+";
      stringArray0[5] = "hd";
      attributes1.keys = stringArray0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      attributes0.indexOfKey("org.eclipse.jetty.util.component.DumpableCollection");
      attributes0.hasDeclaredValueForKeyIgnoreCase("hd");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      // Undeclared exception!
      try { 
        attributes0.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "e(?pp{WJN:'Y2z:nt";
      Attributes attributes1 = attributes0.put("", "e(?pp{WJN:'Y2z:nt");
      Attributes attributes2 = attributes1.clone();
      attributes1.equals("");
      attributes2.remove("");
      attributes1.equals(attributes2);
      attributes2.spliterator();
      attributes2.hasKey("e(?pp{WJN:'Y2z:nt");
      attributes2.dataset();
      Attributes attributes3 = attributes0.put("e(?pp{WJN:'Y2z:nt", false);
      attributes3.hasKey("");
      attributes2.getIgnoreCase("");
      attributes1.hasKey("r p2\"ff/y?kP73#'4");
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("data-", "data-");
      Attributes attributes2 = attributes1.put("data-", "data-");
      Attribute attribute0 = new Attribute("data-", "|9]", (Attributes) null);
      Attribute attribute1 = attribute0.clone();
      Attributes attributes3 = attributes2.put(attribute1);
      Attributes attributes4 = attributes3.clone();
      Attributes attributes5 = attributes4.put("data-", false);
      attributes5.size();
      attributes4.equals(attributes3);
      Attributes.checkNotNull("YKs%!");
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("/gm9tq%ich", "/gm9tq%ich");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      stringArray0[1] = "-@G`&~ttV";
      stringArray0[2] = "/gm9tq%ich";
      attributes0.keys = stringArray0;
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", false);
      Attributes attributes3 = attributes2.add("/gm9tq%ich", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      Attributes attributes4 = attributes3.clone();
      attributes4.asList();
      attributes3.indexOfKey("/gm9tq%ich");
      attributes1.clone();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      // Undeclared exception!
      try { 
        attributes3.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("]1}{?:.KhB", false);
      attributes0.putIgnoreCase("]1}{?:.KhB", "]1}{?:.KhB");
      Attributes attributes2 = attributes1.put("h2@mc:I*UV", "h2@mc:I*UV");
      attributes2.equals((Object) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      attributes1.putIgnoreCase("h2@mc:I*UV", "Q*`M+");
      attributes1.toString();
      // Undeclared exception!
      try { 
        attributes1.remove((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.spliterator();
      String string0 = "svt@;*C\"2WW;dpb\"R";
      Attributes attributes1 = attributes0.put("svt@;*C\"2WW;dpb\"R", false);
      attributes1.keys = null;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      String[] stringArray0 = null;
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        attributes1.add("svt@;*C\"2WW;dpb\"R", "svt@;*C\"2WW;dpb\"R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "data-";
      Attributes attributes1 = attributes0.add("data-", "data-");
      Attributes attributes2 = attributes1.put("data-", "zZ}E*");
      Attribute attribute0 = new Attribute("zZ}E*", "|9]", (Attributes) null);
      Attribute attribute1 = attribute0.clone();
      Attributes attributes3 = attributes2.put(attribute1);
      Attributes attributes4 = attributes3.clone();
      Attributes attributes5 = attributes4.put("data-", false);
      attributes5.size();
      // Undeclared exception!
      try { 
        attributes2.addAll((Attributes) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "Xdata-";
      Attributes attributes1 = attributes0.add("Xdata-", "Xdata-");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Xdata-";
      attributes0.vals = stringArray0;
      attributes1.put("Xdata-", "zZ}*");
      String string1 = "|9]";
      Attribute attribute0 = new Attribute("zZ}*", "|9]", (Attributes) null);
      attribute0.clone();
      // Undeclared exception!
      try { 
        attributes1.add("zZ}*", "|9]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string0 = "_@Hs>iGk\"m\\P";
      attributes1.html();
      Attributes attributes2 = attributes1.put("_@Hs>iGk\"mP", false);
      attributes0.iterator();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_@Hs>iGk\"mP";
      stringArray0[1] = "";
      stringArray0[2] = "_@Hs>iGk\"mP";
      stringArray0[3] = "_@Hs>iGk\"mP";
      stringArray0[4] = "";
      stringArray0[5] = "_@Hs>iGk\"mP";
      attributes1.hasDeclaredValueForKeyIgnoreCase("/gM9TQ%ich");
      attributes2.keys = stringArray0;
      parseSettings0.normalizeTag("");
      attributes2.hasKey("org.eclipse.jetty.util.PathWatcher$PathWatchEvent");
      attributes0.deduplicate(parseSettings0);
      attributes2.remove("_@Hs>iGk\"mP");
      attributes2.indexOfKey("_@Hs>iGk\"mP");
      Attributes attributes3 = attributes1.put("_@Hs>iGk\"mP", false);
      attributes1.deduplicate(parseSettings0);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        attributes3.putIgnoreCase("noshade", "_@Hs>iGk\"mP");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("m?", "m?");
      attributes0.put("/gm9tq%ich", "data-");
      attributes0.toString();
      Attribute attribute1 = attribute0.clone();
      Attributes attributes1 = attributes0.put(attribute1);
      attribute0.setValue("6{_%");
      attributes0.html();
      Attributes attributes2 = attributes1.put("m?", "m?");
      attributes2.indexOfKey("m?");
      attributes1.hasKeyIgnoreCase("m?");
      attributes2.isEmpty();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      attributes2.equals(attribute0);
      attributes1.deduplicate(parseSettings0);
      attribute0.setValue("m?");
      attributes1.indexOfKey("m?");
      Attributes attributes3 = attributes2.put(attribute0);
      attributes3.hasDeclaredValueForKey(" m?=\"m?\"");
      attributes1.indexOfKey("m?");
      attributes1.hasKey("m?");
      attributes2.get("lpKOs't1oFYh:nI?KA");
      attributes2.clone();
      MockFile mockFile0 = null;
      try {
        mockFile0 = new MockFile((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.File", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string0 = "D!lFY\"o{C-g`<c|J";
      Attributes attributes2 = attributes1.add("D!lFY\"o{C-g`<c|J", "D!lFY\"o{C-g`<c|J");
      String string1 = null;
      String[] stringArray0 = new String[3];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "[t>)}EO5");
      attributes2.indexOfKey("[t>)}EO5");
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes2.hasDeclaredValueForKey(stringArray0[2]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("wLz[jbv:M>A", true);
      attributes0.remove("TR_./%'o=PaN1Rm");
      Attributes.internalKey("org.jsoup.nodes.attributes$dataset");
      attributes2.hasDeclaredValueForKeyIgnoreCase("wLz[jbv:M>A");
      Attributes attributes3 = attributes2.add("", "s;");
      Attributes attributes4 = attributes3.put("", "lH;KI/k91ZB");
      // Undeclared exception!
      try { 
        attributes4.addAll(attributes3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("String input must not be null", "String input must not be null");
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.put("'", true);
      Attribute attribute0 = Attribute.createFromEncoded("'5*AHPk!b+/-", "RUNNING");
      Attributes attributes4 = attributes3.put(attribute0);
      Attributes attributes5 = attributes4.add("String input must not be null", "'");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("org.jsoup.select.Evaluator$IndexGreaterThan");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.maxPaddingWidth(3215);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        attributes5.html((Appendable) charBuffer0, document_OutputSettings3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("BkjU<|h]=J*ka", "org.jsoup.nodes.Attributes$Dataset");
      Attribute attribute0 = new Attribute("BkjU<|h]=J*ka", "org.jsoup.nodes.Attributes$Dataset", attributes1);
      Attributes attributes2 = attributes0.put(attribute0);
      attributes1.getIgnoreCase("org.jsoup.nodes.Attributes$Dataset");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BkjU<|h]=J*ka";
      stringArray0[1] = "org.jsoup.nodes.Attributes$Dataset";
      stringArray0[2] = "";
      stringArray0[3] = "BkjU<|h]=J*ka";
      stringArray0[4] = "BkjU<|h]=J*ka";
      stringArray0[5] = "";
      stringArray0[6] = "Sb(w1~46R";
      stringArray0[7] = "Unexpected HandshakeStatus ";
      attributes2.keys = stringArray0;
      Attributes attributes3 = attributes2.clone();
      attributes2.addAll(attributes1);
      attributes2.dataset();
      attributes1.removeIgnoreCase("");
      attributes0.dataset();
      Attributes attributes4 = attributes0.add("Sb(w1~46R", "BkjU<|h]=J*ka");
      Attributes attributes5 = attributes4.put(attribute0);
      attributes5.add("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "BkjU<|h]=J*ka");
      attributes3.equals("BkjU<|h]=J*ka");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      // Undeclared exception!
      try { 
        attributes2.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Attribute attribute0 = new Attribute("default", "jFJP&`!_,Fh&'eWi}+");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("jFJP&`!_,Fh&'eWi}+", "org.jsoup.nodes.Attributes");
      Attributes attributes2 = attributes1.put("default", "default");
      Attributes attributes3 = attributes2.put("OY", true);
      attributes3.add((String) null, "OY");
      // Undeclared exception!
      try { 
        attributes2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "";
      Attributes attributes1 = attributes0.put("", "UNKNOWN");
      String string1 = null;
      Attributes attributes2 = attributes1.add((String) null, "");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "UNKNOWN";
      stringArray0[1] = "UNKNOWN";
      attributes2.vals = stringArray0;
      attributes2.size();
      String string2 = "Accept failed for channel {}";
      Attribute attribute0 = new Attribute("aK", "Accept failed for channel {}");
      attributes1.remove("aK");
      // Undeclared exception!
      try { 
        attributes0.put(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.add(" failed on '", "W'!$]0b");
      Attributes attributes3 = attributes2.put(" failed on '", "lxyj0~*y");
      attributes3.equals(attributes1);
      attributes1.html();
      attributes2.put("lxyj0~*y", "Oo.}uFvoVbF$Q!v24p");
      attributes2.dataset();
      attributes3.iterator();
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKeyIgnoreCase("10\"1p:/K@;D WykFRn");
      Attributes attributes1 = attributes0.put("", true);
      attributes1.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "]d&3kN!5(q");
      Attributes attributes2 = attributes1.add("", (String) null);
      String[] stringArray0 = new String[0];
      attributes2.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes2.addAll(attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("T>$VlNiRn", "Ky|ojrEqF\"S");
      attributes1.hasKeyIgnoreCase("Ky|ojrEqF\"S");
      attributes1.getIgnoreCase("T>$VlNiRn");
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        attributes1.removeIgnoreCase("org.jsoup.nodes.Attributes$Dataset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        attributes0.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("S*yOeB/MXwggV_p ", (String) null);
      Attributes attributes2 = attributes1.put("]*c", "");
      String string0 = "FXcM|;}o<h:,eA^arG";
      Attribute attribute0 = new Attribute("FXcM|;}o<h:,eA^arG", "org.jsoup.nodes.Attributes");
      Attributes attributes3 = attributes2.put(attribute0);
      attribute0.toString();
      Attributes attributes4 = attributes3.clone();
      Attributes attributes5 = attributes4.put(attribute0);
      attributes3.toString();
      Attributes attributes6 = attributes2.clone();
      attributes5.toString();
      attributes1.hasKey(" S*yOeBMXwggV_p ]*c=\"\" FXcM|;}o<h:,eA^arG=\"org.jsoup.nodes.Attributes\"");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = " S*yOeBMXwggV_p ]*c=\"\" FXcM|;}o<h:,eA^arG=\"org.jsoup.nodes.Attributes\"";
      stringArray0[2] = "]*c";
      stringArray0[3] = "org.jsoup.nodes.Attributes";
      stringArray0[4] = null;
      stringArray0[5] = " S*yOeBMXwggV_p ]*c=\"\" FXcM|;}o<h:,eA^arG=\"org.jsoup.nodes.Attributes\"";
      stringArray0[6] = " S*yOeBMXwggV_p ]*c=\"\" FXcM|;}o<h:,eA^arG=\"org.jsoup.nodes.Attributes\"";
      stringArray0[7] = "FXcM|;}o<h:,eA^arG=\"org.jsoup.nodes.Attributes\"";
      attributes2.vals = stringArray0;
      Attributes.internalKey("?2~^iit12}oR");
      attributes2.clone();
      attributes0.put(attribute0);
      // Undeclared exception!
      try { 
        attributes6.hasKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasKey("flush b[{}]={}");
      Attributes attributes1 = attributes0.add("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset", false);
      attributes2.normalize();
      attributes1.toString();
      attributes1.iterator();
      attributes0.add((String) null, "");
      // Undeclared exception!
      try { 
        attributes2.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = ".|,`(S~d";
      String string1 = "zec_={-";
      attributes0.hasKeyIgnoreCase("zec_={-");
      String[] stringArray0 = null;
      attributes0.keys = null;
      attributes0.hasDeclaredValueForKey("zec_={-");
      Attribute attribute0 = new Attribute(".|,`(S~d", "zec_={-");
      Attribute.createFromEncoded(".|,`(S~d", "zec_={-");
      // Undeclared exception!
      try { 
        attributes0.put(attribute0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = null;
      // Undeclared exception!
      try { 
        attributes0.hasKeyIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.dataset();
      attributes0.add("%s@%x[size=%d]", "%s@%x[size=%d]");
      Attributes attributes1 = attributes0.add("%s@%x[size=%d]", "%s@%x[size=%d]");
      attributes1.spliterator();
      attributes1.indexOfKey("");
      attributes0.isEmpty();
      attributes0.add(">9kn'>:xT", "%s@%x[size=%d]");
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "[";
      Attributes attributes1 = attributes0.put("[", "[");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.clone();
      attributes1.forEach(consumer0);
      // Undeclared exception!
      try { 
        attributes1.getIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.html();
      String string0 = "MoC0*%K7|6;rMgVDE=";
      attributes0.indexOfKey("MoC0*%K7|6;rMgVDE=");
      Attributes attributes1 = attributes0.put("", true);
      attributes0.getIgnoreCase("   ");
      attributes0.keys = null;
      attributes1.dataset();
      // Undeclared exception!
      try { 
        attributes1.get("org.eclipse.jetty.util.Scanner$Visitor");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = null;
      // Undeclared exception!
      try { 
        attributes0.put((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.get("");
      Attributes attributes1 = new Attributes();
      attributes0.normalize();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Map.Entry.comparingByValue();
      Attributes attributes2 = attributes1.put(attribute0);
      attributes0.addAll(attributes2);
      attributes1.removeIgnoreCase("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      attributes1.clone();
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.isEmpty();
      attributes0.spliterator();
      attributes0.remove("s");
      attributes0.hasKey("org.jsoup.nodes.Attributes$Dataset");
      Attributes.checkNotNull("s");
      attributes0.removeIgnoreCase("s");
      Attributes.checkNotNull("/eIQ?eVB}7f{s|\"w0Z");
      Attributes.checkNotNull("/eIQ?eVB}7f{s|\"w0Z");
      attributes0.size();
      attributes0.size();
      attributes0.equals("s");
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("$$-F>UakBluSXDu~k;:", "$$-F>UakBluSXDu~k;:", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "$$-F>UakBluSXDu~k;:";
      stringArray0[1] = "org.jsoup.nodes.Attributes$Dataset";
      stringArray0[2] = "org.jsoup.nodes.Attributes$Dataset";
      stringArray0[3] = "org.jsoup.nodes.Attributes$Dataset";
      attribute0.setKey("org.jsoup.nodes.Attributes$Dataset");
      stringArray0[4] = "$$-F>UakBluSXDu~k;:";
      attributes1.keys = stringArray0;
      attributes1.toString();
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
      attributes2.asList();
      Object object0 = new Object();
      attributes2.vals = attributes1.keys;
      attributes2.equals(object0);
      attributes1.indexOfKey("$$-F>UakBluSXDu~k;:");
      attributes2.asList();
      attributes1.get("$$-F>UakBluSXDu~k;:");
      attributes0.iterator();
      attributes0.dataset();
      attributes1.remove("");
      attributes2.iterator();
      attributes1.dataset();
      attributes1.getIgnoreCase("$$-F>UakBluSXDu~k;:");
      Attributes attributes3 = attributes0.add("", "");
      attributes3.clone();
      attributes0.iterator();
      attributes3.putIgnoreCase("org.jsoup.nodes.Attributes$Dataset", "s(KgALU5ujQ2nLqCJ");
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "org.jsoup.nodes.Attributes$Dataset$EntrySet";
      Attributes attributes1 = attributes0.add("org.jsoup.nodes.Attributes$Dataset$EntrySet", (String) null);
      attributes1.html();
      Attribute attribute0 = Attribute.createFromEncoded("Ny", "");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.put("NL!2bz5xT<|A", false);
      attributes3.addAll(attributes0);
      Attributes attributes4 = attributes3.put("NL!2bz5xT<|A", "NL!2bz5xT<|A");
      Attributes attributes5 = attributes4.clone();
      attributes2.indexOfKey("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      attributes5.putIgnoreCase("", "];\"eNW{");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      // Undeclared exception!
      try { 
        parseSettings0.normalizeAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      attributes0.addAll(attributes1);
      String string0 = "";
      Attribute attribute0 = Attribute.createFromEncoded("w7;$P:I>*>\"4^]V]|*@", "");
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.add("flush", "");
      String string1 = "v6<yy@'>Siqg7U_";
      attributes2.spliterator();
      boolean boolean0 = false;
      String[] stringArray0 = new String[7];
      stringArray0[0] = "w7;$P:I>*>\"4^]V]|*@";
      stringArray0[1] = "flush";
      stringArray0[2] = "w7;$P:I>*>\"4^]V]|*@";
      attribute0.setKey("o'Q)NYfZ\"/!RNf");
      stringArray0[3] = "";
      stringArray0[4] = "v6<yy@'>Siqg7U_";
      stringArray0[5] = "gw*?;l8&#";
      stringArray0[6] = "flush";
      attributes3.keys = stringArray0;
      // Undeclared exception!
      try { 
        attributes3.deduplicate((ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.html();
      attributes0.indexOfKey("");
      Attributes attributes1 = attributes0.put("", false);
      attributes1.addAll(attributes0);
      attributes0.indexOfKey("");
      attributes1.indexOfKey("");
      attributes1.hasDeclaredValueForKey("");
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("_n4e/nZvpFu7No", "");
      Attributes attributes2 = attributes1.add("", "yd@NDJUk=x");
      attributes2.hasDeclaredValueForKeyIgnoreCase("");
      attributes2.get("");
      attributes0.hasDeclaredValueForKeyIgnoreCase("org.jsoup.nodes.Attributes$Dataset");
      attributes2.add("yd@NDJUk=x", "fa]x*'a\"w");
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", true);
      Attributes attributes3 = attributes2.clone();
      Attributes attributes4 = attributes3.add("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "jZJ<)--MCqR5$");
      Attribute attribute0 = Attribute.createFromEncoded("ROqrxHaYX>!}", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      Attributes attributes5 = attributes4.put(attribute0);
      Attributes attributes6 = attributes5.put(attribute0);
      attributes5.equals("ROqrxHaYX>!}");
      attributes5.html();
      attributes3.asList();
      attributes0.indexOfKey(" org.jsoup.nodes.Attributes$Dataset$DatasetIterator org.jsoup.nodes.Attributes$Dataset$DatasetIterator=\"jZJ<)--MCqR5$\" ROqrxHaYX>!}=\"org.jsoup.nodes.Attributes$Dataset$DatasetIterator\"");
      attributes2.equals("&n!g^");
      // Undeclared exception!
      try { 
        attributes6.indexOfKey((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = null;
      Attributes attributes1 = attributes0.put("<$wDXE", (String) null);
      attributes1.normalize();
      // Undeclared exception!
      try { 
        attributes1.putIgnoreCase((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "e(?pp{WJN:'Y2z:nt";
      Attributes attributes1 = attributes0.put("", "e(?pp{WJN:'Y2z:nt");
      Attributes attributes2 = attributes1.clone();
      attributes1.equals("");
      attributes1.equals(attributes2);
      attributes2.spliterator();
      attributes2.hasKey("e(?pp{WJN:'Y2z:nt");
      attributes2.dataset();
      Attributes attributes3 = attributes0.put("e(?pp{WJN:'Y2z:nt", false);
      attributes3.hasKey("");
      attributes2.getIgnoreCase("");
      attributes1.hasKey("r p2\"ff/y?kP73#'4");
      // Undeclared exception!
      try { 
        attributes1.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes0.deduplicate(parseSettings0);
      attributes0.putIgnoreCase("_Bm)S pc", "_Bm)S pc");
      attributes0.hasDeclaredValueForKey("_Bm)S pc");
      attributes0.hasDeclaredValueForKey("&j -Pe");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "&j -Pe";
      stringArray0[1] = "&j -Pe";
      stringArray0[2] = "_Bm)S pc";
      stringArray0[3] = "_Bm)S pc";
      stringArray0[4] = "&j -Pe";
      stringArray0[5] = "&j -Pe";
      stringArray0[6] = "_Bm)S pc";
      stringArray0[7] = "&j -Pe";
      attributes0.vals = stringArray0;
      attributes0.add((String) null, (String) null);
      attributes0.put("", "");
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("hd", "hd");
      Map.Entry.comparingByValue();
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.add("hd", "-jlj3>y");
      attributes2.spliterator();
      Map.Entry.comparingByKey();
      Attributes attributes4 = attributes3.put("", "V}D4^Z|FE5/");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes4.deduplicate(parseSettings0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Attribute.shouldCollapseAttribute("W1ftp[|Kku%e;O", "vW&efcun!}<X$i", document_OutputSettings3);
      Attributes.checkNotNull("V}D4^Z|FE5/");
      attributes3.put(attribute0);
      Attributes.internalKey("");
      attributes2.put(attribute0);
      attributes4.removeIgnoreCase("3BdDcK)x");
      attributes0.asList();
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", false);
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.add("", "");
      attributes1.remove("");
      Attributes attributes4 = attributes3.put("", "");
      attributes4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("'nce=-z<-C0)+", true);
      String string0 = "";
      Attributes attributes2 = attributes1.add("", "");
      String string1 = " un\"mZ$sp'N~fu`0";
      // Undeclared exception!
      try { 
        attributes2.asList();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("%^;\"y^", "%^;\"y^");
      Attribute attribute1 = attribute0.clone();
      attribute1.toString();
      Attributes attributes1 = attributes0.put(attribute1);
      Attributes attributes2 = attributes1.put("7bpiF-CuousJd1|::", false);
      attribute0.parent = attributes2;
      String string0 = null;
      // Undeclared exception!
      try { 
        attributes1.hasDeclaredValueForKeyIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.add("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      attributes2.toString();
      Attribute attribute1 = attribute0.clone();
      Attributes attributes3 = attributes1.put(attribute1);
      Attributes attributes4 = attributes2.put("", "8-6'[uR~CJ[bV1q");
      Attributes attributes5 = attributes4.clone();
      Attributes attributes6 = attributes5.put("org.jsoup.nodes.Attributes", false);
      attributes6.equals("org.jsoup.nodes.Attributes");
      attributes4.dataset();
      boolean boolean0 = true;
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      attributes5.deduplicate(parseSettings0);
      // Undeclared exception!
      try { 
        attributes1.addAll(attributes3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("R^!1kR/uGa#kK@M", "1[:|?c&O=6[JtZl1Mq");
      Attributes attributes2 = attributes1.put("G$&V2]=", "Waiting for {} for {}");
      Attribute attribute0 = new Attribute("1[:|?c&O=6[JtZl1Mq", "Waiting for {} for {}");
      Attributes attributes3 = attributes2.put(attribute0);
      Attributes attributes4 = attributes3.put("G$&V2]=", false);
      attributes4.put("GON$F9@2", true);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "dveH+");
      Attributes attributes2 = attributes1.clone();
      Attribute attribute0 = new Attribute("dveH+", "dveH+");
      Attributes attributes3 = attributes2.put(attribute0);
      Attributes attributes4 = attributes3.put("dveH+", true);
      Attributes attributes5 = attributes4.add("}\f{GwW5Sfk})DBC", "org.eclipse.jetty.util.thread.ExecutorSizedThreadPool");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(false);
      attributes5.html((Appendable) mockPrintWriter0, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Object object0 = new Object();
      attributes0.equals(object0);
      Attributes attributes1 = attributes0.put("Q", false);
      MockFileWriter mockFileWriter0 = new MockFileWriter("Q");
      attributes1.html((Appendable) mockFileWriter0, (Document.OutputSettings) null);
      Attributes attributes2 = attributes1.clone();
      attributes2.hasKeyIgnoreCase("CI;oN/ZIeq~Hy|WG");
      attributes1.hasKey("Q");
      attributes1.isEmpty();
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Object object0 = new Object();
      attributes0.equals(object0);
      Attributes attributes1 = attributes0.add((String) null, (String) null);
      attributes1.add((String) null, (String) null);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      // Undeclared exception!
      try { 
        attributes0.html((Appendable) pipedWriter0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "data-";
      Attributes attributes1 = attributes0.put("data-", "data-");
      Attribute attribute0 = null;
      // Undeclared exception!
      try { 
        attributes1.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("x6G],*kbz'9KsX2|", "x6G],*kbz'9KsX2|");
      Attributes attributes2 = attributes1.put("x6G],*kbz'9KsX2|", false);
      attributes2.remove("|fL");
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes$Dataset", "N<nE", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.remove("org.jsoup.nodes.Attributes$Dataset");
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", true);
      Attributes attributes2 = attributes1.add("org.jsoup.nodes.Attributes$Dataset", (String) null);
      attributes2.toString();
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", false);
      Attributes attributes2 = attributes1.clone();
      attributes2.indexOfKey("uj}mySCZ.");
      attributes2.isEmpty();
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("<D]yb8", "<D]yb8");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", (String) null);
      attributes2.add("org.jsoup.nodes.Attributes$Dataset$EntrySet", "FSMq/,H@M6");
      Attributes attributes3 = attributes2.add("<D]yb8", "l<\"a,.^0");
      Attributes attributes4 = attributes3.put("org.jsoup.nodes.Attributes", true);
      Attributes attributes5 = attributes4.clone();
      attributes4.putIgnoreCase("m^*N`Ks}vxALO", "");
      attributes5.add("K9j+", "<D]yb8");
      Attributes.checkNotNull((String) null);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("BkjU<|h]=J*ka", "org.jsoup.nodes.Attributes$Dataset");
      Attribute attribute0 = new Attribute("BkjU<|h]=J*ka", "org.jsoup.nodes.Attributes$Dataset", attributes1);
      Attributes attributes2 = attributes0.put(attribute0);
      attributes1.getIgnoreCase("org.jsoup.nodes.Attributes$Dataset");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "BkjU<|h]=J*ka";
      stringArray0[1] = "org.jsoup.nodes.Attributes$Dataset";
      stringArray0[2] = "";
      stringArray0[3] = "BkjU<|h]=J*ka";
      stringArray0[4] = "BkjU<|h]=J*ka";
      stringArray0[5] = "";
      stringArray0[6] = "Sb(w1~46R";
      stringArray0[7] = "Unexpected HandshakeStatus ";
      attributes2.keys = stringArray0;
      Attributes attributes3 = attributes2.clone();
      attributes2.addAll(attributes1);
      attributes2.dataset();
      attributes1.removeIgnoreCase("");
      attributes0.dataset();
      Attributes attributes4 = attributes0.add("Sb(w1~46R", "BkjU<|h]=J*ka");
      attributes4.put(attribute0);
      attributes3.equals("BkjU<|h]=J*ka");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      // Undeclared exception!
      try { 
        attributes2.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Attributes.internalKey("org.jsoup.nodes.Attributes$Dataset");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
      attributes0.put("org.jsoup.nodes.Attributes$Dataset$EntrySet", "");
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      Attributes attributes2 = attributes1.put("lnf]f4_]RS", "org.jsoup.nodes.Attributes$Dataset");
      // Undeclared exception!
      try { 
        attributes2.removeIgnoreCase((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("A", "A");
      // Undeclared exception!
      try { 
        attributes1.put((String) null, "_S1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add(".G-t64AV0!]", ".G-t64AV0!]");
      attributes1.normalize();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      attributes0.deduplicate(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      parseSettings0.normalizeAttribute("STARTED @{}ms {}");
      attributes0.hasKey("STARTED @{}ms {}");
      attributes0.deduplicate(parseSettings0);
      Attributes attributes1 = attributes0.add("org.jsoup.nodes.Attributes$Dataset$EntrySet", "n");
      attributes0.getIgnoreCase("7v*U\"6mUg~Lb 5");
      attributes0.hasKeyIgnoreCase("7v*U\"6mUg~Lb 5");
      parseSettings0.normalizeTag("");
      attributes0.getIgnoreCase("3B");
      attributes0.html();
      Attributes.checkNotNull("IDLE");
      attributes0.putIgnoreCase("h@f|c", "");
      attributes0.get("Xo6-pR|x]&");
      attributes0.getIgnoreCase("b156$^KtDPVzZn");
      attributes0.addAll(attributes1);
      attributes1.dataset();
      Attributes attributes2 = attributes0.put("", "#e-d");
      attributes2.deduplicate(parseSettings0);
      Attributes attributes3 = attributes2.add("#e-d", "3B");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        attributes3.forEach(consumer0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.hasDeclaredValueForKey("org.jsoup.nodes.Attributes$Dataset");
      attributes0.indexOfKey("dfyuh}Ru58k+I^s");
      attributes0.hashCode();
      attributes0.removeIgnoreCase("");
      attributes0.getIgnoreCase("=]$^dm.cU.:5L{DR*:k");
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("org.jsoup.nodes.Attributes", "org.jsoup.nodes.Attributes");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("data-", true);
      Attributes attributes3 = attributes2.clone();
      Attributes attributes4 = attributes3.add(" ", (String) null);
      Attributes attributes5 = attributes4.put("", "\"h,%&|vurdr");
      attributes5.size();
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Attribute attribute0 = new Attribute("default", "jFJP&`!_,Fh&'eWi}+");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("jFJP&`!_,Fh&'eWi}+", "org.jsoup.nodes.Attributes");
      Attributes attributes2 = attributes1.put("default", "JFIYx;>jghwSr=:");
      Attributes attributes3 = attributes2.put("OY", true);
      attributes3.add((String) null, "OY");
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      attributes0.deduplicate(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes.internalKey((String) null);
      Attributes attributes1 = attributes0.put("9Hg", true);
      attributes1.hasKeyIgnoreCase("9Hg");
      attributes0.addAll(attributes1);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes1.deduplicate(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("x", "org.eclipse.jetty.io.SelectChannelEndPoint");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.get("qg[W\u0005USMMprK?F\"i");
      attributes1.getIgnoreCase("x");
      attributes1.hasKeyIgnoreCase("org.eclipse.jetty.io.SelectChannelEndPoint");
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("\"c", "WATCH");
      Attributes attributes2 = attributes1.put("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", true);
      attributes2.html();
      attributes2.dataset();
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("default", "&Ky65+QQKZ-/s,qHGha");
      Attributes attributes2 = attributes1.put("jFJP&`!_,Fh&'eWi}+", true);
      Attribute attribute0 = new Attribute("default", "jFJP&`!_,Fh&'eWi}+");
      attributes2.put(attribute0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", false);
      attributes1.hasKey("");
      attributes0.toString();
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Attributes.checkNotNull("");
      Attributes.checkNotNull("uIQ7x]a,lb");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("uIQ7x]a,lb", false);
      Attributes attributes2 = attributes1.put("", "");
      Attributes attributes3 = attributes2.add("uIQ7x]a,lb", "");
      attributes3.add("dp[OrWu&Ot~", "uIQ7x]a,lb");
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", true);
      Attributes attributes2 = attributes1.clone();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      attributes2.deduplicate(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("WTF: No buffer left to unconsume.", true);
      attributes1.hasKey("~^P n`PYGP]8><l+]");
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.put("fd", "org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      attributes3.equals("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("%\"+-?e6Z<>|iM+8", "%\"+-?e6Z<>|iM+8");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.hashCode();
      attributes0.asList();
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(";M6/%@Exxg|%G?zVX@", "");
      attributes1.hasKeyIgnoreCase("");
      attributes0.hasKeyIgnoreCase("");
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("", "<%");
      Attributes attributes2 = attributes1.clone();
      Attributes attributes3 = attributes2.put("", true);
      Attribute attribute0 = new Attribute("<%", "<%", attributes1);
      Attribute attribute1 = attribute0.clone();
      Attributes attributes4 = attributes3.put(attribute1);
      attributes4.hasKey("");
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase(".ulbBx16C'X,RmY", ".ulbBx16C'X,RmY");
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("cu/a<", "cu/a<");
      attributes1.hasDeclaredValueForKeyIgnoreCase("cu/a<");
      attributes0.hasDeclaredValueForKey("djm");
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "HW)fHT277Ft@<D");
      Attributes attributes0 = new Attributes();
      attributes0.hasKeyIgnoreCase("0rmH");
      Attributes attributes1 = attributes0.put("i", "HW)fHT277Ft@<D");
      Attributes attributes2 = attributes0.put("i", false);
      attributes0.addAll(attributes1);
      Attributes attributes3 = attributes2.clone();
      attributes3.putIgnoreCase("HW)fHT277Ft@<D", "HW)fHT277Ft@<D");
      attributes3.size();
      attributes2.remove("0rmH");
      Attributes attributes4 = attributes3.put("i", false);
      Attributes.checkNotNull((String) null);
      attributes4.hasKey("0rmH");
      Attributes.checkNotNull("0rmH");
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string0 = "{i\\q<R8eY3&02oYoH";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attributes attributes2 = attributes1.put("{iq<R8eY3&02oYoH", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      String string1 = "IDLE";
      Attributes attributes3 = attributes2.add("tN+{u-]_", "IDLE");
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Attributes$Dataset$EntrySet", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Attributes attributes4 = attributes2.put(attribute0);
      attributes4.removeIgnoreCase("IDLE");
      Attributes attributes5 = attributes3.put("{iq<R8eY3&02oYoH", true);
      attributes3.hasKeyIgnoreCase("data-");
      attributes5.put("IDLE", true);
      attributes3.hasDeclaredValueForKeyIgnoreCase("IDLE");
      String string2 = "WRITING";
      attributes5.hasDeclaredValueForKey("WRITING");
      // Undeclared exception!
      try { 
        MockURI.normalize((URI) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURI", e);
      }
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("G]VAQ/x>", "G]VAQ/x>");
      Attributes attributes2 = attributes1.clone();
      attributes1.equals(attributes2);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-79);
      byteArray0[1] = (byte) (-124);
      byteArray0[2] = (byte) (-8);
      byteArray0[3] = (byte)98;
      byteArray0[4] = (byte)114;
      byteArray0[5] = (byte) (-125);
      byteArray0[6] = (byte)41;
      byteArray0[7] = (byte)0;
      byteArray0[8] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      attributes2.spliterator();
      attributes2.put("/gm9tq%ich", "data-");
      attributes2.hasKey("G]VAQ/x>");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Attributes attributes3 = attributes0.put("G]VAQ/x>", true);
      attributes3.hasKey("G]VAQ/x>");
      attributes3.hasKey("G]VAQ/x>");
      attributes2.getIgnoreCase("G]VAQ/x>");
      attributes1.hasKey("r p2\"ff/y?kP73#'4");
      attributes1.asList();
      attributes0.normalize();
      attributes2.getIgnoreCase("");
      attributes2.getIgnoreCase("Q:[-r(0Tlq6pwNs]<");
      attributes1.equals("");
      attributes0.addAll(attributes2);
      attributes0.add("RD", "Q:[-r(0Tlq6pwNs]<");
      attributes2.size();
      attributes1.html();
      attributes0.get("G]VAQ/x>");
      attributes1.putIgnoreCase("G]VAQ/x>", "Jk0V~2c}fK");
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "e(?pp{WJN:'Y2z:nt";
      Attributes attributes1 = attributes0.put("", "e(?pp{WJN:'Y2z:nt");
      Attributes attributes2 = attributes1.clone();
      attributes1.equals("");
      attributes1.equals(attributes2);
      attributes2.spliterator();
      attributes2.hasKey("e(?pp{WJN:'Y2z:nt");
      attributes2.dataset();
      Attributes attributes3 = attributes1.put("", "");
      attributes3.hasKey("");
      attributes2.getIgnoreCase("");
      attributes1.hasKey("r p2\"ff/y?kP73#'4");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      attributes0.normalize();
      attributes2.getIgnoreCase("");
      String string1 = "Q:[-r(0Tlq6pwNs]<";
      attributes2.getIgnoreCase("Q:[-r(0Tlq6pwNs]<");
      attributes1.equals("e(?pp{WJN:'Y2z:nt");
      // Undeclared exception!
      try { 
        attributes0.addAll(attributes2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.add("b=?=TthE~>Z$i", "");
      Attributes attributes1 = attributes0.put("location", true);
      attributes1.asList();
      attributes0.removeIgnoreCase("location");
      attributes1.equals(attributes0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "location");
      attributes1.addAll(attributes0);
      attributes1.hasKey("b=?=TthE~>Z$i");
      attributes0.iterator();
      attributes1.isEmpty();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attributes1.toString();
      Attribute attribute0 = new Attribute("x7jeH%&vus@ AKH2p", "x7jeH%&vus@ AKH2p", attributes0);
      // Undeclared exception!
      try { 
        Map.Entry.comparingByKey((Comparator<? super Attributes>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attributes attributes0 = new Attributes();
      attributes0.put("F\"5j)", false);
      Attributes attributes1 = attributes0.add("F\"5j)", "F\"5j)");
      attributes1.addAll(attributes0);
      attributes0.hasDeclaredValueForKeyIgnoreCase("F\"5j)");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      attributes1.html();
      Attributes attributes2 = attributes1.clone();
      String string0 = "={2W7H`b?\"J>8";
      Attributes attributes3 = attributes2.put("F\"5j)", "={2W7H`b?\"J>8");
      // Undeclared exception!
      try { 
        attributes3.get((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      String string0 = "_@Hs>iGk\"m\\P";
      attributes1.html();
      boolean boolean0 = false;
      Attributes attributes2 = attributes1.put("_@Hs>iGk\"mP", false);
      String string1 = "";
      Attributes attributes3 = attributes2.put("_@Hs>iGk\"mP", "");
      attributes0.iterator();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_@Hs>iGk\"mP";
      stringArray0[1] = "";
      stringArray0[2] = "_@Hs>iGk\"mP";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      attributes1.hasDeclaredValueForKeyIgnoreCase("/gM9TQ%ich");
      attributes2.keys = stringArray0;
      parseSettings0.normalizeTag("");
      attributes3.hasKey("org.eclipse.jetty.util.PathWatcher$PathWatchEvent");
      // Undeclared exception!
      try { 
        attributes3.deduplicate(parseSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "";
      // Undeclared exception!
      try { 
        Attribute.createFromEncoded("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test91()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("hd", "hd");
      Map.Entry.comparingByValue();
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.add("hd", "-jlj3>y");
      attributes2.spliterator();
      Map.Entry.comparingByKey();
      Attributes attributes4 = attributes3.put("", "V}D4^Z|FE5/");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      attributes3.removeIgnoreCase("W1ftp[|Kku%e;O");
      attributes4.deduplicate(parseSettings0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Attribute.shouldCollapseAttribute("W1ftp[|Kku%e;O", "V}D4^Z|FE5/", document_OutputSettings3);
      Attributes.checkNotNull("V}D4^Z|FE5/");
      attributes3.put(attribute0);
      Attributes.internalKey("");
      attributes2.put(attribute0);
      attributes4.removeIgnoreCase("3BdDcK)x");
      attributes0.asList();
      attributes1.hasDeclaredValueForKey("hd");
      attributes0.put(attribute0);
  }

  @Test(timeout = 4000)
  public void test92()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "dveH+");
      Attributes attributes2 = attributes1.clone();
      Attribute attribute0 = new Attribute("dveH+", "dveH+");
      Attributes attributes3 = attributes2.put(attribute0);
      Attributes attributes4 = attributes3.put("dveH+", true);
      Attributes attributes5 = attributes4.add("}\f{GwW5Sfk})DBC", "org.eclipse.jetty.util.thread.ExecutorSizedThreadPool");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      attributes5.html((Appendable) mockPrintWriter0, document_OutputSettings3);
  }

  @Test(timeout = 4000)
  public void test93()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.add("data-", "data-");
      Attributes attributes2 = attributes1.put("data-", "zZ}E*");
      Attribute attribute0 = new Attribute("zZ}E*", "|9]", (Attributes) null);
      Attribute attribute1 = attribute0.clone();
      Attributes attributes3 = attributes2.put(attribute1);
      Attributes attributes4 = attributes3.clone();
      Attributes attributes5 = attributes4.put("data-", false);
      attributes5.size();
      attributes5.get("x!#AHszNCn@CzB^6");
      attributes5.addAll(attributes1);
  }

  @Test(timeout = 4000)
  public void test94()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("org.eclipse.jetty.io.EofException", ",G\"Jm");
      Attribute.createFromEncoded("org.eclipse.jetty.io.EofException", "org.jsoup.nodes.Attributes$Dataset");
  }

  @Test(timeout = 4000)
  public void test95()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String string0 = "%WsRoI2}?No4uMS9fy`";
      String string1 = "";
      attributes0.normalize();
      Attributes attributes1 = attributes0.put("%WsRoI2}?No4uMS9fy`", "");
      attributes1.size();
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("%WsRoI2}?No4uMS9fy`", "%WsRoI2}?No4uMS9fy`");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // %WsRoI2}?No4uMS9fy`
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test96()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "t2DZiWP,o:'f>";
      stringArray0[1] = "t2DZiWP,o:'f>";
      stringArray0[2] = "t2DZiWP,o:'f>";
      stringArray0[3] = "t2DZiWP,o:'f>";
      stringArray0[4] = "t2DZiWP,o:'f>";
      attributes0.vals = stringArray0;
      Attribute attribute0 = new Attribute("t2DZiWP,o:'f>", "t2DZiWP,o:'f>");
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.put(attribute0);
      attributes0.hasKeyIgnoreCase("t2DZiWP,o:'f>");
      attributes1.indexOfKey("data-");
      attributes1.addAll(attributes0);
      attributes0.hasDeclaredValueForKey("data-");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.charset(charset0);
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Attributes.checkNotNull("tmy^X@KGe]cjGid");
  }

  @Test(timeout = 4000)
  public void test97()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.get("NB4+;Ek)'l");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      attributes0.asList();
      attributes0.html();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      delayQueue0.poll(1136L, timeUnit0);
      attributes0.equals((Object) null);
      attributes0.removeIgnoreCase("");
      attributes0.iterator();
      Attributes attributes1 = attributes0.put("", false);
      attributes1.iterator();
      attributes0.deduplicate((ParseSettings) null);
      Attributes attributes2 = attributes1.put("", "c|Gu0xqKPv`_Fdi(");
      attributes2.html();
      attributes2.toString();
      attributes0.hasDeclaredValueForKey("");
      attributes1.getIgnoreCase("");
      attributes2.hashCode();
      attributes1.normalize();
      assertSame(attributes0, attributes1);
  }
}
