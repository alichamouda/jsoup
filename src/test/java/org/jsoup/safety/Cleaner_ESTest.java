/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:21:11 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Safelist;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      Cleaner cleaner0 = new Cleaner(safelist0);
      // Undeclared exception!
      try { 
        cleaner0.isValidBodyHtml((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(safelist0);
      // Undeclared exception!
      try { 
        cleaner0.isValid((Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      Cleaner cleaner0 = new Cleaner(safelist0);
      // Undeclared exception!
      try { 
        cleaner0.clean((Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Cleaner cleaner0 = new Cleaner(safelist0);
      cleaner0.isValidBodyHtml("<06!");
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Cleaner cleaner0 = new Cleaner(safelist0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("PYm", "PYm");
      cleaner0.isValid(document0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Cleaner cleaner0 = new Cleaner(safelist0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("PYm", "PYm");
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      document0.selectFirst((Evaluator) evaluator_MatchText0);
      cleaner0.isValid(document0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(safelist0);
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("release", "release");
      cleaner0.clean(document0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(safelist0);
      cleaner0.isValidBodyHtml("");
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Cleaner cleaner0 = null;
      try {
        cleaner0 = new Cleaner((Safelist) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
