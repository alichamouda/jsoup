/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:10:54 GMT 2022
 */

package org.jsoup.helper;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.org.apache.xerces.internal.dom.DocumentImpl;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.helper.W3CDom;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;
import org.w3c.dom.DOMException;
import org.w3c.dom.Document;
import org.w3c.dom.NodeList;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class W3CDom_ESTest extends W3CDom_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(":U", parseSettings0);
      TextNode textNode0 = new TextNode(":U");
      Attributes attributes0 = textNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":U", attributes0);
      attributes0.put("xmlns:jksoupSource", (String) null);
      W3CDom w3CDom0 = new W3CDom();
      // Undeclared exception!
      try { 
        w3CDom0.fromJsoup((Element) formElement0);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("javax.xml.xpath.XPathFactory:jsoup", parseSettings0);
      TextNode textNode0 = new TextNode("jsoupSource");
      Attributes attributes0 = textNode0.attributes();
      Attributes attributes1 = attributes0.put("9*5Y@L\"4R+Xb)!3P('", "jsoupSource");
      FormElement formElement0 = new FormElement(tag0, "9*5Y@L\"4R+Xb)!3P('", attributes1);
      Document document0 = w3CDom0.fromJsoup((Element) formElement0);
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("javax.xml.xpath.XPathFactory:jsoup", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("xmlns", "EnFp;dy6+}W");
      FormElement formElement0 = new FormElement(tag0, "xmlns", attributes1);
      Document document0 = w3CDom0.fromJsoup((Element) formElement0);
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      org.jsoup.nodes.Document document0 = Parser.parse("javax.xml.xpath.XPathFactory:jsoup", "javax.xml.xpath.XPathFactory:jsoup");
      Document document1 = W3CDom.convert(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      w3CDom_W3CBuilder0.head((Node) null, (-1));
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      org.jsoup.nodes.Document document0 = Parser.parse("jsoupSource", "jsoupSource");
      Document document1 = w3CDom0.fromJsoup(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      Comment comment0 = new Comment("jsoupSource");
      w3CDom_W3CBuilder0.head(comment0, (-1));
      assertFalse(comment0.hasParent());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      org.jsoup.nodes.Document document0 = Parser.parseBodyFragment("javax.xml.xpath.XPathFactory:jsoup", "jsoupSource");
      DocumentImpl documentImpl0 = (DocumentImpl)W3CDom.convert(document0);
      Class<DocumentType> class0 = DocumentType.class;
      List<DocumentType> list0 = w3CDom0.sourceNodes((NodeList) documentImpl0, class0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      org.jsoup.nodes.Document document0 = Parser.parseBodyFragment("   ", "   ");
      Document document1 = w3CDom0.fromJsoup(document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      // Undeclared exception!
      try { 
        w3CDom0.selectXpath("conten", (Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<String, String> hashMap0 = W3CDom.OutputHtml();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      org.jsoup.nodes.Document document0 = Parser.parseBodyFragment("javax.xml.xpath.XPathFactory:jsoup", "javax.xml.xpath.XPathFactory:jsoup");
      Document document1 = W3CDom.convert(document0);
      W3CDom.W3CBuilder w3CDom_W3CBuilder0 = new W3CDom.W3CBuilder(document1);
      DataNode dataNode0 = new DataNode("jsoupSource");
      // Undeclared exception!
      try { 
        w3CDom_W3CBuilder0.head(dataNode0, (-180264503));
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      org.jsoup.nodes.Document document0 = Parser.parseBodyFragment("jsoupSource", "jsoupSource");
      Document document1 = w3CDom0.fromJsoup(document0);
      // Undeclared exception!
      try { 
        w3CDom0.convert(document0, document1);
        fail("Expecting exception: DOMException");
      
      } catch(DOMException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      org.jsoup.nodes.Document document0 = org.jsoup.nodes.Document.createShell("javax.xml.xpath.XPathFactory:jsoup");
      Document document1 = w3CDom0.fromJsoup(document0);
      String string0 = w3CDom0.asString(document1);
      assertEquals("<html>\n<head>\n<META http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n</head>\n<body></body>\n</html>\n", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      org.jsoup.nodes.Document document0 = org.jsoup.nodes.Document.createShell("jsoupSource");
      Elements elements0 = document0.selectXpath("*");
      assertEquals(2, elements0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = W3CDom.OutputXml();
      assertEquals(1, hashMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      W3CDom w3CDom0 = new W3CDom();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("javax.xml.xpath.XPathFactory:jsoup", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "xmlns", attributes0);
      Document document0 = w3CDom0.fromJsoup((Element) formElement0);
      HashMap<String, String> hashMap0 = W3CDom.OutputXml();
      String string0 = W3CDom.asString(document0, (Map<String, String>) hashMap0);
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><javax.xml.xpath.XPathFactory:jsoup/>", string0);
  }
}
