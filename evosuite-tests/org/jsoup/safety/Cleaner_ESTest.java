/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:40:45 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.parser.Parser;
import org.jsoup.safety.Cleaner;
import org.jsoup.safety.Safelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Cleaner_ESTest extends Cleaner_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      Cleaner cleaner0 = new Cleaner(safelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("C/Fe<b /a>`");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Cleaner cleaner0 = new Cleaner(safelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("<vV#C;");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Cleaner cleaner0 = new Cleaner(safelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("kZ/_Lgm*:B!xeR~q;");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(safelist0);
      boolean boolean0 = cleaner0.isValidBodyHtml("uQ4m<!(QV8qd~_sDVTv");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(safelist0);
      Document document0 = new Document("i]yqo&6[K");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      boolean boolean0 = cleaner0.isValid(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Cleaner cleaner0 = new Cleaner(safelist0);
      Document document0 = new Document("Queue did not match expected sequence");
      boolean boolean0 = cleaner0.isValid(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Cleaner cleaner0 = new Cleaner(safelist0);
      // Undeclared exception!
      try { 
        cleaner0.clean((Document) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      Cleaner cleaner0 = new Cleaner(safelist0);
      Document document0 = Parser.parseBodyFragment("C/Fe<b /a>`", "C/Fe<b /a>`");
      cleaner0.isValid(document0);
  }
}
