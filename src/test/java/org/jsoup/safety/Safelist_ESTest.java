/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 20:09:59 GMT 2022
 */

package org.jsoup.safety;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.safety.Safelist;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Safelist_ESTest extends Safelist_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.none();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = safelist0.removeEnforcedAttribute("PATAH", "PATAH");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("`");
      assertEquals("`", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      Safelist.AttributeKey safelist_AttributeKey1 = Safelist.AttributeKey.valueOf("&PcoF;vurv");
      assertEquals("&PcoF;vurv", safelist_AttributeKey1.toString());
      assertFalse(safelist_AttributeKey1.equals((Object)safelist_AttributeKey0));
      assertNotNull(safelist_AttributeKey1);
      assertNotSame(safelist_AttributeKey1, safelist_AttributeKey0);
      
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("*vuq^APKz|zw2:HzIK");
      assertEquals("*vuq^APKz|zw2:HzIK", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
      
      Safelist.Protocol safelist_Protocol1 = Safelist.Protocol.valueOf("`");
      assertEquals("`", safelist_Protocol1.toString());
      assertFalse(safelist_Protocol1.equals((Object)safelist_Protocol0));
      assertNotNull(safelist_Protocol1);
      assertNotSame(safelist_Protocol1, safelist_Protocol0);
      
      Attributes attributes0 = safelist2.getEnforcedAttributes("a");
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(attributes0);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      boolean boolean0 = safelist_AttributeKey0.equals(safelist_Protocol0);
      assertEquals("`", safelist_AttributeKey0.toString());
      assertEquals("*vuq^APKz|zw2:HzIK", safelist_Protocol0.toString());
      assertFalse(safelist_AttributeKey0.equals((Object)safelist_AttributeKey1));
      assertFalse(safelist_Protocol0.equals((Object)safelist_Protocol1));
      assertFalse(boolean0);
      assertNotSame(safelist_AttributeKey0, safelist_AttributeKey1);
      assertNotSame(safelist_Protocol0, safelist_Protocol1);
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean1 = safelist_AttributeKey1.equals(object0);
      assertEquals("&PcoF;vurv", safelist_AttributeKey1.toString());
      assertFalse(safelist_AttributeKey1.equals((Object)safelist_AttributeKey0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(safelist_AttributeKey1, safelist_AttributeKey0);
      
      Safelist safelist3 = Safelist.none();
      assertFalse(safelist3.equals((Object)safelist2));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist0));
      assertNotNull(safelist3);
      assertNotSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertNotSame(safelist3, safelist0);
      
      Safelist safelist4 = safelist2.removeEnforcedAttribute("MN", "table");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist2.equals((Object)safelist3));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist3));
      assertNotNull(safelist4);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist2, safelist3);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist4);
      assertNotSame(safelist4, safelist1);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist3);
      
      Safelist safelist5 = safelist2.removeEnforcedAttribute("8WGPiYb*x", "'I'&N1z)K#");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist2.equals((Object)safelist3));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist1));
      assertNotNull(safelist5);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist5);
      assertNotSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist2, safelist3);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist5);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist4);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist1);
      assertSame(safelist5, safelist4);
      assertSame(safelist5, safelist0);
      assertSame(safelist5, safelist2);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[1];
      Attribute attribute0 = new Attribute("O}{7('=3teGrydh", "strong");
      assertEquals("O}{7('=3teGrydh", attribute0.getKey());
      assertEquals("strong", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertNotNull(attribute0);
      
      String string0 = attribute0.toString();
      assertEquals("O}{7('=3teGrydh", attribute0.getKey());
      assertEquals("strong", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("O}{7(3teGrydh=\"strong\"", string0);
      assertNotNull(string0);
      
      boolean boolean0 = safelist0.isSafeAttribute("strong", (Element) null, attribute0);
      assertEquals("O}{7('=3teGrydh", attribute0.getKey());
      assertEquals("strong", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertFalse(boolean0);
      
      stringArray0[0] = "strong";
      Safelist safelist1 = safelist0.addProtocols("strong", "O}{7('=3teGrydh", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("strong", "strong", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "strong";
      Safelist safelist1 = safelist0.addProtocols("strong", "strong", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist2 = safelist1.addProtocols("strong", "strong", stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist3 = safelist2.removeAttributes("code", stringArray0);
      assertSame(safelist2, safelist3);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Safelist safelist2 = safelist1.addTags(stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist3 = safelist2.removeAttributes("blockquote", stringArray0);
      assertNotNull(safelist3);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist3);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist4 = safelist3.addAttributes("blockquote", stringArray0);
      assertNotNull(safelist4);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist4);
      assertSame(safelist1, safelist3);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist0);
      assertSame(safelist4, safelist1);
      assertSame(safelist4, safelist2);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist5 = Safelist.simpleText();
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist1));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist1);
      
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("-");
      assertEquals("-", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-";
      stringArray1[1] = "-";
      stringArray1[2] = "-";
      stringArray1[3] = "-";
      stringArray1[4] = "-";
      stringArray1[5] = "-";
      Safelist safelist6 = Safelist.basicWithImages();
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist4));
      assertFalse(safelist6.equals((Object)safelist0));
      assertFalse(safelist6.equals((Object)safelist2));
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist6.equals((Object)safelist3));
      assertNotNull(safelist6);
      assertNotSame(safelist6, safelist1);
      assertNotSame(safelist6, safelist4);
      assertNotSame(safelist6, safelist0);
      assertNotSame(safelist6, safelist2);
      assertNotSame(safelist6, safelist5);
      assertNotSame(safelist6, safelist3);
      
      stringArray1[6] = "";
      stringArray1[7] = "-";
      stringArray1[8] = "-";
      Safelist safelist7 = safelist3.removeTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist6));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(safelist1.equals((Object)safelist6));
      assertFalse(safelist1.equals((Object)safelist5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist7.equals((Object)safelist5));
      assertFalse(safelist7.equals((Object)safelist6));
      assertFalse(safelist2.equals((Object)safelist6));
      assertFalse(safelist2.equals((Object)safelist5));
      assertFalse(safelist3.equals((Object)safelist6));
      assertFalse(safelist3.equals((Object)safelist5));
      assertNotNull(safelist7);
      assertNotSame(safelist0, safelist6);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist5);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist7);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist2);
      assertNotSame(safelist1, safelist6);
      assertSame(safelist1, safelist7);
      assertNotSame(safelist1, safelist5);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist4);
      assertSame(safelist1, safelist3);
      assertNotSame(stringArray0, stringArray1);
      assertSame(safelist7, safelist1);
      assertNotSame(safelist7, safelist5);
      assertNotSame(safelist7, safelist6);
      assertSame(safelist7, safelist4);
      assertSame(safelist7, safelist0);
      assertSame(safelist7, safelist2);
      assertSame(safelist7, safelist3);
      assertNotSame(safelist2, safelist6);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist7);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist5);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertNotSame(safelist3, safelist6);
      assertSame(safelist3, safelist7);
      assertNotSame(safelist3, safelist5);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist0);
      assertEquals(1, stringArray0.length);
      
      // Undeclared exception!
      try { 
        safelist5.addTags(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      Attributes attributes0 = safelist1.getEnforcedAttributes("mYCdWBt2kX+#lA4o}");
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      assertNotNull(attributes0);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Safelist safelist2 = safelist1.addTags(stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist3 = safelist2.removeAttributes("blockquote", stringArray0);
      assertNotNull(safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist3);
      assertSame(safelist1, safelist3);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist0);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist4 = Safelist.simpleText();
      assertFalse(safelist4.equals((Object)safelist2));
      assertFalse(safelist4.equals((Object)safelist0));
      assertFalse(safelist4.equals((Object)safelist3));
      assertFalse(safelist4.equals((Object)safelist1));
      assertNotNull(safelist4);
      assertNotSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist0);
      assertNotSame(safelist4, safelist3);
      assertNotSame(safelist4, safelist1);
      
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("-");
      assertEquals("-", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-";
      stringArray1[1] = "-";
      stringArray1[2] = "-";
      stringArray1[3] = "-";
      stringArray1[4] = "-";
      stringArray1[5] = "-";
      Safelist safelist5 = Safelist.basicWithImages();
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist3));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist3);
      
      Tag tag0 = Tag.valueOf("u#[A`{:");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("u#[a`{:", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertEquals("u#[A`{:", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("u#[A`{:", tag0.toString());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Collector$FirstFinder", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("u#[a`{:", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertEquals("u#[A`{:", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("u#[A`{:", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("u#[A`{:", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("u#[A`{:", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("u#[a`{:", formElement0.normalName());
      assertNotNull(formElement0);
      
      Attribute attribute0 = Attribute.createFromEncoded("-", "-");
      assertEquals("-", attribute0.getKey());
      assertEquals("-", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertNotNull(attribute0);
      
      boolean boolean0 = safelist5.isSafeAttribute("blockquote", formElement0, attribute0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("u#[a`{:", tag0.normalName());
      assertTrue(tag0.formatAsBlock());
      assertEquals("u#[A`{:", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("u#[A`{:", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("u#[A`{:", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("u#[A`{:", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("u#[a`{:", formElement0.normalName());
      assertEquals("-", attribute0.getKey());
      assertEquals("-", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(boolean0);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist3);
      
      stringArray1[6] = "";
      stringArray1[7] = "-";
      stringArray1[8] = "-";
      // Undeclared exception!
      try { 
        safelist4.addTags(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Safelist safelist2 = safelist1.removeTags(stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist3 = safelist1.addTags(stringArray0);
      assertNotNull(safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist3);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist3);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist1);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist4 = safelist3.removeAttributes("blockquote", stringArray0);
      assertNotNull(safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist3);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist3);
      assertSame(safelist1, safelist4);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist1);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist2);
      assertSame(safelist4, safelist1);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist5 = Safelist.simpleText();
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist3));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist3);
      
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("-");
      assertEquals("-", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-";
      stringArray1[1] = "-";
      stringArray1[2] = "-";
      stringArray1[3] = "-";
      stringArray1[4] = "-";
      stringArray1[5] = "-";
      Safelist safelist6 = Safelist.basicWithImages();
      assertFalse(safelist6.equals((Object)safelist0));
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist6.equals((Object)safelist2));
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist4));
      assertFalse(safelist6.equals((Object)safelist3));
      assertNotNull(safelist6);
      assertNotSame(safelist6, safelist0);
      assertNotSame(safelist6, safelist5);
      assertNotSame(safelist6, safelist2);
      assertNotSame(safelist6, safelist1);
      assertNotSame(safelist6, safelist4);
      assertNotSame(safelist6, safelist3);
      
      Safelist.AttributeKey safelist_AttributeKey1 = Safelist.AttributeKey.valueOf("-");
      assertEquals("-", safelist_AttributeKey1.toString());
      assertTrue(safelist_AttributeKey1.equals((Object)safelist_AttributeKey0));
      assertNotNull(safelist_AttributeKey1);
      assertNotSame(safelist_AttributeKey1, safelist_AttributeKey0);
      
      stringArray1[6] = "";
      stringArray1[7] = "-";
      stringArray1[8] = "-";
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("blockquote");
      assertEquals("blockquote", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
      
      boolean boolean0 = safelist_AttributeKey0.equals(safelist_Protocol0);
      assertEquals("blockquote", safelist_Protocol0.toString());
      assertEquals("-", safelist_AttributeKey0.toString());
      assertTrue(safelist_AttributeKey0.equals((Object)safelist_AttributeKey1));
      assertFalse(boolean0);
      assertNotSame(safelist_AttributeKey0, safelist_AttributeKey1);
      
      // Undeclared exception!
      try { 
        safelist5.addTags(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.basicWithImages();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      String string0 = "ftp";
      Safelist safelist2 = Safelist.none();
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      String string1 = null;
      Document document0 = Document.createShell("col");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("col", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("col", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#document", document1.nodeName());
      assertEquals("col", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.text("dt");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("col", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.normalName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.normalName());
      assertEquals("#document", document1.nodeName());
      assertEquals("col", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.normalName());
      assertEquals("col", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Attribute attribute0 = new Attribute("col", "ftp");
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("ftp", attribute0.getValue());
      assertEquals("col", attribute0.getKey());
      assertNotNull(attribute0);
      
      // Undeclared exception!
      try { 
        safelist1.isSafeAttribute((String) null, document2, attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.relaxed();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = new Safelist(safelist0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y(*C%_K7$";
      stringArray0[1] = "y=";
      stringArray0[2] = "h2";
      stringArray0[3] = "\"A)O7p,ySf";
      stringArray0[4] = ";P-/@BSkq\";ta@s_";
      stringArray0[5] = "\"c>;T@Cq=[,Y}";
      stringArray0[6] = "H<mKkvxF";
      stringArray0[7] = "o\"";
      stringArray0[8] = "y07+}duy7X";
      Safelist safelist3 = safelist2.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist3, safelist0);
      assertNotSame(safelist3, safelist1);
      assertSame(safelist3, safelist2);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist4 = safelist2.removeEnforcedAttribute("Y(*C%_K7$", "[Nx16%F");
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist0));
      assertFalse(safelist4.equals((Object)safelist1));
      assertNotNull(safelist4);
      assertNotSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist4);
      assertSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist0);
      assertNotSame(safelist4, safelist1);
      assertSame(safelist4, safelist3);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Cookie value must not be null";
      stringArray0[1] = "Cookie value must not be null";
      stringArray0[2] = "Cookie value must not be null";
      stringArray0[3] = "Cookie value must not be null";
      stringArray0[4] = "Cookie value must not be null";
      stringArray0[5] = "Cookie value must not be null";
      stringArray0[6] = "Cookie value must not be null";
      stringArray0[7] = "Cookie value must not be null";
      stringArray0[8] = "Cookie value must not be null";
      Safelist safelist1 = safelist0.addAttributes("PUkC2C2xb", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist2 = safelist0.removeAttributes("Cookie value must not be null", stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist3 = safelist2.addEnforcedAttribute("Cookie value must not be null", "Cookie value must not be null", "Cookie value must not be null");
      assertNotNull(safelist3);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist4 = safelist3.preserveRelativeLinks(false);
      assertNotNull(safelist4);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist1);
      assertSame(safelist4, safelist2);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist1);
      assertSame(safelist4, safelist3);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist5 = safelist2.preserveRelativeLinks(true);
      assertNotNull(safelist5);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist5);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist5);
      assertSame(safelist2, safelist3);
      assertSame(safelist5, safelist0);
      assertSame(safelist5, safelist1);
      assertSame(safelist5, safelist2);
      assertSame(safelist5, safelist3);
      assertSame(safelist5, safelist4);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist6 = Safelist.none();
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist3));
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist6.equals((Object)safelist2));
      assertFalse(safelist6.equals((Object)safelist4));
      assertFalse(safelist6.equals((Object)safelist0));
      assertNotNull(safelist6);
      assertNotSame(safelist6, safelist1);
      assertNotSame(safelist6, safelist3);
      assertNotSame(safelist6, safelist5);
      assertNotSame(safelist6, safelist2);
      assertNotSame(safelist6, safelist4);
      assertNotSame(safelist6, safelist0);
      
      Safelist safelist7 = safelist2.preserveRelativeLinks(false);
      assertFalse(safelist0.equals((Object)safelist6));
      assertFalse(safelist7.equals((Object)safelist6));
      assertFalse(safelist2.equals((Object)safelist6));
      assertNotNull(safelist7);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist5);
      assertSame(safelist0, safelist7);
      assertSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist6);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist7, safelist2);
      assertSame(safelist7, safelist3);
      assertSame(safelist7, safelist5);
      assertSame(safelist7, safelist1);
      assertSame(safelist7, safelist0);
      assertNotSame(safelist7, safelist6);
      assertSame(safelist7, safelist4);
      assertNotSame(safelist2, safelist6);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist7);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist5);
      assertSame(safelist2, safelist3);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist8 = safelist7.removeEnforcedAttribute("Cookie value must not be null", ":matchesWholeText(%s)");
      assertFalse(safelist0.equals((Object)safelist6));
      assertFalse(safelist7.equals((Object)safelist6));
      assertFalse(safelist8.equals((Object)safelist6));
      assertFalse(safelist2.equals((Object)safelist6));
      assertNotNull(safelist8);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist5);
      assertSame(safelist0, safelist7);
      assertSame(safelist0, safelist8);
      assertSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist6);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist7, safelist2);
      assertSame(safelist7, safelist8);
      assertSame(safelist7, safelist3);
      assertSame(safelist7, safelist5);
      assertSame(safelist7, safelist1);
      assertSame(safelist7, safelist0);
      assertNotSame(safelist7, safelist6);
      assertSame(safelist7, safelist4);
      assertNotSame(safelist8, safelist6);
      assertSame(safelist8, safelist4);
      assertSame(safelist8, safelist3);
      assertSame(safelist8, safelist1);
      assertSame(safelist8, safelist7);
      assertSame(safelist8, safelist5);
      assertSame(safelist8, safelist0);
      assertSame(safelist8, safelist2);
      assertNotSame(safelist2, safelist6);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist7);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist5);
      assertSame(safelist2, safelist8);
      assertSame(safelist2, safelist3);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist9 = Safelist.basicWithImages();
      assertFalse(safelist9.equals((Object)safelist6));
      assertFalse(safelist9.equals((Object)safelist7));
      assertFalse(safelist9.equals((Object)safelist8));
      assertFalse(safelist9.equals((Object)safelist2));
      assertFalse(safelist9.equals((Object)safelist1));
      assertFalse(safelist9.equals((Object)safelist3));
      assertFalse(safelist9.equals((Object)safelist5));
      assertFalse(safelist9.equals((Object)safelist4));
      assertFalse(safelist9.equals((Object)safelist0));
      assertNotNull(safelist9);
      assertNotSame(safelist9, safelist6);
      assertNotSame(safelist9, safelist7);
      assertNotSame(safelist9, safelist8);
      assertNotSame(safelist9, safelist2);
      assertNotSame(safelist9, safelist1);
      assertNotSame(safelist9, safelist3);
      assertNotSame(safelist9, safelist5);
      assertNotSame(safelist9, safelist4);
      assertNotSame(safelist9, safelist0);
      
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("d[\"/B%t/M$<");
      assertEquals("d[\"/B%t/M$<", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      boolean boolean0 = safelist_AttributeKey0.equals((Object) null);
      assertEquals("d[\"/B%t/M$<", safelist_AttributeKey0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Safelist safelist2 = safelist1.addTags(stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist3 = safelist2.removeAttributes("blockquote", stringArray0);
      assertNotNull(safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist3);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist1);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist4 = Safelist.simpleText();
      assertFalse(safelist4.equals((Object)safelist0));
      assertFalse(safelist4.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist2));
      assertFalse(safelist4.equals((Object)safelist3));
      assertNotNull(safelist4);
      assertNotSame(safelist4, safelist0);
      assertNotSame(safelist4, safelist1);
      assertNotSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist3);
      
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf("-");
      assertEquals("-", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      String[] stringArray1 = new String[9];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-";
      stringArray1[1] = "-";
      stringArray1[2] = "-";
      stringArray1[3] = "-";
      stringArray1[4] = "-";
      stringArray1[5] = "-";
      Safelist safelist5 = Safelist.basicWithImages();
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist1));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist1);
      
      stringArray1[6] = "";
      stringArray1[7] = "-";
      stringArray1[8] = "-";
      // Undeclared exception!
      try { 
        safelist4.addTags(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      Safelist safelist1 = new Safelist(safelist0);
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      
      boolean boolean0 = safelist1.isSafeTag("ol");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(boolean0);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = Safelist.relaxed();
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist1);
      assertNotSame(safelist2, safelist0);
      
      Safelist safelist3 = Safelist.relaxed();
      assertFalse(safelist3.equals((Object)safelist2));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertNotSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist0);
      assertNotSame(safelist3, safelist1);
      
      String[] stringArray0 = new String[0];
      Safelist safelist4 = safelist3.addEnforcedAttribute("ol", "ol", "ol");
      assertFalse(safelist3.equals((Object)safelist2));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist2));
      assertFalse(safelist4.equals((Object)safelist0));
      assertNotNull(safelist4);
      assertNotSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist0);
      assertSame(safelist3, safelist4);
      assertNotSame(safelist3, safelist1);
      assertNotSame(safelist4, safelist1);
      assertNotSame(safelist4, safelist2);
      assertSame(safelist4, safelist3);
      assertNotSame(safelist4, safelist0);
      
      boolean boolean1 = safelist3.isSafeTag("ol");
      assertFalse(safelist3.equals((Object)safelist2));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist0);
      assertSame(safelist3, safelist4);
      assertNotSame(safelist3, safelist1);
      
      // Undeclared exception!
      try { 
        safelist1.removeAttributes("ol", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.none();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = safelist1.addEnforcedAttribute("2Re+_R", "%s@%x[%s]", "X3VZ?<j;^-ARw");
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      assertNotSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertNotSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist1.removeAttributes("AfterDoctypePublicKeyword", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pD";
      Safelist safelist1 = safelist0.addTags(stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist2 = Safelist.basicWithImages();
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        safelist2.addAttributes("pre", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "pD";
      Safelist safelist1 = safelist0.addTags(stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(1, stringArray0.length);
      
      String[] stringArray1 = new String[0];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      // Undeclared exception!
      try { 
        safelist1.addAttributes("pre", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No attribute names supplied.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.none();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Document document0 = Parser.parseBodyFragment("0oy#", "]");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("]", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.normalName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.normalName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("]", document0.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("]", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("#root", document1.normalName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.normalName());
      assertEquals("]", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      // Undeclared exception!
      try { 
        safelist1.isSafeAttribute("]", document2, (Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "[Nx16%F";
      stringArray0[1] = "[Nx16%F";
      stringArray0[2] = "[Nx16%F";
      Safelist safelist1 = safelist0.removeAttributes("[Nx16%F", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(3, stringArray0.length);
      
      Safelist safelist2 = safelist1.addEnforcedAttribute("[Nx16%F", "@[@cS |[e8<FVFFX$", "[Nx16%F");
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(3, stringArray0.length);
      
      boolean boolean0 = safelist0.isSafeTag("");
      assertFalse(boolean0);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "strong";
      Safelist safelist1 = safelist0.addProtocols("strong", "O}{7('=3veGrydh", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Safelist safelist0 = null;
      try {
        safelist0 = new Safelist((Safelist) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.safety.Safelist", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "<FpIPTswmjRKJyy";
      stringArray0[1] = "br";
      stringArray0[2] = "Ev/G|]";
      stringArray0[3] = "~7X:$-0:0";
      stringArray0[4] = "";
      stringArray0[5] = "b0ZI$?";
      stringArray0[6] = "";
      stringArray0[7] = "o";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("");
      assertEquals("", safelist_AttributeValue0.toString());
      assertNotNull(safelist_AttributeValue0);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      // Undeclared exception!
      try { 
        safelist0.addProtocols("", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.basicWithImages();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = Safelist.simpleText();
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        safelist0.getEnforcedAttributes((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Document document0 = Parser.parse("hidden", "[BO4q");
      assertFalse(document0.hasParent());
      assertEquals("[BO4q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertEquals("[BO4q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("[BO4q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document1.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("[BO4q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("[BO4q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("[BO4q", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.normalName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = document2.shallowClone();
      assertFalse(document0.hasParent());
      assertEquals("[BO4q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("[BO4q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("[BO4q", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.normalName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("[BO4q", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.normalName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Element element0 = document3.body();
      assertFalse(document0.hasParent());
      assertEquals("[BO4q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("[BO4q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("[BO4q", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.normalName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("[BO4q", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.normalName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.normalName());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Attribute attribute0 = new Attribute("org.eclipse.jetty.util.InetAddressSet$InetPattern", "org.eclipse.jetty.util.InetAddressSet$InetPattern");
      assertEquals("org.eclipse.jetty.util.InetAddressSet$InetPattern", attribute0.getValue());
      assertEquals("org.eclipse.jetty.util.InetAddressSet$InetPattern", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      assertNotNull(attribute0);
      
      boolean boolean0 = safelist0.isSafeAttribute("org.eclipse.jetty.util.InetAddressSet$InetPattern", element0, attribute0);
      assertFalse(document0.hasParent());
      assertEquals("[BO4q", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.normalName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("[BO4q", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.normalName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("[BO4q", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document2.normalName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("[BO4q", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.normalName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.normalName());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.eclipse.jetty.util.InetAddressSet$InetPattern", attribute0.getValue());
      assertEquals("org.eclipse.jetty.util.InetAddressSet$InetPattern", attribute0.getKey());
      assertTrue(attribute0.hasDeclaredValue());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.basicWithImages();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = Safelist.simpleText();
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist1);
      assertNotSame(safelist2, safelist0);
      
      String string0 = "";
      Attributes attributes0 = safelist2.getEnforcedAttributes("");
      assertTrue(attributes0.isEmpty());
      assertEquals(0, attributes0.size());
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(attributes0);
      assertNotSame(safelist2, safelist1);
      assertNotSame(safelist2, safelist0);
      
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        safelist2.addAttributes("", (String[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Tag tag0 = Tag.valueOf("$I*EMpq");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("$i*empq", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertEquals("$I*EMpq", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("$I*EMpq", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$I*EMpq", (Attributes) null);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("$i*empq", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertEquals("$I*EMpq", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("$I*EMpq", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("$i*empq", pseudoTextElement0.normalName());
      assertEquals("$I*EMpq", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("$I*EMpq", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertNotNull(pseudoTextElement0);
      
      Attribute attribute0 = new Attribute(" -ZhkC{4", " -ZhkC{4", (Attributes) null);
      assertEquals(" -ZhkC{4", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-ZhkC{4", attribute0.getKey());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertEquals(" -ZhkC{4", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-ZhkC{4", attribute0.getKey());
      assertEquals(" -ZhkC{4", attribute1.getValue());
      assertTrue(attribute1.hasDeclaredValue());
      assertEquals("-ZhkC{4", attribute1.getKey());
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      boolean boolean0 = safelist0.isSafeAttribute(" -ZhkC{4", pseudoTextElement0, attribute1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("$i*empq", tag0.normalName());
      assertFalse(tag0.isFormListed());
      assertEquals("$I*EMpq", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("$I*EMpq", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("$i*empq", pseudoTextElement0.normalName());
      assertEquals("$I*EMpq", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("$I*EMpq", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(" -ZhkC{4", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertEquals("-ZhkC{4", attribute0.getKey());
      assertEquals(" -ZhkC{4", attribute1.getValue());
      assertTrue(attribute1.hasDeclaredValue());
      assertEquals("-ZhkC{4", attribute1.getKey());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertFalse(boolean0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Safelist.Protocol safelist_Protocol0 = Safelist.Protocol.valueOf("");
      assertEquals("", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "\t";
      stringArray0[1] = "M8.+u:)TE$c";
      stringArray0[2] = "l";
      Safelist safelist1 = Safelist.basicWithImages();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("\t", "URL must not be null", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("+G<=");
      assertEquals("+G<=", safelist_AttributeValue0.toString());
      assertNotNull(safelist_AttributeValue0);
      
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("@oM!%");
      assertEquals("@oM!%", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      Safelist.TagName safelist_TagName0 = Safelist.TagName.valueOf("QNfSc4");
      assertEquals("QNfSc4", safelist_TagName0.toString());
      assertNotNull(safelist_TagName0);
      
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@oM!%";
      Safelist safelist2 = safelist0.removeAttributes("QNfSc4", stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist0);
      assertEquals(1, stringArray0.length);
      
      Safelist safelist3 = Safelist.basic();
      assertFalse(safelist3.equals((Object)safelist2));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist0));
      assertNotNull(safelist3);
      assertNotSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertNotSame(safelist3, safelist0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = Safelist.TagName.valueOf("h5");
      assertEquals("h5", safelist_TagName0.toString());
      assertNotNull(safelist_TagName0);
      
      String string0 = safelist_TagName0.toString();
      assertEquals("h5", safelist_TagName0.toString());
      assertEquals("h5", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = Safelist.TagName.valueOf("");
      assertEquals("", safelist_TagName0.toString());
      assertNotNull(safelist_TagName0);
      
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("");
      assertEquals("", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
      
      boolean boolean0 = safelist_TagName0.equals(safelist_Protocol0);
      assertEquals("", safelist_TagName0.toString());
      assertEquals("", safelist_Protocol0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Safelist.AttributeValue safelist_AttributeValue0 = new Safelist.AttributeValue("");
      assertEquals("", safelist_AttributeValue0.toString());
      assertNotNull(safelist_AttributeValue0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        Safelist.TagName.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      assertNotNull(safelist0);
      
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("#rHPo)uYkC!~$?");
      assertEquals("#rHPo)uYkC!~$?", safelist_AttributeValue0.toString());
      assertNotNull(safelist_AttributeValue0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "9sz@zw";
      stringArray0[1] = "9sz@zw";
      stringArray0[2] = "9sz@zw";
      stringArray0[3] = "9sz@zw";
      stringArray0[4] = "9sz@zw";
      Safelist safelist1 = safelist0.addAttributes("9sz@zw", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(5, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "uR-<UKY9";
      stringArray0[1] = "";
      stringArray0[2] = " ms";
      // Undeclared exception!
      try { 
        safelist0.addTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[0];
      String string0 = ", URL=[";
      Safelist safelist1 = safelist0.removeEnforcedAttribute(", URL=[", ", URL=[");
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String string1 = "";
      Attributes attributes0 = safelist0.getEnforcedAttributes("");
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      assertNotNull(attributes0);
      assertSame(safelist0, safelist1);
      
      Safelist safelist2 = Safelist.basicWithImages();
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      Safelist safelist3 = safelist2.removeTags(stringArray0);
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist0));
      assertNotNull(safelist3);
      assertNotSame(safelist2, safelist0);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertNotSame(safelist3, safelist0);
      assertEquals(0, stringArray0.length);
      
      boolean boolean0 = safelist3.isSafeTag(", URL=[");
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(boolean0);
      assertNotSame(safelist2, safelist0);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertNotSame(safelist3, safelist0);
      assertEquals(0, stringArray0.length);
      
      Safelist safelist4 = safelist0.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist4.equals((Object)safelist2));
      assertFalse(safelist4.equals((Object)safelist3));
      assertNotNull(safelist4);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertNotSame(safelist4, safelist2);
      assertSame(safelist4, safelist1);
      assertNotSame(safelist4, safelist3);
      assertSame(safelist4, safelist0);
      assertEquals(0, stringArray0.length);
      
      Safelist safelist5 = Safelist.none();
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist1));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist1);
      
      String string2 = "";
      // Undeclared exception!
      try { 
        safelist4.removeProtocols("", "", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.basicWithImages();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = safelist1.preserveRelativeLinks(false);
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      assertNotSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertNotSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      
      // Undeclared exception!
      try { 
        safelist1.isSafeTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(true);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "strong";
      stringArray0[1] = "strong";
      // Undeclared exception!
      try { 
        safelist0.removeProtocols("strong", "strong", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Safelist.TagName safelist_TagName0 = new Safelist.TagName(");4O");
      assertEquals(");4O", safelist_TagName0.toString());
      assertNotNull(safelist_TagName0);
      
      Safelist safelist0 = Safelist.simpleText();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = ");4O";
      stringArray0[1] = ");4O";
      stringArray0[2] = ");4O";
      stringArray0[3] = ");4O";
      stringArray0[4] = ");4O";
      stringArray0[5] = ");4O";
      stringArray0[6] = ");4O";
      Safelist safelist1 = safelist0.removeTags(stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Attributes attributes0 = safelist0.getEnforcedAttributes(">+HK%J:");
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      assertNotNull(attributes0);
      
      Attributes attributes1 = safelist0.getEnforcedAttributes(">+HK%J:");
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.isEmpty());
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertNotSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Safelist.AttributeKey safelist_AttributeKey0 = Safelist.AttributeKey.valueOf(".`z&Zh@2vx.9");
      assertNotNull(safelist_AttributeKey0);
      
      Safelist.AttributeKey safelist_AttributeKey1 = new Safelist.AttributeKey("[snq:bTqb%WXC#G!q)F");
      assertEquals("[snq:bTqb%WXC#G!q)F", safelist_AttributeKey1.toString());
      assertFalse(safelist_AttributeKey1.equals((Object)safelist_AttributeKey0));
      assertNotNull(safelist_AttributeKey1);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.removeEnforcedAttribute("B0t*&;Jk{mNqyCLX~", "B0t*&;Jk{mNqyCLX~");
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "B0t*&;Jk{mNqyCLX~";
      stringArray0[1] = "B0t*&;Jk{mNqyCLX~";
      stringArray0[2] = "B0t*&;Jk{mNqyCLX~";
      stringArray0[3] = "B0t*&;Jk{mNqyCLX~";
      stringArray0[4] = "B0t*&;Jk{mNqyCLX~";
      stringArray0[5] = "B0t*&;Jk{mNqyCLX~";
      Safelist safelist2 = safelist1.addTags(stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist0);
      assertEquals(6, stringArray0.length);
      
      String[] stringArray1 = new String[4];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "?+7q))+/a/C_";
      boolean boolean0 = safelist1.isSafeTag("B0t*&;Jk{mNqyCLX~");
      assertTrue(boolean0);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      
      stringArray1[1] = "T>YR,dB*J&s_vj'A";
      Safelist safelist3 = Safelist.relaxed();
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist2));
      assertFalse(safelist3.equals((Object)safelist0));
      assertNotNull(safelist3);
      assertNotSame(safelist3, safelist1);
      assertNotSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist0);
      
      stringArray1[2] = "";
      stringArray1[3] = "aE6{WJ";
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      Safelist safelist1 = new Safelist(safelist0);
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      
      String string0 = "";
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      boolean boolean0 = safelist0.isSafeTag("co%KN/x^,~S`rgi");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      Safelist safelist1 = new Safelist(safelist0);
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      
      String string0 = "jGoNCn-~F";
      Safelist safelist2 = safelist1.removeEnforcedAttribute("Pd>#", "jGoNCn-~F");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist1);
      assertNotSame(safelist2, safelist0);
      
      String string1 = ", rOps=";
      String string2 = ")o9j&yvo`Qi2<(";
      // Undeclared exception!
      try { 
        Parser.parseBodyFragment((String) null, ")o9j&yvo`Qi2<(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JLh{RE";
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      Safelist safelist2 = Safelist.basicWithImages();
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      
      // Undeclared exception!
      try { 
        safelist1.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        safelist0.removeTags(stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      assertNotNull(safelist0);
      
      Safelist safelist1 = new Safelist(safelist0);
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "^L*rmUDYR";
      Safelist safelist2 = safelist1.removeAttributes("^L*rmUDYR", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist1, safelist2);
      assertNotSame(safelist1, safelist0);
      assertSame(safelist2, safelist1);
      assertNotSame(safelist2, safelist0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      Safelist safelist1 = new Safelist(safelist0);
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      
      // Undeclared exception!
      try { 
        safelist0.addEnforcedAttribute("z\"Wzw]V[3oPj+", "z\"Wzw]V[3oPj+", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      // Undeclared exception!
      try { 
        safelist0.removeEnforcedAttribute("tr", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Safelist safelist0 = Safelist.basicWithImages();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "fillInterested {}";
      stringArray0[1] = "fillInterested {}";
      stringArray0[2] = "fillInterested {}";
      stringArray0[3] = "fillInterested {}";
      stringArray0[4] = "fillInterested {}";
      String[] stringArray1 = new String[7];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "fillInterested {}";
      stringArray1[1] = "#";
      stringArray1[2] = "fillInterested {}";
      stringArray1[3] = "fillInterested {}";
      stringArray1[4] = "D#FF,wa5by{";
      stringArray1[5] = "fillInterested {}";
      stringArray1[6] = "fillInterested {}";
      Safelist safelist1 = safelist0.addAttributes("fillInterested {}", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertNotSame(stringArray1, stringArray0);
      assertSame(safelist1, safelist0);
      assertEquals(7, stringArray1.length);
      
      stringArray0[5] = "fillInterested {}";
      Safelist safelist2 = safelist0.addAttributes("fillInterested {}", stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      
      Safelist safelist3 = safelist0.addEnforcedAttribute("fillInterested {}", "}egB0(", "fillInterested {}");
      assertNotNull(safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist0);
      
      Attributes attributes0 = safelist2.getEnforcedAttributes("fillInterested {}");
      assertEquals(1, attributes0.size());
      assertFalse(attributes0.isEmpty());
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertNotNull(attributes0);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertNotSame(stringArray0, stringArray1);
      assertEquals(6, stringArray0.length);
      
      Attributes attributes1 = safelist2.getEnforcedAttributes("fillInterested {}");
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.isEmpty());
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(attributes1, attributes0);
      assertEquals(6, stringArray0.length);
      
      Safelist safelist4 = Safelist.none();
      assertFalse(safelist4.equals((Object)safelist3));
      assertFalse(safelist4.equals((Object)safelist0));
      assertFalse(safelist4.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist2));
      assertNotNull(safelist4);
      assertNotSame(safelist4, safelist3);
      assertNotSame(safelist4, safelist0);
      assertNotSame(safelist4, safelist1);
      assertNotSame(safelist4, safelist2);
      
      Safelist safelist5 = safelist2.preserveRelativeLinks(false);
      assertFalse(safelist0.equals((Object)safelist4));
      assertFalse(safelist2.equals((Object)safelist4));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist5.equals((Object)safelist4));
      assertNotNull(safelist5);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist5);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertSame(safelist2, safelist5);
      assertNotSame(safelist2, safelist4);
      assertSame(safelist2, safelist3);
      assertNotSame(stringArray0, stringArray1);
      assertSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist4);
      assertSame(safelist5, safelist3);
      assertSame(safelist5, safelist2);
      assertSame(safelist5, safelist0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      assertNotNull(safelist0);
      
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "4";
      stringArray0[1] = "small";
      Safelist safelist2 = safelist1.removeAttributes("small", stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(2, stringArray0.length);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "blockquote";
      Safelist safelist3 = safelist0.removeAttributes("blockquote", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(safelist3);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertNotSame(stringArray1, stringArray0);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist4 = safelist3.addAttributes("blockquote", stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(safelist4);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertNotSame(stringArray1, stringArray0);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist4);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist2);
      assertSame(safelist4, safelist1);
      assertSame(safelist4, safelist3);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist5 = Safelist.simpleText();
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist4));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist4);
      
      Safelist.AttributeKey safelist_AttributeKey0 = new Safelist.AttributeKey("blockquote");
      assertEquals("blockquote", safelist_AttributeKey0.toString());
      assertNotNull(safelist_AttributeKey0);
      
      String[] stringArray2 = new String[9];
      assertFalse(stringArray2.equals((Object)stringArray1));
      assertFalse(stringArray2.equals((Object)stringArray0));
      
      stringArray2[0] = "-";
      stringArray2[1] = "-";
      stringArray2[2] = "-";
      stringArray2[3] = "-";
      stringArray2[4] = "-";
      stringArray2[5] = "-";
      Safelist safelist6 = Safelist.basicWithImages();
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist4));
      assertFalse(safelist6.equals((Object)safelist2));
      assertFalse(safelist6.equals((Object)safelist0));
      assertFalse(safelist6.equals((Object)safelist3));
      assertFalse(safelist6.equals((Object)safelist5));
      assertNotNull(safelist6);
      assertNotSame(safelist6, safelist1);
      assertNotSame(safelist6, safelist4);
      assertNotSame(safelist6, safelist2);
      assertNotSame(safelist6, safelist0);
      assertNotSame(safelist6, safelist3);
      assertNotSame(safelist6, safelist5);
      
      Safelist safelist7 = Safelist.none();
      assertFalse(safelist7.equals((Object)safelist5));
      assertFalse(safelist7.equals((Object)safelist6));
      assertFalse(safelist7.equals((Object)safelist3));
      assertFalse(safelist7.equals((Object)safelist2));
      assertFalse(safelist7.equals((Object)safelist0));
      assertFalse(safelist7.equals((Object)safelist4));
      assertFalse(safelist7.equals((Object)safelist1));
      assertNotNull(safelist7);
      assertNotSame(safelist7, safelist5);
      assertNotSame(safelist7, safelist6);
      assertNotSame(safelist7, safelist3);
      assertNotSame(safelist7, safelist2);
      assertNotSame(safelist7, safelist0);
      assertNotSame(safelist7, safelist4);
      assertNotSame(safelist7, safelist1);
      
      stringArray2[6] = "";
      stringArray2[7] = "-";
      stringArray2[8] = "-";
      Safelist safelist8 = safelist3.removeTags(stringArray1);
      assertFalse(safelist0.equals((Object)safelist6));
      assertFalse(safelist0.equals((Object)safelist7));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(stringArray1.equals((Object)stringArray2));
      assertFalse(safelist8.equals((Object)safelist6));
      assertFalse(safelist8.equals((Object)safelist7));
      assertFalse(safelist8.equals((Object)safelist5));
      assertFalse(safelist3.equals((Object)safelist6));
      assertFalse(safelist3.equals((Object)safelist7));
      assertFalse(safelist3.equals((Object)safelist5));
      assertNotNull(safelist8);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist6);
      assertNotSame(safelist0, safelist7);
      assertNotSame(safelist0, safelist5);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist8);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(stringArray1, stringArray2);
      assertSame(safelist8, safelist1);
      assertNotSame(safelist8, safelist6);
      assertSame(safelist8, safelist3);
      assertSame(safelist8, safelist2);
      assertSame(safelist8, safelist0);
      assertNotSame(safelist8, safelist7);
      assertNotSame(safelist8, safelist5);
      assertSame(safelist8, safelist4);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist6);
      assertNotSame(safelist3, safelist7);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist8);
      assertNotSame(safelist3, safelist5);
      assertEquals(1, stringArray1.length);
      
      // Undeclared exception!
      try { 
        safelist5.addTags(stringArray2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "61E&:c";
      stringArray0[1] = ".z";
      stringArray0[2] = "61E&:c";
      stringArray0[3] = "61E&:c";
      stringArray0[4] = "61E&:c";
      stringArray0[5] = "61E&:c";
      stringArray0[6] = "61E&:c";
      stringArray0[7] = "61E&:c";
      stringArray0[8] = "61E&:c";
      Safelist safelist1 = safelist0.addAttributes("61E&:c", stringArray0);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist2 = safelist1.addTags(stringArray0);
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(9, stringArray0.length);
      
      Attributes attributes0 = safelist2.getEnforcedAttributes("61E&:c");
      assertEquals(0, attributes0.size());
      assertTrue(attributes0.isEmpty());
      assertNotNull(attributes0);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      assertSame(safelist1, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist1);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist3 = safelist0.preserveRelativeLinks(false);
      assertNotNull(safelist3);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist1);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist2);
      
      Safelist.AttributeValue safelist_AttributeValue0 = Safelist.AttributeValue.valueOf("b");
      assertEquals("b", safelist_AttributeValue0.toString());
      assertNotNull(safelist_AttributeValue0);
      
      Safelist.AttributeValue safelist_AttributeValue1 = Safelist.AttributeValue.valueOf("61E&:c");
      assertEquals("61E&:c", safelist_AttributeValue1.toString());
      assertFalse(safelist_AttributeValue1.equals((Object)safelist_AttributeValue0));
      assertNotNull(safelist_AttributeValue1);
      assertNotSame(safelist_AttributeValue1, safelist_AttributeValue0);
      
      Safelist.AttributeValue safelist_AttributeValue2 = new Safelist.AttributeValue("61E&:c");
      assertEquals("61E&:c", safelist_AttributeValue2.toString());
      assertTrue(safelist_AttributeValue2.equals((Object)safelist_AttributeValue1));
      assertFalse(safelist_AttributeValue2.equals((Object)safelist_AttributeValue0));
      assertNotNull(safelist_AttributeValue2);
      
      boolean boolean0 = safelist_AttributeValue0.equals(safelist_AttributeValue2);
      assertEquals("61E&:c", safelist_AttributeValue2.toString());
      assertEquals("b", safelist_AttributeValue0.toString());
      assertTrue(safelist_AttributeValue2.equals((Object)safelist_AttributeValue1));
      assertFalse(safelist_AttributeValue2.equals((Object)safelist_AttributeValue0));
      assertFalse(safelist_AttributeValue0.equals((Object)safelist_AttributeValue2));
      assertFalse(safelist_AttributeValue0.equals((Object)safelist_AttributeValue1));
      assertFalse(boolean0);
      assertNotSame(safelist_AttributeValue2, safelist_AttributeValue1);
      assertNotSame(safelist_AttributeValue2, safelist_AttributeValue0);
      assertNotSame(safelist_AttributeValue0, safelist_AttributeValue2);
      assertNotSame(safelist_AttributeValue0, safelist_AttributeValue1);
      
      Safelist safelist4 = safelist3.removeAttributes("61E&:c", stringArray0);
      assertNotNull(safelist4);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist1);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist1);
      assertSame(safelist4, safelist2);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist2);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist5 = safelist4.preserveRelativeLinks(false);
      assertNotNull(safelist5);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist5);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist5);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist1);
      assertSame(safelist4, safelist2);
      assertSame(safelist5, safelist2);
      assertSame(safelist5, safelist1);
      assertSame(safelist5, safelist4);
      assertSame(safelist5, safelist3);
      assertSame(safelist5, safelist0);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist5);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist2);
      assertEquals(9, stringArray0.length);
      
      boolean boolean1 = safelist_AttributeValue2.equals(".z");
      assertEquals("61E&:c", safelist_AttributeValue2.toString());
      assertTrue(safelist_AttributeValue2.equals((Object)safelist_AttributeValue1));
      assertFalse(safelist_AttributeValue2.equals((Object)safelist_AttributeValue0));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(safelist_AttributeValue2, safelist_AttributeValue1);
      assertNotSame(safelist_AttributeValue2, safelist_AttributeValue0);
      
      boolean boolean2 = safelist3.isSafeTag("B,weNs47IC?6v");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist1);
      assertSame(safelist0, safelist5);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist5);
      assertSame(safelist3, safelist1);
      assertSame(safelist3, safelist4);
      assertSame(safelist3, safelist2);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.relaxed();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = new Safelist(safelist0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y(*C%_K7$";
      stringArray0[1] = "y=";
      stringArray0[2] = "h2";
      stringArray0[3] = "\"A)O7p,ySf";
      stringArray0[4] = "y=";
      stringArray0[5] = "\"c>;T@Cq=[,Y}";
      stringArray0[6] = "H<mKkvxF";
      stringArray0[7] = "o\"";
      stringArray0[8] = "y07+}duy7X";
      Safelist safelist3 = safelist2.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist4 = safelist2.removeEnforcedAttribute("Y(*C%_K7$", "[Nx16%F");
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist4.equals((Object)safelist0));
      assertFalse(safelist4.equals((Object)safelist1));
      assertNotNull(safelist4);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist4);
      assertNotSame(safelist2, safelist0);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist0);
      assertNotSame(safelist4, safelist1);
      
      Safelist safelist5 = Safelist.simpleText();
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist1));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Safelist safelist0 = Safelist.none();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.relaxed();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      Safelist safelist2 = new Safelist(safelist0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertNotNull(safelist2);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Y(*C%_K7$";
      stringArray0[1] = "y=";
      stringArray0[2] = "h2";
      stringArray0[3] = "\"A)O7p,ySf";
      stringArray0[4] = ";P-/@BSkq\";ta@s_";
      stringArray0[5] = "\"c>;T@Cq=[,Y}";
      stringArray0[6] = "H<mKkvxF";
      stringArray0[7] = "o\"";
      stringArray0[8] = "y07+}duy7X";
      Safelist safelist3 = safelist2.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist0));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertEquals(9, stringArray0.length);
      
      Safelist safelist4 = Safelist.relaxed();
      assertFalse(safelist4.equals((Object)safelist3));
      assertFalse(safelist4.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist2));
      assertFalse(safelist4.equals((Object)safelist0));
      assertNotNull(safelist4);
      assertNotSame(safelist4, safelist3);
      assertNotSame(safelist4, safelist1);
      assertNotSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist0);
      
      Safelist safelist5 = safelist2.removeEnforcedAttribute("Y(*C%_K7$", "[Nx16%F");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist4));
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist2.equals((Object)safelist4));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist1));
      assertNotNull(safelist5);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist5);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist2, safelist4);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist2, safelist5);
      assertNotSame(safelist2, safelist0);
      assertNotSame(safelist5, safelist0);
      assertSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist4);
      assertSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist1);
      
      Safelist safelist6 = safelist1.removeTags(stringArray0);
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist6.equals((Object)safelist4));
      assertFalse(safelist6.equals((Object)safelist3));
      assertFalse(safelist6.equals((Object)safelist0));
      assertFalse(safelist6.equals((Object)safelist2));
      assertFalse(safelist1.equals((Object)safelist2));
      assertFalse(safelist1.equals((Object)safelist3));
      assertFalse(safelist1.equals((Object)safelist5));
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(safelist1.equals((Object)safelist4));
      assertNotNull(safelist6);
      assertNotSame(safelist6, safelist5);
      assertSame(safelist6, safelist1);
      assertNotSame(safelist6, safelist4);
      assertNotSame(safelist6, safelist3);
      assertNotSame(safelist6, safelist0);
      assertNotSame(safelist6, safelist2);
      assertNotSame(safelist1, safelist2);
      assertNotSame(safelist1, safelist3);
      assertSame(safelist1, safelist6);
      assertNotSame(safelist1, safelist5);
      assertNotSame(safelist1, safelist0);
      assertNotSame(safelist1, safelist4);
      assertEquals(9, stringArray0.length);
      
      boolean boolean0 = safelist2.isSafeTag("h2");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist4));
      assertFalse(safelist0.equals((Object)safelist3));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(safelist0.equals((Object)safelist6));
      assertFalse(safelist0.equals((Object)safelist2));
      assertFalse(safelist2.equals((Object)safelist4));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist6));
      assertFalse(safelist2.equals((Object)safelist0));
      assertTrue(boolean0);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist5);
      assertNotSame(safelist0, safelist6);
      assertNotSame(safelist0, safelist2);
      assertNotSame(safelist2, safelist4);
      assertNotSame(safelist2, safelist1);
      assertNotSame(safelist2, safelist6);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist0);
      assertSame(safelist2, safelist5);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.simpleText();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      boolean boolean0 = safelist1.isSafeTag("-_Nt2L\"l\u0005Rt");
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(boolean0);
      assertNotSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-_Nt2L\"l\u0005Rt";
      stringArray0[1] = "-_Nt2L\"l\u0005Rt";
      stringArray0[2] = "-_Nt2L\"l\u0005Rt";
      stringArray0[3] = "-_Nt2L\"l\u0005Rt";
      stringArray0[4] = "1.0";
      stringArray0[5] = "-_Nt2L\"l\u0005Rt";
      stringArray0[6] = "-_Nt2L\"l\u0005Rt";
      stringArray0[7] = "-_Nt2L\"l\u0005Rt";
      Safelist safelist2 = safelist0.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist3 = safelist2.preserveRelativeLinks(true);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist2, safelist3);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist3, safelist1);
      assertSame(safelist3, safelist0);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist4 = safelist0.removeEnforcedAttribute("FS", "org.eclipse.jetty.io.NegotiatingClientConnection");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist1));
      assertNotNull(safelist4);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist4, safelist2);
      assertSame(safelist4, safelist0);
      assertNotSame(safelist4, safelist1);
      assertSame(safelist4, safelist3);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-_Nt2L\"l\u0005Rt";
      Safelist safelist5 = safelist0.addProtocols("-_Nt2L\"l\u0005Rt", "-_Nt2L\"l\u0005Rt", stringArray1);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(safelist5);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist5);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist5, safelist1);
      assertSame(safelist5, safelist0);
      assertSame(safelist5, safelist2);
      assertSame(safelist5, safelist4);
      assertSame(safelist5, safelist3);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist6 = safelist5.removeProtocols("-_Nt2L\"l\u0005Rt", "-_Nt2L\"l\u0005Rt", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotNull(safelist6);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist5);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist5, safelist1);
      assertSame(safelist5, safelist0);
      assertSame(safelist5, safelist6);
      assertSame(safelist5, safelist2);
      assertSame(safelist5, safelist4);
      assertSame(safelist5, safelist3);
      assertNotSame(safelist6, safelist1);
      assertSame(safelist6, safelist0);
      assertSame(safelist6, safelist2);
      assertSame(safelist6, safelist5);
      assertSame(safelist6, safelist4);
      assertSame(safelist6, safelist3);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertEquals(8, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist7 = Safelist.basic();
      assertFalse(safelist7.equals((Object)safelist6));
      assertFalse(safelist7.equals((Object)safelist3));
      assertFalse(safelist7.equals((Object)safelist0));
      assertFalse(safelist7.equals((Object)safelist5));
      assertFalse(safelist7.equals((Object)safelist1));
      assertFalse(safelist7.equals((Object)safelist4));
      assertFalse(safelist7.equals((Object)safelist2));
      assertNotNull(safelist7);
      assertNotSame(safelist7, safelist6);
      assertNotSame(safelist7, safelist3);
      assertNotSame(safelist7, safelist0);
      assertNotSame(safelist7, safelist5);
      assertNotSame(safelist7, safelist1);
      assertNotSame(safelist7, safelist4);
      assertNotSame(safelist7, safelist2);
      
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("FS");
      assertEquals("FS", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
      
      Safelist safelist8 = safelist0.addProtocols("blockquote", "h6", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist7));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist8.equals((Object)safelist1));
      assertFalse(safelist8.equals((Object)safelist7));
      assertNotNull(safelist8);
      assertSame(safelist0, safelist8);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist4);
      assertSame(safelist0, safelist5);
      assertNotSame(safelist0, safelist1);
      assertNotSame(safelist0, safelist7);
      assertNotSame(stringArray0, stringArray1);
      assertSame(safelist8, safelist5);
      assertSame(safelist8, safelist3);
      assertNotSame(safelist8, safelist1);
      assertNotSame(safelist8, safelist7);
      assertSame(safelist8, safelist0);
      assertSame(safelist8, safelist2);
      assertSame(safelist8, safelist6);
      assertSame(safelist8, safelist4);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = safelist_Protocol0.equals((Object) null);
      assertEquals("FS", safelist_Protocol0.toString());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.simpleText();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      boolean boolean0 = safelist1.isSafeTag("-_Nt2L\"l\u0005Rt");
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(boolean0);
      assertNotSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-_Nt2L\"l\u0005Rt";
      stringArray0[1] = "-_Nt2L\"l\u0005Rt";
      stringArray0[2] = "-_Nt2L\"l\u0005Rt";
      stringArray0[3] = "-_Nt2L\"l\u0005Rt";
      stringArray0[4] = "1.0";
      stringArray0[5] = "-_Nt2L\"l\u0005Rt";
      stringArray0[6] = "-_Nt2L\"l\u0005Rt";
      stringArray0[7] = "-_Nt2L\"l\u0005Rt";
      Safelist safelist2 = safelist0.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertEquals(8, stringArray0.length);
      
      boolean boolean1 = safelist2.isSafeTag("-_Nt2L\"l\u0005Rt");
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist3 = safelist2.preserveRelativeLinks(true);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist1);
      assertNotSame(safelist3, safelist1);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist4 = safelist3.removeTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist1));
      assertNotNull(safelist4);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist3, safelist4);
      assertNotSame(safelist3, safelist1);
      assertSame(safelist3, safelist0);
      assertSame(safelist3, safelist2);
      assertNotSame(safelist4, safelist1);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist0);
      assertSame(safelist4, safelist2);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist5 = new Safelist();
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist4));
      assertNotNull(safelist5);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-_Nt2L\"l\u0005Rt";
      Safelist safelist6 = safelist0.addProtocols("-_Nt2L\"l\u0005Rt", "-_Nt2L\"l\u0005Rt", stringArray1);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist6.equals((Object)safelist1));
      assertNotNull(safelist6);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist5);
      assertNotSame(stringArray1, stringArray0);
      assertSame(safelist6, safelist2);
      assertSame(safelist6, safelist4);
      assertSame(safelist6, safelist0);
      assertSame(safelist6, safelist3);
      assertNotSame(safelist6, safelist5);
      assertNotSame(safelist6, safelist1);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist7 = safelist6.removeProtocols("-_Nt2L\"l\u0005Rt", "-_Nt2L\"l\u0005Rt", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist7.equals((Object)safelist1));
      assertFalse(safelist7.equals((Object)safelist5));
      assertNotNull(safelist7);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist7);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist5);
      assertNotSame(stringArray1, stringArray0);
      assertSame(safelist6, safelist2);
      assertSame(safelist6, safelist4);
      assertSame(safelist6, safelist0);
      assertSame(safelist6, safelist3);
      assertNotSame(safelist6, safelist5);
      assertNotSame(safelist6, safelist1);
      assertSame(safelist6, safelist7);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(safelist7, safelist1);
      assertSame(safelist7, safelist0);
      assertSame(safelist7, safelist3);
      assertSame(safelist7, safelist2);
      assertSame(safelist7, safelist4);
      assertSame(safelist7, safelist6);
      assertNotSame(safelist7, safelist5);
      assertEquals(1, stringArray1.length);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist8 = Safelist.basic();
      assertFalse(safelist8.equals((Object)safelist1));
      assertFalse(safelist8.equals((Object)safelist4));
      assertFalse(safelist8.equals((Object)safelist5));
      assertFalse(safelist8.equals((Object)safelist2));
      assertFalse(safelist8.equals((Object)safelist6));
      assertFalse(safelist8.equals((Object)safelist0));
      assertFalse(safelist8.equals((Object)safelist7));
      assertFalse(safelist8.equals((Object)safelist3));
      assertNotNull(safelist8);
      assertNotSame(safelist8, safelist1);
      assertNotSame(safelist8, safelist4);
      assertNotSame(safelist8, safelist5);
      assertNotSame(safelist8, safelist2);
      assertNotSame(safelist8, safelist6);
      assertNotSame(safelist8, safelist0);
      assertNotSame(safelist8, safelist7);
      assertNotSame(safelist8, safelist3);
      
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("FS");
      assertEquals("FS", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
      
      Safelist safelist9 = safelist0.addProtocols("blockquote", "h6", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist8));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist9.equals((Object)safelist5));
      assertFalse(safelist9.equals((Object)safelist1));
      assertFalse(safelist9.equals((Object)safelist8));
      assertNotNull(safelist9);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist7);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist8);
      assertSame(safelist0, safelist9);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist4);
      assertNotSame(safelist0, safelist5);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(safelist9, safelist5);
      assertSame(safelist9, safelist6);
      assertSame(safelist9, safelist3);
      assertSame(safelist9, safelist2);
      assertSame(safelist9, safelist4);
      assertSame(safelist9, safelist0);
      assertSame(safelist9, safelist7);
      assertNotSame(safelist9, safelist1);
      assertNotSame(safelist9, safelist8);
      assertEquals(8, stringArray0.length);
      
      boolean boolean2 = safelist_Protocol0.equals((Object) null);
      assertEquals("FS", safelist_Protocol0.toString());
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Safelist safelist10 = safelist5.removeAttributes("registerTree? {}", stringArray0);
      assertFalse(safelist5.equals((Object)safelist6));
      assertFalse(safelist5.equals((Object)safelist9));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist7));
      assertFalse(safelist5.equals((Object)safelist8));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist10.equals((Object)safelist7));
      assertFalse(safelist10.equals((Object)safelist2));
      assertFalse(safelist10.equals((Object)safelist3));
      assertFalse(safelist10.equals((Object)safelist9));
      assertFalse(safelist10.equals((Object)safelist0));
      assertFalse(safelist10.equals((Object)safelist6));
      assertFalse(safelist10.equals((Object)safelist1));
      assertFalse(safelist10.equals((Object)safelist8));
      assertFalse(safelist10.equals((Object)safelist4));
      assertNotNull(safelist10);
      assertSame(safelist5, safelist10);
      assertNotSame(safelist5, safelist6);
      assertNotSame(safelist5, safelist9);
      assertNotSame(safelist5, safelist3);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist7);
      assertNotSame(safelist5, safelist8);
      assertNotSame(safelist5, safelist4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(safelist10, safelist7);
      assertNotSame(safelist10, safelist2);
      assertNotSame(safelist10, safelist3);
      assertNotSame(safelist10, safelist9);
      assertNotSame(safelist10, safelist0);
      assertNotSame(safelist10, safelist6);
      assertSame(safelist10, safelist5);
      assertNotSame(safelist10, safelist1);
      assertNotSame(safelist10, safelist8);
      assertNotSame(safelist10, safelist4);
      assertEquals(8, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      assertNotNull(safelist0);
      
      Safelist safelist1 = Safelist.simpleText();
      assertFalse(safelist1.equals((Object)safelist0));
      assertNotNull(safelist1);
      assertNotSame(safelist1, safelist0);
      
      boolean boolean0 = safelist1.isSafeTag("-_Nt2L\"l\u0005Rt");
      assertFalse(safelist1.equals((Object)safelist0));
      assertFalse(boolean0);
      assertNotSame(safelist1, safelist0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-_Nt2L\"l\u0005Rt";
      stringArray0[1] = "-_Nt2L\"l\u0005Rt";
      stringArray0[2] = "-_Nt2L\"l\u0005Rt";
      stringArray0[3] = "-_Nt2L\"l\u0005Rt";
      stringArray0[4] = "1.0";
      stringArray0[5] = "-_Nt2L\"l\u0005Rt";
      stringArray0[6] = "-_Nt2L\"l\u0005Rt";
      stringArray0[7] = "-_Nt2L\"l\u0005Rt";
      Safelist safelist2 = safelist0.addTags(stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertNotNull(safelist2);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertNotSame(safelist2, safelist1);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist3 = safelist2.addProtocols("-_Nt2L\"l\u0005Rt", "lI2A6ud3-DVg9+", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist3.equals((Object)safelist1));
      assertNotNull(safelist3);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist3, safelist2);
      assertSame(safelist3, safelist0);
      assertNotSame(safelist3, safelist1);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist4 = safelist2.preserveRelativeLinks(true);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist2.equals((Object)safelist1));
      assertFalse(safelist4.equals((Object)safelist1));
      assertNotNull(safelist4);
      assertSame(safelist0, safelist3);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertSame(safelist0, safelist4);
      assertSame(safelist2, safelist4);
      assertSame(safelist2, safelist0);
      assertSame(safelist2, safelist3);
      assertNotSame(safelist2, safelist1);
      assertSame(safelist4, safelist3);
      assertSame(safelist4, safelist2);
      assertNotSame(safelist4, safelist1);
      assertSame(safelist4, safelist0);
      assertEquals(8, stringArray0.length);
      
      Safelist safelist5 = Safelist.simpleText();
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist3));
      assertNotNull(safelist5);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist3);
      
      Tag tag0 = Tag.valueOf("org.eclipse.jetty.util.component.AttributeContainerMap");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.getName());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "em", (Attributes) null);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.getName());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(formElement0.hasParent());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement0.tagName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.clone();
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.getName());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(formElement0.hasParent());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement0.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", formElement1.normalName());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement1.tagName());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.equals((Object)formElement0));
      assertNotNull(formElement1);
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      
      Attribute attribute0 = new Attribute("{} idle timeout check, elapsed: {} ms, remaining: {} ms", "dt");
      assertEquals("{} idle timeout check, elapsed: {} ms, remaining: {} ms", attribute0.getKey());
      assertEquals("dt", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertNotNull(attribute0);
      
      boolean boolean1 = safelist5.isSafeAttribute("-_Nt2L\"l\u0005Rt", formElement1, attribute0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.getName());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", tag0.normalName());
      assertFalse(tag0.isKnownTag());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(formElement0.hasParent());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", formElement0.normalName());
      assertFalse(formElement0.isBlock());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement0.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals("org.eclipse.jetty.util.component.attributecontainermap", formElement1.normalName());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement1.tagName());
      assertEquals("org.eclipse.jetty.util.component.AttributeContainerMap", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("{} idle timeout check, elapsed: {} ms, remaining: {} ms", attribute0.getKey());
      assertEquals("dt", attribute0.getValue());
      assertTrue(attribute0.hasDeclaredValue());
      assertFalse(formElement0.equals((Object)formElement1));
      assertFalse(formElement1.equals((Object)formElement0));
      assertTrue(boolean1 == boolean0);
      assertFalse(safelist5.equals((Object)safelist2));
      assertFalse(safelist5.equals((Object)safelist0));
      assertFalse(safelist5.equals((Object)safelist1));
      assertFalse(safelist5.equals((Object)safelist4));
      assertFalse(safelist5.equals((Object)safelist3));
      assertFalse(boolean1);
      assertNotSame(formElement0, formElement1);
      assertNotSame(formElement1, formElement0);
      assertNotSame(safelist5, safelist2);
      assertNotSame(safelist5, safelist0);
      assertNotSame(safelist5, safelist1);
      assertNotSame(safelist5, safelist4);
      assertNotSame(safelist5, safelist3);
      
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "-_Nt2L\"l\u0005Rt";
      Safelist safelist6 = safelist0.addProtocols("-_Nt2L\"l\u0005Rt", "-_Nt2L\"l\u0005Rt", stringArray1);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist5));
      assertNotNull(safelist6);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist6);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist5);
      assertSame(safelist0, safelist4);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(safelist6, safelist1);
      assertSame(safelist6, safelist0);
      assertSame(safelist6, safelist3);
      assertNotSame(safelist6, safelist5);
      assertSame(safelist6, safelist4);
      assertSame(safelist6, safelist2);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist7 = safelist6.removeProtocols("-_Nt2L\"l\u0005Rt", "-_Nt2L\"l\u0005Rt", stringArray0);
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertFalse(safelist6.equals((Object)safelist1));
      assertFalse(safelist6.equals((Object)safelist5));
      assertFalse(safelist7.equals((Object)safelist5));
      assertFalse(safelist7.equals((Object)safelist1));
      assertNotNull(safelist7);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist7);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist5);
      assertSame(safelist0, safelist4);
      assertNotSame(stringArray0, stringArray1);
      assertNotSame(stringArray1, stringArray0);
      assertNotSame(safelist6, safelist1);
      assertSame(safelist6, safelist0);
      assertSame(safelist6, safelist3);
      assertSame(safelist6, safelist7);
      assertNotSame(safelist6, safelist5);
      assertSame(safelist6, safelist4);
      assertSame(safelist6, safelist2);
      assertSame(safelist7, safelist6);
      assertSame(safelist7, safelist4);
      assertSame(safelist7, safelist0);
      assertNotSame(safelist7, safelist5);
      assertSame(safelist7, safelist3);
      assertNotSame(safelist7, safelist1);
      assertSame(safelist7, safelist2);
      assertEquals(8, stringArray0.length);
      assertEquals(1, stringArray1.length);
      
      Safelist safelist8 = Safelist.basic();
      assertFalse(safelist8.equals((Object)safelist1));
      assertFalse(safelist8.equals((Object)safelist6));
      assertFalse(safelist8.equals((Object)safelist3));
      assertFalse(safelist8.equals((Object)safelist7));
      assertFalse(safelist8.equals((Object)safelist5));
      assertFalse(safelist8.equals((Object)safelist0));
      assertFalse(safelist8.equals((Object)safelist2));
      assertFalse(safelist8.equals((Object)safelist4));
      assertNotNull(safelist8);
      assertNotSame(safelist8, safelist1);
      assertNotSame(safelist8, safelist6);
      assertNotSame(safelist8, safelist3);
      assertNotSame(safelist8, safelist7);
      assertNotSame(safelist8, safelist5);
      assertNotSame(safelist8, safelist0);
      assertNotSame(safelist8, safelist2);
      assertNotSame(safelist8, safelist4);
      
      Safelist.Protocol safelist_Protocol0 = new Safelist.Protocol("FS");
      assertEquals("FS", safelist_Protocol0.toString());
      assertNotNull(safelist_Protocol0);
      
      Safelist safelist9 = safelist0.addProtocols("blockquote", "h6", stringArray0);
      assertFalse(safelist0.equals((Object)safelist8));
      assertFalse(safelist0.equals((Object)safelist1));
      assertFalse(safelist0.equals((Object)safelist5));
      assertFalse(stringArray0.equals((Object)stringArray1));
      assertFalse(safelist9.equals((Object)safelist5));
      assertFalse(safelist9.equals((Object)safelist8));
      assertFalse(safelist9.equals((Object)safelist1));
      assertNotNull(safelist9);
      assertNotSame(safelist0, safelist8);
      assertSame(safelist0, safelist3);
      assertSame(safelist0, safelist6);
      assertSame(safelist0, safelist7);
      assertSame(safelist0, safelist9);
      assertNotSame(safelist0, safelist1);
      assertSame(safelist0, safelist2);
      assertNotSame(safelist0, safelist5);
      assertSame(safelist0, safelist4);
      assertNotSame(stringArray0, stringArray1);
      assertSame(safelist9, safelist6);
      assertNotSame(safelist9, safelist5);
      assertSame(safelist9, safelist4);
      assertNotSame(safelist9, safelist8);
      assertSame(safelist9, safelist0);
      assertSame(safelist9, safelist2);
      assertSame(safelist9, safelist3);
      assertNotSame(safelist9, safelist1);
      assertSame(safelist9, safelist7);
      assertEquals(8, stringArray0.length);
      
      boolean boolean2 = safelist_Protocol0.equals((Object) null);
      assertEquals("FS", safelist_Protocol0.toString());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Safelist safelist0 = new Safelist();
      assertNotNull(safelist0);
      
      String string0 = "dt";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dt";
      stringArray0[1] = "dt";
      stringArray0[2] = "dt";
      stringArray0[3] = "dt";
      stringArray0[6] = "dt";
      stringArray0[5] = "dt";
      stringArray0[6] = "dt";
      String[] stringArray1 = new String[1];
      assertFalse(stringArray1.equals((Object)stringArray0));
      
      stringArray1[0] = "NRw6NY'rnz?L4\"yPe4";
      Safelist safelist1 = safelist0.preserveRelativeLinks(true);
      assertNotNull(safelist1);
      assertSame(safelist0, safelist1);
      assertSame(safelist1, safelist0);
      
      // Undeclared exception!
      try { 
        safelist0.addProtocols("^9%", stringArray0[4], stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Safelist safelist0 = Safelist.relaxed();
      Safelist safelist1 = new Safelist(safelist0);
      Document document0 = Parser.parse("ByteBuffer ", "h2");
      CDataNode cDataNode0 = new CDataNode("o;[o1+ \"");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("h2", "h2", attributes0);
      safelist1.isSafeAttribute("ByteBuffer ", document0, attribute0);
      String string0 = "";
      safelist1.getEnforcedAttributes("");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "p";
      stringArray0[2] = "o;[o1+ \"";
      stringArray0[3] = "nofollow";
      stringArray0[4] = "";
      stringArray0[5] = "o;[o1+ \"";
      stringArray0[6] = "nofollow";
      Safelist.simpleText();
      String string1 = "li";
      String[] stringArray1 = new String[0];
      safelist1.addProtocols("o;[o1+ \"", "li", stringArray1);
      // Undeclared exception!
      try { 
        safelist1.removeProtocols("u", "select", stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot remove a protocol that is not set.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Safelist safelist0 = Safelist.simpleText();
      Safelist.relaxed();
      String[] stringArray0 = new String[9];
      stringArray0[2] = stringArray0[1];
      stringArray0[3] = "";
      stringArray0[4] = "";
      safelist0.isSafeTag("");
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[7] = "";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        safelist0.removeAttributes("", stringArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Safelist safelist0 = Safelist.basic();
      Safelist safelist1 = safelist0.preserveRelativeLinks(false);
      safelist1.getEnforcedAttributes("mYCdWBt2kX+#lA4o}");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "blockquote";
      Safelist safelist2 = safelist1.addTags(stringArray0);
      safelist2.removeAttributes("blockquote", stringArray0);
      Safelist safelist3 = Safelist.simpleText();
      Safelist.AttributeKey.valueOf("-");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "-";
      stringArray1[1] = "-";
      stringArray1[2] = "-";
      stringArray1[3] = "-";
      stringArray1[4] = "-";
      stringArray1[5] = "-";
      Safelist safelist4 = Safelist.basicWithImages();
      Tag tag0 = Tag.valueOf("u#[A`{:");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Collector$FirstFinder", (Attributes) null);
      Attribute attribute0 = Attribute.createFromEncoded("-", "-");
      safelist4.isSafeAttribute("blockquote", formElement0, attribute0);
      stringArray1[6] = "";
      stringArray1[7] = "-";
      stringArray1[8] = "-";
      safelist3.isSafeAttribute("<T$^H4_K|.", formElement0, attribute0);
      // Undeclared exception!
      try { 
        safelist3.addTags(stringArray1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
