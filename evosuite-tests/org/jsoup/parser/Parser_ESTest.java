/*
 * This file was automatically generated by EvoSuite
 * Tue Mar 22 19:26:32 GMT 2022
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StringReader;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Node;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Parser_ESTest extends Parser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R7xV&</#;#(=%bHxTKd", "zu_zbc2");
      assertEquals("zu_zbc2", document0.location());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      assertFalse(parser1.isTrackErrors());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTrackErrors(2102);
      boolean boolean0 = parser1.isTrackErrors();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Could not evaluate XPath query [%s]: %s", "");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "Could not evaluate XPath query [%s]: %s", parseErrorList0);
      assertEquals(0, list0.size());
      assertEquals("", document0.location());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      boolean boolean0 = parser0.isContentForTagData("z");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Document document0 = Parser.parse(">%", "");
      assertEquals("", document0.location());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      List<Node> list0 = Parser.parseXmlFragment("", "");
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      assertSame(parser1, parser0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.newInstance();
      assertNotSame(parser1, parser0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertSame(parser0, parser1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = Parser.unescapeEntities("nfb*JGFEDXKRRXe0I{Q", false);
      assertEquals("nfb*JGFEDXKRRXe0I{Q", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.parser.Parser", "Om5Lh&LyHE9E=+zzH");
      parser0.parseFragmentInput("n0neJ>MD<.C,'MOBkb", document0, "org.jsoup.parser.Parser");
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.parser.Parser");
      // Undeclared exception!
      try { 
        parser0.parseInput((Reader) stringReader0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
